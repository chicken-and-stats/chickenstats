{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Introduction","text":"<p>Warning</p> <p>You are on the developmental version of the documentation &amp; none of these features have been publicly released. Here is the latest version</p> <p>Welcome to the technical documentation &amp; reference materials for chickenstats, a Python package for scraping &amp; analyzing sports data. With just a few lines of code:</p> <ul> <li>Scrape &amp; manipulate data from various NHL endpoints, leveraging  chicken_nhl, which includes a proprietary xG model for shot quality metrics</li> <li>Augment play-by-play data &amp; generate custom aggregations from raw csv files downloaded from Evolving-Hockey (subscription required) with  evolving_hockey</li> <li>Download salary &amp; other contract information for individual skaters &amp; goalies programmatically from CapFriendly with  capfriendly</li> </ul> <p>Here you can find detailed guides &amp; explanations for most features. The package is under active development - download the latest version (1.7.8) for the most up-to-date features &amp; be sure to consult the correct documentation .</p>"},{"location":"#navigation","title":"Navigation","text":"Tip <p>Navigate the site using the header, side-bar, or search tool. Mobile users can tap  (upper-left) to bring up the menu, then  to see a linked table of contents for the current page, or  to navigate the menu back towards the home page. </p> <ul> <li> <p> Usage &amp; installation</p> <p>Download &amp; install <code>chickenstats</code> with <code>pip</code> to get up &amp; running in just a few minutes.</p> <p> Getting Started</p> </li> <li> <p> Tutorials &amp; examples</p> <p>Discover the package using hands-on tutorials &amp; examples from the User Guide.</p> <p> User Guide</p> </li> <li> <p> Reference materials</p> <p>Consult the Reference section for in-depth explanations  &amp; debugging assistance.</p> <p> Reference</p> </li> <li> <p> xG model</p> <p>Learn about the open-source expected goals (xG) model included with <code>chickenstats</code>.</p> <p> xG model</p> </li> <li> <p> Blog</p> <p>Read the latest analyses leveraging the library, as well as about the newest features &amp; releases</p> <p> Blog</p> </li> <li> <p> Contribute</p> <p>Read about known issues, future development roadmap, and/or how to contribute. </p> <p> Contribute</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p><code>chickenstats</code> is open-source to facilitate public hockey research &amp; analytics. The goal is to improve understanding of the sport through public access to accurate data, promoting creativity, collaboration, &amp; reproducibility.</p> <p>The library is composed of three modules, each for a different data source.</p> <code>chicken_nhl</code> <code>evolving_hockey</code> <code>capfriendly</code> <p><code>chickenstats.chicken_nhl</code> provides tools to scrape data from official NHL sources(1) &amp; construct a play-by-play dataframe with 70+ potential fields(2) for each event.(3) Each game is scraped in approximately 3-4 seconds, with minimal performance degradation after scraping hundreds or thousands of games.(4)</p> <ol> <li>Sources include (non-exhaustive):  HTML shifts,  events, &amp;  rosters, as well as  events,  rosters, &amp;  game information from the NHL's API endpoints.</li> <li>Fields include (non-exhaustive) primary player idenfitication &amp; information (e.g., position), various game state characteristics (e.g., strength-state, score-state, score differential), Cartesian event coordinates, shot type (e.g., wrist, slap, deflection), distance &amp; angle from net,  &amp; on-ice teammate &amp; opponent identification &amp; information.</li> <li>Supported events include:  goals (including assists),  shots on net,  missed shots,  blocked shots,  faceoffs,  penalties &amp; delayed penalties,  giveaways, &amp;  takeaways.</li> <li>This can certainly be improved (and will be as the library is refactored). However, the library was designed with known negative impacts (e.g., Pydantic-based data validation).</li> </ol> Data are supported from 2010-11 to present <p>With some exceptions for individual games, the <code>Game</code> &amp; <code>Scraper</code> objects  will return data for games occurring since the start of the 2010-2011 season. However, the <code>Season</code> object (including the <code>schedule()</code> &amp; <code>standings()</code> methods) will return data extending to the NHL's founding in 1917.</p> <p>The module includes three classes for accessing data:</p> <ol> <li><code>Scraper</code> to scrape individual &amp; multiple games</li> <li><code>Game</code>, which scrapes individual games &amp; is the backbone of <code>Scraper</code></li> <li><code>Season</code> to scrape schedule &amp; standings information</li> </ol> <p>A <code>Scraper</code> takes a single game ID or a list-like object of game IDs &amp; scrapes publicly-accessible, official NHL endpoints to construct a Pandas DataFrame of user-defined information(1), while, perhaps obviously, a <code>Game</code> object will scrape data for a single game.(2) Given a <code>Scraper</code> can access data for multiple, as well as individual, games, it should suffice for most use-cases.(3) A <code>Season</code> takes a single year &amp; access the NHL API to construct a Pandas DataFrame of that season's schedule standings information. Significantly, all underlying data is stored in the <code>Game</code>, <code>Scraper</code>, &amp; <code>Season</code> objects for later reference,(4) which reduces the burden on public endpoints &amp; improves debugging.</p> <ol> <li>Data include (non-exhaustive):  HTML shifts,  events, &amp;  rosters, as well as  events,  rosters, &amp;  game information from the NHL's API endpoints.</li> <li>To be more specific, series of <code>Game</code> objects functions as the backbone of any <code>Scraper</code> object.</li> <li>That said, if you'd like to contribute, the <code>Game</code> object provides non-public methods to access data at intermediate processing stages. The below returns a list of raw HTML events, prior to any processing. <pre><code>from chickenstats.chicken_nhl import Game\n\ngame_id = 2023020001\ngame = Game(game_id)\nhtml_events = game._scrape_html_events()\n</code></pre> For more information &amp; direction, see  Contribute</li> <li>For example, HTML &amp; API events data, key inputs for the play-by-play DataFrame, are retained after scraping play-by-play data. </li> </ol> Example <p>For more detailed tutorials &amp; examples or in-depth reference materials, consult  User Guide or  Reference</p> <p>First, import the relevant classes</p> <pre><code>from chickenstats.chicken_nhl import Scraper, Season, Game\n</code></pre> <code>Scraper</code><code>Season</code><code>Game</code> <p>Scrape play-by-play data for the first ten games of the current (2023-24) regular season</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\npbp = scraper.play_by_play\n</code></pre> <p>Scrape roster data for the first ten games of the current (2023-24) regular season</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\nrosters = scraper.rosters\n</code></pre> <p>Scrape schedule data for every team for the current (2023-24) season</p> <pre><code>season = Season(2023)\nschedule = season.schedule()\n</code></pre> <p>For a specific team, just provide the three-letter abbreviation</p> <pre><code>season = Season(2023)\nschedule = season.schedule('NSH')\n</code></pre> <p>The <code>Game</code> object functions similarly to the <code>Scraper</code> object, with the major exception that data are returned as a list by default.</p> <p>To return a list of play-by-play events</p> <pre><code>game_id = 2023020001\nscraper = Game(game_id)\npbp = game.play_by_play\n</code></pre> <p>To return the equivalent Pandas DataFrame, simply append \"_df\" to the property</p> <pre><code>game_id = 2023020001\nscraper = Game(game_id)\npbp = game.play_by_play_df\n</code></pre> <p>To be completed</p> <p>To be completed</p> <p>Additional information can be found in the  Reference</p>"},{"location":"#help","title":"Help","text":"<p>How to get help  Help</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p><code>chickenstats</code> would not be possible without the efforts of countless other individuals.</p>"},{"location":"blog/","title":"Blog","text":"<p>Landing page, blog coming soon</p>"},{"location":"blog/author/chicken/","title":"Chicken","text":"<p>Test landing page for chicken</p>"},{"location":"blog/category/hockey/","title":"Hockey","text":"<p>Test landing page for hockey</p>"},{"location":"blog/2023/12/hello-world/","title":"First post!","text":"","tags":["Nashville Predators","Hockey","2023"]},{"location":"blog/2023/12/hello-world/#intro","title":"Intro","text":"<p>This is my first blog post on a website documenting a Python scraper that I built!</p> <p>More text here</p>","tags":["Nashville Predators","Hockey","2023"]},{"location":"blog/2023/12/hello-world/#other-section","title":"Other section","text":"","tags":["Nashville Predators","Hockey","2023"]},{"location":"contribute/contribute/","title":"Contribute","text":"<p>Contributing to future <code>chickenstats</code> development. </p> <p>For contributing to the xG model, or for questions about the underlying research &amp; data, please see  xG Model.</p> <ul> <li> <p> Known Issues</p> <p>See known bugs &amp; issues before reporting any new ones. It's also a good place to start contributing </p> <p> Read more</p> </li> <li> <p> Roadmap</p> <p>See more information about plans for the future development of <code>chickenstats</code></p> <p> Read more</p> </li> </ul>"},{"location":"contribute/known_issues/","title":"Known Issues","text":"<p>In production</p>"},{"location":"contribute/roadmap/","title":"Roadmap","text":"<p>In production</p>"},{"location":"guide/guide/","title":"User Guide","text":"<p>Detailed walk-throughs and explanations</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/guide/#modules","title":"Modules","text":"<ul> <li> <p> chicken_nhl</p> <p>Overview of basic <code>chicken_nhl</code> usage &amp; functionalities</p> <p> Read more</p> </li> <li> <p> capfriendly</p> <p>Overview of basic <code>capfriendly</code> usage &amp; functionalities</p> <p> Read more</p> </li> </ul>"},{"location":"guide/guide/#tutorials","title":"Tutorials","text":"<ul> <li> <p> Shot Maps</p> <p>Plot shot locations for your favorite teams &amp; players using <code>chicken_nhl</code> and <code>hockey_rink</code> libraries</p> <p> Get started</p> </li> <li> <p> Faceoff win rate</p> <p>Analyze faceoff performance using <code>chicken_nhl</code> &amp; <code>matplotlib</code> libraries</p> <p> Get started</p> </li> <li> <p> Goals Saved Above Expected</p> <p>Analyze goalie performance using <code>chicken_nhl</code> &amp; <code>matplotlib</code> libraries</p> <p> Get started</p> </li> </ul>"},{"location":"guide/guide/#examples","title":"Examples","text":"<ul> <li> <p> Gallery</p> <p>Collection of charts produced using <code>chickenstats</code> &amp; accompanying source code </p> <p> Go to page</p> </li> <li> <p> Original Research</p> <p>Links to original research conducted &amp; other works published using <code>chickenstats</code></p> <p> Go to page</p> </li> </ul>"},{"location":"guide/capfriendly/capfriendly/","title":"capfriendly","text":"<p>Information about the <code>capfriendly</code> module.</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/capfriendly/capfriendly/#usage","title":"Usage","text":"<p>The <code>capfriendly</code> module and relevant functions can be imported using the below snippet:</p> <pre><code>from chickenstats.capfriendly import scrape_capfriendly\n</code></pre> <p>The module is composed of only the one function, which scrapes CapFriendly data for a given year or years.</p> <pre><code>capfriendly = scrape_capfriendly() # By default, returns the current season (2022)\n</code></pre>"},{"location":"guide/capfriendly/capfriendly/#tips","title":"Tips","text":"<p>The fine folks at CapFriendly are incredibly generous to provide such detailed data free of charge. Please scrape responsibly, keeping in mind the service that CapFriendly provides to greater hockey  community. </p> <p>Warning</p> <p>Save your data frequently to prevent unnecessary strain on the CapFriendly servers. </p>"},{"location":"guide/chicken_nhl/chicken_nhl/","title":"chicken_nhl","text":"<p>Information about the <code>chicken_nhl</code> module.</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/chicken_nhl/chicken_nhl/#usage","title":"Usage","text":"<p>The <code>chicken_nhl</code> module and relevant functions can be imported using the below snippet:</p> <pre><code>from chickenstats.chicken_nhl import scrape_schedule, scrape_pbp\n</code></pre> <p>Almost all functions rely on game IDs, which can be found using the <code>scrape_schedule()</code> function:</p> <pre><code>sched = scrape_schedule() # By default, returns the current season (2022)\n\ngame_ids = sched.game_id.head(10) # Returns the first ten game IDs\n</code></pre> <p>Game IDs can be given as a list, or other generator-like object:</p> <pre><code>pbp = scrape_pbp(game_ids) # Game IDs are given as a Pandas Series\n</code></pre> <p>Functions available to users</p> Main functionsInput functions <p>These should be your go-to functions and encompass the full functionality of the module. They primarily return pandas DataFrames.</p> <ol> <li><code>scrape_schedule()</code> returns the schedule for an entire season, a specific date, or a subset based on status (e.g., live or final)</li> <li><code>scrape_standings()</code> returns the latest NHL, conference, divison, and wild card standings for a given season</li> <li><code>scrape_pbp()</code> returns play-by-play data for a given game or games</li> </ol> <p>These are typically used as inputs for the main functions. They can be used in various combinations for custom analyses. They return pandas DataFrames by default, but can return dictionaries using the nested keyword argument.</p> <ol> <li><code>scrape_game_info()</code> returns the game information (e.g., date, venue, teams) for a given game or games</li> <li><code>scrape_api_events()</code> returns events from the NHL API endpoint for a given game or games</li> <li><code>scrape_html_events()</code> returns events from the NHL HTML endpoint for a given game or games</li> <li><code>scrape_api_rosters()</code> returns roster data from the NHL API endpoint for a given game or games</li> <li><code>scrape_html_rosters()</code> returns roster data from the NHL HTML endpoint for a given game or games</li> <li><code>scrape_rosters()</code> returns combined roster data after scraping and processing data from both the NHL HTML and API endpoints</li> <li><code>scrape_shifts()</code> returns shifts data from the NHL HTML endpoint</li> <li><code>scrape_changes()</code>returns changes data after scraping and processing shifts data from the NHL HTML endpoint</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#architecture","title":"Architecture","text":"<p>Below is a visual representation of the <code>scrape_pbp()</code> function, depicting data sources &amp;  processing stages. </p> <pre><code>graph LR\n    subgraph raw[Raw data]\n    api_events_raw(API events)\n    game_info_raw(Game info)\n    api_rosters_raw(API rosters)\n    html_rosters_raw(HTML rosters)\n    html_events_raw(HTML events)\n    shifts_raw(Shifts)\n    end\n\n    subgraph intermediate[Intermediate processing]\n    api_pbp(API play-by-play)\n    rosters(Combined rosters)\n    html_pbp(HTML play-by-play)\n    changes(Changes on / off)\n    end\n\n    subgraph final_scrape[Data returned]\n    final_pbp(Play-by-play dataframe)\n    end\n\n    raw --&gt; intermediate --&gt; final_scrape\n\n    api_events_raw &amp; game_info_raw &amp; api_rosters_raw --&gt; api_pbp --&gt; final_pbp\n\n    game_info_raw &amp; api_rosters_raw &amp; html_rosters_raw --&gt; rosters --&gt; final_pbp\n\n    html_rosters_raw &amp; html_events_raw --&gt; html_pbp --&gt; final_pbp\n\n    html_rosters_raw &amp; shifts_raw --&gt; changes --&gt; final_pbp\n</code></pre> Info <p>With some exceptions for individual games, the <code>scrape_pbp()</code> function will return data for games occurring since the start of the 2010-2011 season. However, the <code>scrape_schedule()</code> &amp; <code>scrape_standings()</code> functions will return data extending to the NHL's founding in 1917.</p>"},{"location":"guide/examples/gallery/","title":"Gallery","text":"<p>In production</p>"},{"location":"guide/examples/original_research/","title":"Coming soon","text":"<p>In production</p>"},{"location":"guide/tutorials/faceoff_wins/","title":"Faceoff Win Rate","text":"<p>In production</p>"},{"location":"guide/tutorials/gsax/","title":"Goals Saved Above Expected","text":"<p>In production</p>"},{"location":"guide/tutorials/shot_maps/","title":"Shot Maps","text":"<p>In production</p>"},{"location":"home/getting_started/","title":"Getting started","text":"<p>Instructions for installing <code>chickenstats</code>, basic usage, and downloading example guides.</p>"},{"location":"home/getting_started/#requirements","title":"Requirements","text":"<p><code>chickenstats</code> requires Python 3.7 or later, preferably the most recent version (3.10).</p>"},{"location":"home/getting_started/#installation","title":"Installation","text":"<p><code>chickenstats</code> can be installed via PyPi:</p> <pre><code>pip install chickenstats\n</code></pre> <p>You can ensure the install was successful by checking that you have the latest version (1.8.0) installed:</p> <pre><code>pip show chickenstats\n</code></pre>"},{"location":"home/getting_started/#basic-usage","title":"Basic usage","text":"<p>Once installed in your preferred environment, you can immediately begin using <code>chickenstats</code> in your preferred IDE. First, import the package and the relevant functions:</p> <pre><code>from chickenstats.chicken_nhl import scrape_schedule, scrape_standings, scrape_pbp\n</code></pre> <p>Then, you're off. The <code>scrape_schedule</code> function will return NHL game IDs, which are the foundation of almost all  <code>chicken_nhl</code> functionality. The <code>scrape_pbp</code> function will return approximately one game every 2.5 seconds,  with no loss in performance when scraping hundreds (or thousands of games). The following snippet will scrape the entire current season's finished games:</p> <pre><code>sched = scrape_schedule(2022, final_only = True) \n\ngame_ids = sched.game_id\n\npbp = scrape_pbp(game_ids)\n</code></pre> <p>If you wanted to scrape live games only:</p> <pre><code>sched = scrape_schedule(live_only = True)\n\ngame_ids = sched.game_id\n\npbp = scrape_pbp(game_ids)\n</code></pre> <p>The <code>scrape_standings</code> function will return the latest NHL standings, as well as division, conference, and wild card rankings:</p> <pre><code>standings = scrape_standings(2022)\n</code></pre>"},{"location":"home/getting_started/#tutorials-examples","title":"Tutorials &amp; examples","text":""},{"location":"home/help/","title":"Help","text":"<p>If you need help with any aspect of <code>chickenstats</code>, from installation to usage, please don't hesitate to reach out!</p>"},{"location":"home/help/#bugs-feature-requests","title":"Bugs &amp; feature requests","text":"<p>Please report any bugs or issues via the <code>chickenstats</code> issues page, where you can also post feature requests. Before doing so, please check the roadmap, there might already be plans to include your request. </p>"},{"location":"home/help/#contact-information","title":"Contact information","text":"<p>Have something to say? You can find me on  Twitter at @chickenandstats or   email me at chicken@chickenandstats.com.</p>"},{"location":"reference/reference/","title":"Reference","text":"<p>In-depth explanations and debugging assistance. See below for links to individual pages or sections.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/reference/#chicken_nhl","title":"chicken_nhl","text":"<ul> <li> <p> <code>chicken_nhl.scrape</code></p> <p>Functions to scrape data from NHL HTML and API endpoints</p> <p> Read more</p> </li> </ul>"},{"location":"reference/reference/#capfriendly","title":"capfriendly","text":"<ul> <li> <p> <code>capfriendly.scrape</code></p> <p>Functions to scrape data from Capfriendly.com</p> <p> Read more</p> </li> </ul>"},{"location":"reference/capfriendly/scrape/","title":"capfriendly.scrape","text":"<p>Reference materials for the <code>chickenstats.capfriendly.scrape</code> module.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/capfriendly/scrape/#chickenstats.capfriendly.scrape_capfriendly","title":"scrape_capfriendly","text":"<pre><code>scrape_capfriendly(year=2023)\n</code></pre> <p>Scrape salary data from Capfriendly for a given year or list-like object of four-digit seasons. Returns a Pandas DataFrame.</p> <p>By default, returns data from the 2022-2023 season. Historical data supported. Typically takes 8-12 seconds per season.</p> <p>For a glossary of terms, please visit www.capfriendly.com</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>str or integer</code> <p>Four-digit year (e.g., 2023), or list-like object consisting of four-digit years (e.g., generator or Pandas Series)</p> <code>= 2023</code> <p>Returns:</p> Name Type Description <code>season</code> <code>integer</code> <p>8-digit season code, e.g., 20222023</p> <code>player_name</code> <code>object</code> <p>Player's latin-encoded name, e.g., FILIP FORSBERG</p> <code>player_id</code> <code>object</code> <p>Identifier that can be used to match with Evolving Hockey data, e.g., FILIP.FORSBERG</p> <code>team</code> <code>object</code> <p>3-letter team code, e.g., NSH</p> <code>country</code> <code>object</code> <p>Country with which player is affiliated, e.g., SWEDEN</p> <code>position</code> <code>object</code> <p>Player's position, e.g., LW</p> <code>birth_date</code> <code>object</code> <p>Player's birth date, e.g., 1994-08-13</p> <code>birth_year</code> <code>integer</code> <p>Player's birth year, e.g., 1994</p> <code>age</code> <code>integer</code> <p>Player's age as of start of the season, e.g., 28</p> <code>age_precise</code> <code>float</code> <p>Player's age as of the time the data is scraped, e.g., 28.62208</p> <code>handed</code> <code>object</code> <p>Hand with which the player shoots (skater) or catches (goalie), e.g., RIGHT</p> <code>height_ft</code> <code>float</code> <p>Player's height in feet, e.g., 6.083333</p> <code>height_cm</code> <code>integer</code> <p>Player's height in centimeters, e.g., 185</p> <code>weight_lbs</code> <code>integer</code> <p>Player's weight in pounds, e.g., 205</p> <code>weight_kg</code> <code>integer</code> <p>Player's weight in kilograms, e.g., 93</p> <code>drafted</code> <code>object</code> <p>Player's draft information, e.g., 11 - ROUND 1 - 2012 (WSH)</p> <code>draft_year</code> <code>integer</code> <p>Year player was drafted, e.g., 2012</p> <code>draft_team</code> <code>object</code> <p>Team that drafted player, e.g., WSH</p> <code>draft_pick</code> <code>object</code> <p>Pick with which player was drafted, e.g., 11</p> <code>draft_round</code> <code>object</code> <p>Round in which player was drafted, e.g., ROUND 1</p> <code>signing_date</code> <code>object</code> <p>Date on which current contract was signed, e.g., 2022-07-09</p> <code>signing_age</code> <code>integer</code> <p>Age in years at time of signing, e.g., 27</p> <code>signing_age_precise</code> <code>float</code> <p>Age in years at time of singing, e.g., 27.904748</p> <code>signing</code> <code>object</code> <p>Contract type at time of signing, e.g., UFA</p> <code>expiry</code> <code>object</code> <p>Contract type at time of expiry, e.g., UFA</p> <code>expiration_year</code> <code>integer</code> <p>Year the current contract expires, e.g., 2030</p> <code>years_remaining</code> <code>integer</code> <p>Years remaining on the contract from current year, e.g., 7</p> <code>contract_length</code> <code>integer</code> <p>Length of the contract, e.g., 8</p> <code>contract_extension</code> <code>integer</code> <p>Dummy variable for if the contract was an extension, e.g., 1</p> <code>contract_type</code> <code>object</code> <p>Type of contract, e.g., STANDARD (1-WAY)</p> <code>aav</code> <code>integer</code> <p>Average annual value of contract, e.g., 8500000</p> <code>salary</code> <code>integer</code> <p>Salary value of contract, e.g., 10000000</p> <code>base_salary</code> <code>integer</code> <p>Base salary value of contract, e.g., 10000000</p> <code>cap_hit</code> <code>integer</code> <p>Dollar value hit to salary cap, e.g., 8500000</p> <code>cap_hit_pct</code> <code>float</code> <p>Percentage of salary cap allocated to player, e.g, 10.3%</p> <code>signing_bonus</code> <code>integer</code> <p>Dollar value of signing bonus, e.g., 0</p> <code>performance_bonus</code> <code>integer</code> <p>Dollar value of performance bonus, e.g., 0</p> <code>clause</code> <code>object</code> <p>Type of trade protections player has, e.g., NMC</p> <code>arbitration_required</code> <code>integer</code> <p>Whether salary arbitration is required, e.g., 0</p> <code>arbitration_eligible</code> <code>integer</code> <p>Whether the contract is eligible for arbitration, e.g., 0</p> <code>minors</code> <code>float</code> <p>Salary if player were in the minors, e.g., 10000000</p> <code>slide_candidate</code> <code>integer</code> <p>Whether player is a slide candidate</p> <p>Examples:</p> <p>Scrape all contract information for active players in the current season</p> <pre><code>&gt;&gt;&gt; cf = scrape_capfriendly()\n</code></pre> <p>Returns data for multiple seasons</p> <pre><code>&gt;&gt;&gt; years = list(range(2019, 2023))\n&gt;&gt;&gt; cf = scrape_capfriendly(years)\n</code></pre> Source code in <code>chickenstats/capfriendly/scrape.py</code> <pre><code>def scrape_capfriendly(year=2023):\n    \"\"\"\n    Scrape salary data from Capfriendly for a given year or list-like object of four-digit seasons. Returns a Pandas DataFrame.\n\n    By default, returns data from the 2022-2023 season. Historical data supported. Typically takes 8-12 seconds per season.\n\n    For a glossary of terms, please visit www.capfriendly.com\n\n    Parameters\n    ----------\n    year : str or integer, default = 2023\n        Four-digit year (e.g., 2023), or list-like object consisting of four-digit years (e.g., generator or Pandas Series)\n\n    Returns\n    ----------\n    season: integer\n        8-digit season code, e.g., 20222023\n    player_name: object\n        Player's latin-encoded name, e.g., FILIP FORSBERG\n    player_id: object\n        Identifier that can be used to match with Evolving Hockey data, e.g., FILIP.FORSBERG\n    team: object\n        3-letter team code, e.g., NSH\n    country: object\n        Country with which player is affiliated, e.g., SWEDEN\n    position: object\n        Player's position, e.g., LW\n    birth_date: object\n        Player's birth date, e.g., 1994-08-13\n    birth_year: integer\n        Player's birth year, e.g., 1994\n    age: integer\n        Player's age as of start of the season, e.g., 28\n    age_precise: float\n        Player's age as of the time the data is scraped, e.g., 28.62208\n    handed: object\n        Hand with which the player shoots (skater) or catches (goalie), e.g., RIGHT\n    height_ft: float\n        Player's height in feet, e.g., 6.083333\n    height_cm: integer\n        Player's height in centimeters, e.g., 185\n    weight_lbs: integer\n        Player's weight in pounds, e.g., 205\n    weight_kg: integer\n        Player's weight in kilograms, e.g., 93\n    drafted: object\n        Player's draft information, e.g., 11 - ROUND 1 - 2012 (WSH)\n    draft_year: integer\n        Year player was drafted, e.g., 2012\n    draft_team: object\n        Team that drafted player, e.g., WSH\n    draft_pick: object\n        Pick with which player was drafted, e.g., 11\n    draft_round: object\n        Round in which player was drafted, e.g., ROUND 1\n    signing_date: object\n        Date on which current contract was signed, e.g., 2022-07-09\n    signing_age: integer\n        Age in years at time of signing, e.g., 27\n    signing_age_precise: float\n        Age in years at time of singing, e.g., 27.904748\n    signing: object\n        Contract type at time of signing, e.g., UFA\n    expiry: object\n        Contract type at time of expiry, e.g., UFA\n    expiration_year: integer\n        Year the current contract expires, e.g., 2030\n    years_remaining: integer\n        Years remaining on the contract from current year, e.g., 7\n    contract_length: integer\n        Length of the contract, e.g., 8\n    contract_extension: integer\n        Dummy variable for if the contract was an extension, e.g., 1\n    contract_type: object\n        Type of contract, e.g., STANDARD (1-WAY)\n    aav: integer\n        Average annual value of contract, e.g., 8500000\n    salary: integer\n        Salary value of contract, e.g., 10000000\n    base_salary: integer\n        Base salary value of contract, e.g., 10000000\n    cap_hit: integer\n        Dollar value hit to salary cap, e.g., 8500000\n    cap_hit_pct: float\n        Percentage of salary cap allocated to player, e.g, 10.3%\n    signing_bonus: integer\n        Dollar value of signing bonus, e.g., 0\n    performance_bonus: integer\n        Dollar value of performance bonus, e.g., 0\n    clause: object\n        Type of trade protections player has, e.g., NMC\n    arbitration_required: integer\n        Whether salary arbitration is required, e.g., 0\n    arbitration_eligible: integer\n        Whether the contract is eligible for arbitration, e.g., 0\n    minors: float\n        Salary if player were in the minors, e.g., 10000000\n    slide_candidate: integer\n        Whether player is a slide candidate\n\n    Examples\n    ----------\n\n    Scrape all contract information for active players in the current season\n    &gt;&gt;&gt; cf = scrape_capfriendly()\n\n    Returns data for multiple seasons\n    &gt;&gt;&gt; years = list(range(2019, 2023))\n    &gt;&gt;&gt; cf = scrape_capfriendly(years)\n\n    \"\"\"\n\n    s = s_session()\n\n    concat_list = []\n\n    with s as s:\n        with Progress(\n            TextColumn(\"[progress.description]{task.description}\"),\n            SpinnerColumn(),\n            BarColumn(),\n            TaskProgressColumn(),\n            TextColumn(\"\u2022\"),\n            TimeElapsedColumn(),\n            TextColumn(\"\u2022\"),\n            TimeRemainingColumn(),\n        ) as progress:\n            scrape_year = year + 1\n\n            season = int(f\"{year}{year + 1}\")\n\n            pages = range(1, 51)\n\n            concat_list = list()\n\n            pbar_message = \"Downloading CapFriendly data...\"\n\n            cf_task = progress.add_task(pbar_message, total=len(pages))\n\n            for page in pages:\n                url = f\"https://www.capfriendly.com/browse/active/{scrape_year}\"\n\n                display_param = (\n                    \"birthday,country,weight,height,weightkg,heightcm,draft,slide-candidate,\"\n                    \"waivers-exempt,signing-status,expiry-year,performance-bonus,signing-bonus,caphit-percent,aav,\"\n                    \"length,minors-salary,base-salary,arbitration-eligible,type,signing-age,signing-date,arbitration,extension\"\n                )\n\n                hide_param = \"skater-stats,goalie-stats\"\n\n                payload = {\n                    \"age-calculation-date\": \"october1\",\n                    \"display\": display_param,\n                    \"hide\": hide_param,\n                    \"pg\": str(page),\n                }\n\n                response = s.get(url, params=payload)\n\n                if response.status_code != 200:\n                    pbar_message = (\n                        f\"SCRAPING CAPFRIENDLY DATA FOR THE {year}-{scrape_year} SEASON\"\n                    )\n\n                    progress.update(\n                        cf_task, description=pbar_message, advance=1, refresh=True\n                    )\n\n                    continue\n\n                soup = BeautifulSoup(response.text, \"lxml\")\n\n                response_df = pd.read_html(\n                    io.StringIO(str(soup.find_all(\"table\"))), na_values=\"-\"\n                )[0]\n\n                if response_df.empty:\n                    pbar_message = (\n                        f\"SCRAPING CAPFRIENDLY DATA FOR THE {year}-{scrape_year} SEASON\"\n                    )\n\n                    progress.update(\n                        cf_task, description=pbar_message, advance=1, refresh=True\n                    )\n\n                    continue\n\n                response_df[\"season\"] = season\n\n                concat_list.append(response_df)\n\n                year_df = pd.concat(concat_list, ignore_index=True)\n\n                year_df = munge_cf(year_df, scrape_year=scrape_year)\n\n                pbar_message = (\n                    f\"SCRAPING CAPFRIENDLY DATA FOR THE {year}-{scrape_year} SEASON\"\n                )\n\n                progress.update(\n                    cf_task, description=pbar_message, advance=1, refresh=True\n                )\n\n    return year_df\n</code></pre>"},{"location":"reference/chicken_nhl/chicken_nhl/","title":"chicken_nhl","text":"<p>Landing page</p>"},{"location":"reference/chicken_nhl/scrape/","title":"chicken_nhl.scrape","text":"<p>Reference materials for the <code>chickenstats.chicken_nhl.scrape</code> module.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/chicken_nhl/scrape/#main","title":"main","text":"<p>The below functions are the main scraping functions in <code>chickenstats.chicken_nhl</code>. The vast majority of users should find them sufficient for their NHL data-gathering needs. </p> <p>Game IDs, which are the basis for most functionality, can be found using <code>scrape_schedule()</code>, divisions and conferences can be found using <code>scrape_standings()</code>, while play-by-play data is scraped using <code>scrape_pbp()</code>.</p>"},{"location":"reference/chicken_nhl/scrape/#inputs","title":"inputs","text":"<p>The below functions are mainly used as inputs for the <code>scrape_pbp()</code> function.  The vast majority of users should have no need for these functions as the main data points are included elsewhere.</p> <p>However, if you feel that the primary functions don't suit your needs, these are available for custom analyses. </p>"},{"location":"reference/evolving_hockey/evolving_hockey/","title":"evolving_hockey","text":"<p>Landing page</p>"},{"location":"xg_model/overview/","title":"Coming soon","text":"<p>In production</p>"},{"location":"xg_model/xg_model/","title":"xG Model","text":"<p>xG model landing page</p>"},{"location":"blog/archive/2023/","title":"2023","text":""}]}