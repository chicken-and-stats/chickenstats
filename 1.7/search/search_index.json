{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the technical documentation &amp; reference materials for chickenstats, a Python package for scraping &amp; analyzing sports data. With just a few lines of code:</p> <ul> <li>Scrape &amp; manipulate data from various NHL endpoints, leveraging  chicken_nhl, which includes a proprietary xG model for shot quality metrics</li> <li>Augment play-by-play data &amp; generate custom aggregations from raw csv files downloaded from Evolving-Hockey (subscription required) with  evolving_hockey</li> </ul> <p>Here you can find detailed guides &amp; explanations for most features. The package is under active development - download the latest version (1.7.8) for the most up-to-date features &amp; be sure to consult the correct documentation .</p>"},{"location":"#navigation","title":"Navigation","text":"Tip <p>Navigate the site using the header, side-bar, or search tool. Mobile users can tap  (upper-left) to bring up the menu, then  to see a linked table of contents for the current page, or  to navigate the menu back towards the home page. </p> <ul> <li> <p> Usage &amp; installation</p> <p>Download &amp; install <code>chickenstats</code> with <code>pip</code> to get up &amp; running in just a few minutes.</p> <p> Getting Started</p> </li> <li> <p> Tutorials &amp; examples</p> <p>Discover the package using hands-on tutorials &amp; examples from the User Guide.</p> <p> User Guide</p> </li> <li> <p> Reference materials</p> <p>Consult the Reference section for in-depth explanations  &amp; debugging assistance.</p> <p> Reference</p> </li> <li> <p> xG model</p> <p>Learn about the open-source expected goals (xG) model included with <code>chickenstats</code>.</p> <p> xG model</p> </li> <li> <p> Blog</p> <p>Read the latest analyses leveraging the library, as well as about the newest features &amp; releases</p> <p> Blog</p> </li> <li> <p> Contribute</p> <p>Read about known issues, future development roadmap, and/or how to contribute. </p> <p> Contribute</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p><code>chickenstats</code> is open-source because open-source is cool.</p> <p>The library is composed of two modules, each for a different data source.</p> <code>chicken_nhl</code> <code>evolving_hockey</code> <p><code>chickenstats.chicken_nhl</code> provides tools to scrape data from official NHL sources(1) &amp; construct a play-by-play dataframe with 70+ potential fields(2) for each event.(3) Each game is scraped in approximately 3-4 seconds, with minimal performance degradation after scraping hundreds or thousands of games.(4) All underlying data is stored after retrieval and processing.(5)</p> <ol> <li>Sources include (non-exhaustive):  HTML shifts,  events, &amp;  rosters, as well as  events,  rosters, &amp;  game information from the NHL's API endpoints.</li> <li>Fields include (non-exhaustive) primary player idenfitication &amp; information (e.g., position), various game state characteristics (e.g., strength-state, score-state, score differential), Cartesian event coordinates, shot type (e.g., wrist, slap, deflection), distance &amp; angle from net,  &amp; on-ice teammate &amp; opponent identification &amp; information.</li> <li>Supported events include:  goals (including assists),  shots on net,  missed shots,  blocked shots,  faceoffs,  penalties &amp; delayed penalties,  giveaways, &amp;  takeaways.</li> <li>This can be improved (and will be as the library is refactored). However, the library was designed with known negative impacts (e.g., Pydantic-based data validation).</li> <li>For example, HTML &amp; API events data, key inputs for the play-by-play DataFrame, are retained after scraping play-by-play data. This reduces the burden on public endpoints &amp; improves debugging.</li> </ol> Data are supported from 2010-11 to present <p>With some exceptions for individual games, the <code>Game</code> &amp; <code>Scraper</code> objects  will return data for games occurring since the start of the 2010-2011 season. However, the <code>Season</code> object (including the <code>schedule()</code> &amp; <code>standings()</code> methods) will return data extending to the NHL's founding in 1917.</p> <p>The module includes three classes for accessing data. First, import the relevant classes</p> <pre><code>from chickenstats.chicken_nhl import Scraper, Season, Game\n</code></pre> <code>Scraper</code><code>Game</code><code>Season</code> <p>Scrapes individual &amp; multiple games. It takes a single game ID or a list-like object of game IDs &amp; scrapes publicly-accessible, official NHL endpoints and returns a Pandas DataFrame.</p> <p>Data include (non-exhaustive):  HTML shifts,  events, &amp;  rosters, as well as  events,  rosters, &amp;  game information from the NHL's API endpoints.</p> Example <p>Scrape play-by-play data for the first ten games of the current (2023-24) regular season</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\npbp = scraper.play_by_play\n</code></pre> <p>Scrape roster data for the first ten games of the current (2023-24) regular season</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\nrosters = scraper.rosters\n</code></pre> <p>Scrapes data for a single game. A series of <code>Game</code> objects functions as the backbone of any <code>Scraper</code> object.</p> Example <p>The <code>Game</code> object functions similarly to the <code>Scraper</code> object, with the major exception that data are returned as a list by default.</p> <p>To return a list of play-by-play events</p> <pre><code>game_id = 2023020001\ngame = Game(game_id)\npbp = game.play_by_play\n</code></pre> <p>To return the equivalent Pandas DataFrame, simply append \"_df\" to the property</p> <pre><code>game_id = 2023020001\ngame = Game(game_id)\npbp = game.play_by_play_df\n</code></pre> <p>A <code>Scraper</code> can access data for both individual and multiple games, so I would recommend sticking around there. </p> Contribute <p>That said, if you'd like to contribute, the <code>Game</code> object provides non-public methods to access data at intermediate processing stages. The below returns a list of raw HTML events, prior to any processing.</p> <p><pre><code>from chickenstats.chicken_nhl import Game\n\ngame_id = 2023020001\ngame = Game(game_id)\nhtml_events = game._scrape_html_events()\n</code></pre> For more information &amp; direction, see  Contribute</p> <p>Scrapes schedule and standings information for a given season.</p> Example <p>Scrape schedule data for every team for the current (2023-24) season</p> <pre><code>season = Season(2023)\nschedule = season.schedule()\n</code></pre> <p>For a specific team, just provide the three-letter abbreviation</p> <pre><code>season = Season(2023)\nschedule = season.schedule('NSH')\n</code></pre> <p>To get the latest standings for that season</p> <pre><code>season = Season(2023)\nstandings = season.standings\n</code></pre> <p><code>chickenstats.evolving_hockey</code> provides tools to munge data from official evolving-hockey.com.(1) The module's functions combine raw play-by-play and shift csv files available from the queries section of the site, then  aggregate the data.(2) The resulting aggregations have additional fields(3) that are not currently available.</p> <ol> <li>Subscription (and I cannot emphasize this enough) required.</li> <li>Aggregations include line and team level, as well as groupings by score state, teammates, and opposition.</li> <li>Additional fields include:  high-danger events,  score- and venue-adjusted events, using evolving-hockey's methodology and figures  forwards and defensemen on-ice.</li> </ol> <p>The module includes four functions for accessing data. First, import the relevant functions</p> <pre><code>from chickenstats.evolving_hockey import prep_pbp, prep_stats, prep_lines, prep_team\n</code></pre> <code>prep_pbp()</code><code>prep_stats()</code><code>prep_lines()</code><code>prep_team()</code> <p>Combines the raw play-by-play and shifts CSV files into a Pandas DataFrame with additional fields for analysis and aggregation.</p> Example <p>Combine CSV files into Pandas DataFrame</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Aggregates an individual player's stats and on-ice stats. Can be grouped by teammates and opposition.</p> Example <p>First, have a cleaned play-by-play DataFrame handy</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats, with no teammates or opposition</p> <pre><code>stats = prep_stats(pbp)\n</code></pre> <p>Period-level stats, grouped by teammates</p> <pre><code>stats = prep_stats(pbp, level = 'period', teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>stats = prep_stats(pbp, level='session', teammates=True, opposition=True)\n</code></pre> <p>Aggregates forward or defensive line statistics, with options to group by teammates, opposition, score state, and strength state</p> Example <p>First, have a cleaned play-by-play DataFrame handy</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for forwards, with no teammates or opposition</p> <pre><code>lines = prep_lines(pbp, position='f')\n</code></pre> <p>Period-level stats for defense, grouped by teammates</p> <pre><code>lines = prep_lines(pbp, position='d', level='period', teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>lines = prep_lines(pbp, position='f', level='session', teammates=True, opposition=True)\n</code></pre> <p>Aggregates team statistics, can be grouped by score state.</p> Example <p>First, have a cleaned play-by-play DataFrame handy</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for teams</p> <pre><code>team = prep_team(pbp)\n</code></pre> <p>Period-level team stats, grouped by score state</p> <pre><code>team = prep_team(pbp, level='period', score=True)\n</code></pre> <p>For more detailed tutorials &amp; examples or in-depth reference materials, consult  User Guide or  Reference</p>"},{"location":"#help","title":"Help","text":"<p>How to get help  Help</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p><code>chickenstats</code> would not be possible without the efforts of countless other individuals.</p>"},{"location":"blog/","title":"Blog","text":"<p>Landing page, blog coming soon</p>"},{"location":"blog/author/chicken/","title":"Chicken","text":"<p>Test landing page for chicken</p>"},{"location":"blog/category/hockey/","title":"Hockey","text":"<p>Test landing page for hockey</p>"},{"location":"blog/2023/12/hello-world/","title":"First post!","text":"","tags":["Nashville Predators","Hockey","2023"]},{"location":"blog/2023/12/hello-world/#intro","title":"Intro","text":"<p>This is my first blog post on a website documenting a Python scraper that I built!</p> <p>More text here</p>","tags":["Nashville Predators","Hockey","2023"]},{"location":"blog/2023/12/hello-world/#other-section","title":"Other section","text":"","tags":["Nashville Predators","Hockey","2023"]},{"location":"contribute/contribute/","title":"Contribute","text":"<p>Contributing to future <code>chickenstats</code> development. </p> <p>For contributing to the xG model, or for questions about the underlying research &amp; data, please see  xG Model.</p> <ul> <li> <p> Known Issues</p> <p>See known bugs &amp; issues before reporting any new ones.</p> <p> Read more</p> </li> <li> <p> Roadmap</p> <p>See more information about plans for the future development of <code>chickenstats</code></p> <p> Read more</p> </li> <li> <p> Under the hood</p> <p>See non-public methods and properties for <code>chickenstats.chicken_nhl</code></p> <p> Read more</p> </li> </ul>"},{"location":"contribute/known_issues/","title":"Known Issues","text":"<p>In production</p>"},{"location":"contribute/nonpublic/","title":"chicken_nhl.scrape","text":"<p>Reference materials for <code>chickenstats.chicken_nhl.scrape</code>. <code>Scraper</code>, <code>Season</code>, and <code>Game</code>  account for most of the functionality for <code>chickenstats.chicken_nhl</code>.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Scraper","title":"Scraper","text":"<p>Class instance for scraping play-by-play and other data for NHL games.</p> <p>Parameters:</p> Name Type Description Default <code>game_ids</code> <code>list[str | float | int] | Series | str | float | int</code> <p>List of 10-digit game identifier, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> required <p>Attributes:</p> Name Type Description <code>game_ids</code> <code>list</code> <p>Game IDs that the Scraper will access, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = scraper.play_by_play\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = scraper.shifts\n&gt;&gt;&gt; rosters = scraper.rosters\n&gt;&gt;&gt; changes = scraper.changes\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = scraper.api_events\n&gt;&gt;&gt; api_rosters = scraper.api_rosters\n&gt;&gt;&gt; html_events = scraper.html_events\n&gt;&gt;&gt; html_rosters = scraper.html_rosters\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Scraper:\n    \"\"\"\n    Class instance for scraping play-by-play and other data for NHL games.\n\n    Parameters:\n        game_ids (list[str | float | int] | pd.Series | str | float | int):\n            List of 10-digit game identifier, e.g., `[2023020001, 2023020002, 2023020003]`\n\n    Attributes:\n        game_ids (list):\n            Game IDs that the Scraper will access, e.g., `[2023020001, 2023020002, 2023020003]`\n\n\n    Examples:\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = scraper.play_by_play\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = scraper.shifts\n        &gt;&gt;&gt; rosters = scraper.rosters\n        &gt;&gt;&gt; changes = scraper.changes\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = scraper.api_events\n        &gt;&gt;&gt; api_rosters = scraper.api_rosters\n        &gt;&gt;&gt; html_events = scraper.html_events\n        &gt;&gt;&gt; html_rosters = scraper.html_rosters\n\n    \"\"\"\n\n    def __init__(self, game_ids: list[str | float | int] | pd.Series | str | float | int):\n        game_ids = convert_to_list(game_ids, \"game ID\")\n\n        self.game_ids = game_ids\n        self._scraped_games = []\n        self._bad_games = []\n\n        self._requests_session = s_session()\n\n        self._api_events = []\n        self._scraped_api_events = []\n\n        self._api_rosters = []\n        self._scraped_api_rosters = []\n\n        self._changes = []\n        self._scraped_changes = []\n\n        self._html_events = []\n        self._scraped_html_events = []\n\n        self._html_rosters = []\n        self._scraped_html_rosters = []\n\n        self._rosters = []\n        self._scraped_rosters = []\n\n        self._shifts = []\n        self._scraped_shifts = []\n\n        self._play_by_play = []\n        self._scraped_play_by_play = []\n\n    def _scrape(self, scrape_type: str) -&gt; None:\n        scrape_types = [\n            \"api_events\",\n            \"api_rosters\",\n            \"changes\",\n            \"html_events\",\n            \"html_rosters\",\n            \"play_by_play\",\n            \"shifts\",\n            \"rosters\",\n        ]\n\n        pbar_stubs = {\n            \"api_events\": \"API events\",\n            \"api_rosters\": \"API rosters\",\n            \"changes\": \"changes\",\n            \"html_events\": \"HTML events\",\n            \"html_rosters\": \"HTML rosters\",\n            \"play_by_play\": \"play-by-play data\",\n            \"shifts\": \"shifts\",\n            \"rosters\": \"rosters\",\n        }\n\n        if scrape_type not in scrape_types:\n            raise Exception(\"Scrape type is not supported\")\n\n        if scrape_type == \"api_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_events]\n\n        if scrape_type == \"api_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_rosters]\n\n        if scrape_type == \"changes\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_changes]\n\n        if scrape_type == \"html_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_events]\n\n        if scrape_type == \"html_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_rosters]\n\n        if scrape_type == \"play_by_play\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_play_by_play]\n\n        if scrape_type == \"shifts\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        if scrape_type == \"rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        with self._requests_session as s:\n            with Progress(\n                TextColumn(\"[progress.description]{task.description}\"),\n                SpinnerColumn(),\n                BarColumn(),\n                TaskProgressColumn(),\n                TextColumn(\"\u2022\"),\n                TimeElapsedColumn(),\n                TextColumn(\"\u2022\"),\n                TimeRemainingColumn(),\n                TextColumn(\"\u2022\"),\n                MofNCompleteColumn(),\n                TextColumn(\"\u2022\"),\n                ScrapeSpeedColumn(),\n            ) as progress:\n                pbar_stub = pbar_stubs[scrape_type]\n\n                pbar_message = f\"Downloading {pbar_stub} for {game_ids[0]}...\"\n\n                game_task = progress.add_task(pbar_message, total=len(game_ids))\n\n                for idx, game_id in enumerate(game_ids):\n                    game = Game(game_id, s)\n\n                    if scrape_type == \"api_events\":\n                        if game_id in self._scraped_api_events:\n                            continue\n\n                        if game_id in self._scraped_api_rosters:\n                            game._api_rosters = [\n                                x for x in self._api_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_api_events:\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                        if game_id not in self._scraped_api_rosters:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"api_rosters\":\n                        if game_id in self._scraped_api_rosters:\n                            continue\n\n                        if game_id not in self._scraped_api_rosters:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"changes\":\n                        if game_id in self._scraped_changes:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id in self._scraped_shifts:\n                            game._shifts = [\n                                x for x in self._shifts if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_changes:\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        if game_id not in self._scraped_shifts:\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                    if scrape_type == \"html_events\":\n                        if game_id in self._scraped_html_events:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_html_events:\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if scrape_type == \"html_rosters\":\n                        if game_id in self._scraped_html_rosters:\n                            continue\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if scrape_type == \"play_by_play\":\n                        if game_id in self._scraped_play_by_play:\n                            continue\n\n                        if game_id in self._scraped_rosters:\n                            game._rosters = [\n                                x for x in self._rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            if game_id in self._scraped_html_rosters:\n                                game._html_rosters = [\n                                    x\n                                    for x in self._html_rosters\n                                    if x[\"game_id\"] == game_id\n                                ]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:\n                                game._api_rosters = [\n                                    x\n                                    for x in self._api_rosters\n                                    if x[\"game_id\"] == game_id\n                                ]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        if game_id in self._scraped_changes:\n                            game._changes = [\n                                x for x in self._changes if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            if game_id in self._scraped_shifts:\n                                game._shifts = [\n                                    x for x in self._shifts if x[\"game_id\"] == game_id\n                                ]\n\n                            else:\n                                self._shifts.extend(game.shifts)\n                                self._scraped_shifts.append(game_id)\n\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                        if game_id in self._scraped_html_events:\n                            game._html_events = [\n                                x for x in self._html_events if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                        if game_id in self._scraped_api_events:\n                            game._api_events = [\n                                x for x in self._api_events if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                        if game_id not in self._scraped_play_by_play:\n                            self._play_by_play.extend(game.play_by_play)\n                            self._scraped_play_by_play.append(game_id)\n\n                    if scrape_type == \"rosters\":\n                        if game_id in self._scraped_rosters:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id in self._scraped_api_rosters:\n                            game._api_rosters = [\n                                x for x in self._api_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_rosters:\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        if game_id not in self._scraped_api_rosters:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"shifts\":\n                        if game_id in self._scraped_shifts:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_shifts:\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if game_id != self.game_ids[-1]:\n                        pbar_message = (\n                            f\"Downloading {pbar_stub} for {self.game_ids[idx + 1]}...\"\n                        )\n\n                    else:\n                        pbar_message = f\"Finished downloading {pbar_stub}\"\n\n                    progress.update(\n                        game_task, description=pbar_message, advance=1, refresh=True\n                    )\n\n    def add_games(self, game_ids: list[int | str | float] | int) -&gt; None:\n        \"\"\"Method to add games to the Scraper\n\n        Parameters:\n            game_ids (list or int or float or str):\n                List-like object of or single 10-digit game identifier, e.g., 2023020001\n\n        Examples:\n            Instantiate Scraper\n            &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n            &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n            Scrape something\n            &gt;&gt;&gt; scraper.play_by_play\n\n            Add games\n            &gt;&gt;&gt; scraper.add_games(2023020011)\n\n            Scrape some more\n            &gt;&gt;&gt; scraper.play_by_play\n\n\n        \"\"\"\n        if isinstance(game_ids, str) or isinstance(game_ids, int):\n            game_ids = [game_ids]\n\n        game_ids = [int(x) for x in game_ids if x not in self.game_ids]\n\n        self.game_ids.extend(game_ids)\n\n    @property\n    def api_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas DataFrame of events scraped from API endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_events\n\n        \"\"\"\n\n        if not self._api_events:\n            self._scrape(\"api_events\")\n\n        return pd.DataFrame(self._api_events).fillna(np.nan)\n\n    @property\n    def api_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_rosters\n        \"\"\"\n        if not self._api_rosters:\n            self._scrape(\"api_rosters\")\n\n        return pd.DataFrame(self._api_rosters).fillna(np.nan)\n\n    @property\n    def changes(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.changes\n        \"\"\"\n        if not self._changes:\n            self._scrape(\"changes\")\n\n        return pd.DataFrame(self._changes).fillna(np.nan)\n\n    @property\n    def html_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_events\n\n        \"\"\"\n        if not self._html_events:\n            self._scrape(\"html_events\")\n\n        return pd.DataFrame(self._html_events).fillna(np.nan)\n\n    @property\n    def html_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_rosters\n\n        \"\"\"\n        if not self._html_rosters:\n            self._scrape(\"html_rosters\")\n\n        return pd.DataFrame(self._html_rosters).fillna(np.nan)\n\n    @property\n    def play_by_play(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.play_by_play\n\n        \"\"\"\n        if self.game_ids != self._scraped_play_by_play:\n            self._scrape(\"play_by_play\")\n\n        return pd.DataFrame(self._play_by_play).fillna(np.nan)\n\n    @property\n    def rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API &amp; HTML endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.rosters\n\n        \"\"\"\n        if not self._rosters:\n            self._scrape(\"rosters\")\n\n        return pd.DataFrame(self._rosters).fillna(np.nan)\n\n    @property\n    def shifts(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.shifts\n\n        \"\"\"\n        if not self._shifts:\n            self._scrape(\"shifts\")\n\n        return pd.DataFrame(self._shifts).fillna(np.nan)\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Scraper._scrape","title":"_scrape","text":"<pre><code>_scrape(scrape_type)\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape(self, scrape_type: str) -&gt; None:\n    scrape_types = [\n        \"api_events\",\n        \"api_rosters\",\n        \"changes\",\n        \"html_events\",\n        \"html_rosters\",\n        \"play_by_play\",\n        \"shifts\",\n        \"rosters\",\n    ]\n\n    pbar_stubs = {\n        \"api_events\": \"API events\",\n        \"api_rosters\": \"API rosters\",\n        \"changes\": \"changes\",\n        \"html_events\": \"HTML events\",\n        \"html_rosters\": \"HTML rosters\",\n        \"play_by_play\": \"play-by-play data\",\n        \"shifts\": \"shifts\",\n        \"rosters\": \"rosters\",\n    }\n\n    if scrape_type not in scrape_types:\n        raise Exception(\"Scrape type is not supported\")\n\n    if scrape_type == \"api_events\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_api_events]\n\n    if scrape_type == \"api_rosters\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_api_rosters]\n\n    if scrape_type == \"changes\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_changes]\n\n    if scrape_type == \"html_events\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_html_events]\n\n    if scrape_type == \"html_rosters\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_html_rosters]\n\n    if scrape_type == \"play_by_play\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_play_by_play]\n\n    if scrape_type == \"shifts\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n    if scrape_type == \"rosters\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n    with self._requests_session as s:\n        with Progress(\n            TextColumn(\"[progress.description]{task.description}\"),\n            SpinnerColumn(),\n            BarColumn(),\n            TaskProgressColumn(),\n            TextColumn(\"\u2022\"),\n            TimeElapsedColumn(),\n            TextColumn(\"\u2022\"),\n            TimeRemainingColumn(),\n            TextColumn(\"\u2022\"),\n            MofNCompleteColumn(),\n            TextColumn(\"\u2022\"),\n            ScrapeSpeedColumn(),\n        ) as progress:\n            pbar_stub = pbar_stubs[scrape_type]\n\n            pbar_message = f\"Downloading {pbar_stub} for {game_ids[0]}...\"\n\n            game_task = progress.add_task(pbar_message, total=len(game_ids))\n\n            for idx, game_id in enumerate(game_ids):\n                game = Game(game_id, s)\n\n                if scrape_type == \"api_events\":\n                    if game_id in self._scraped_api_events:\n                        continue\n\n                    if game_id in self._scraped_api_rosters:\n                        game._api_rosters = [\n                            x for x in self._api_rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id not in self._scraped_api_events:\n                        self._api_events.extend(game.api_events)\n                        self._scraped_api_events.append(game_id)\n\n                    if game_id not in self._scraped_api_rosters:\n                        self._api_rosters.extend(game.api_rosters)\n                        self._scraped_api_rosters.append(game_id)\n\n                if scrape_type == \"api_rosters\":\n                    if game_id in self._scraped_api_rosters:\n                        continue\n\n                    if game_id not in self._scraped_api_rosters:\n                        self._api_rosters.extend(game.api_rosters)\n                        self._scraped_api_rosters.append(game_id)\n\n                if scrape_type == \"changes\":\n                    if game_id in self._scraped_changes:\n                        continue\n\n                    if game_id in self._scraped_html_rosters:\n                        game._html_rosters = [\n                            x for x in self._html_rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id in self._scraped_shifts:\n                        game._shifts = [\n                            x for x in self._shifts if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id not in self._scraped_changes:\n                        self._changes.extend(game.changes)\n                        self._scraped_changes.append(game_id)\n\n                    if game_id not in self._scraped_html_rosters:\n                        self._html_rosters.extend(game.html_rosters)\n                        self._scraped_html_rosters.append(game_id)\n\n                    if game_id not in self._scraped_shifts:\n                        self._shifts.extend(game.shifts)\n                        self._scraped_shifts.append(game_id)\n\n                if scrape_type == \"html_events\":\n                    if game_id in self._scraped_html_events:\n                        continue\n\n                    if game_id in self._scraped_html_rosters:\n                        game._html_rosters = [\n                            x for x in self._html_rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id not in self._scraped_html_events:\n                        self._html_events.extend(game.html_events)\n                        self._scraped_html_events.append(game_id)\n\n                    if game_id not in self._scraped_html_rosters:\n                        self._html_rosters.extend(game.html_rosters)\n                        self._scraped_html_rosters.append(game_id)\n\n                if scrape_type == \"html_rosters\":\n                    if game_id in self._scraped_html_rosters:\n                        continue\n\n                    if game_id not in self._scraped_html_rosters:\n                        self._html_rosters.extend(game.html_rosters)\n                        self._scraped_html_rosters.append(game_id)\n\n                if scrape_type == \"play_by_play\":\n                    if game_id in self._scraped_play_by_play:\n                        continue\n\n                    if game_id in self._scraped_rosters:\n                        game._rosters = [\n                            x for x in self._rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    else:\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x\n                                for x in self._html_rosters\n                                if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        if game_id in self._scraped_api_rosters:\n                            game._api_rosters = [\n                                x\n                                for x in self._api_rosters\n                                if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                        self._rosters.extend(game.rosters)\n                        self._scraped_rosters.append(game_id)\n\n                    if game_id in self._scraped_changes:\n                        game._changes = [\n                            x for x in self._changes if x[\"game_id\"] == game_id\n                        ]\n\n                    else:\n                        if game_id in self._scraped_shifts:\n                            game._shifts = [\n                                x for x in self._shifts if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                        self._changes.extend(game.changes)\n                        self._scraped_changes.append(game_id)\n\n                    if game_id in self._scraped_html_events:\n                        game._html_events = [\n                            x for x in self._html_events if x[\"game_id\"] == game_id\n                        ]\n\n                    else:\n                        self._html_events.extend(game.html_events)\n                        self._scraped_html_events.append(game_id)\n\n                    if game_id in self._scraped_api_events:\n                        game._api_events = [\n                            x for x in self._api_events if x[\"game_id\"] == game_id\n                        ]\n\n                    else:\n                        self._api_events.extend(game.api_events)\n                        self._scraped_api_events.append(game_id)\n\n                    if game_id not in self._scraped_play_by_play:\n                        self._play_by_play.extend(game.play_by_play)\n                        self._scraped_play_by_play.append(game_id)\n\n                if scrape_type == \"rosters\":\n                    if game_id in self._scraped_rosters:\n                        continue\n\n                    if game_id in self._scraped_html_rosters:\n                        game._html_rosters = [\n                            x for x in self._html_rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id in self._scraped_api_rosters:\n                        game._api_rosters = [\n                            x for x in self._api_rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id not in self._scraped_rosters:\n                        self._rosters.extend(game.rosters)\n                        self._scraped_rosters.append(game_id)\n\n                    if game_id not in self._scraped_html_rosters:\n                        self._html_rosters.extend(game.html_rosters)\n                        self._scraped_html_rosters.append(game_id)\n\n                    if game_id not in self._scraped_api_rosters:\n                        self._api_rosters.extend(game.api_rosters)\n                        self._scraped_api_rosters.append(game_id)\n\n                if scrape_type == \"shifts\":\n                    if game_id in self._scraped_shifts:\n                        continue\n\n                    if game_id in self._scraped_html_rosters:\n                        game._html_rosters = [\n                            x for x in self._html_rosters if x[\"game_id\"] == game_id\n                        ]\n\n                    if game_id not in self._scraped_shifts:\n                        self._shifts.extend(game.shifts)\n                        self._scraped_shifts.append(game_id)\n\n                    if game_id not in self._scraped_html_rosters:\n                        self._html_rosters.extend(game.html_rosters)\n                        self._scraped_html_rosters.append(game_id)\n\n                if game_id != self.game_ids[-1]:\n                    pbar_message = (\n                        f\"Downloading {pbar_stub} for {self.game_ids[idx + 1]}...\"\n                    )\n\n                else:\n                    pbar_message = f\"Finished downloading {pbar_stub}\"\n\n                progress.update(\n                    game_task, description=pbar_message, advance=1, refresh=True\n                )\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game","title":"Game","text":"<p>Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>int or float or str</code> <p>10-digit game identifier, e.g., 2023020001</p> required <code>requests_session</code> <code>Session</code> <p>If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2019020684</p> <code>game_state</code> <code>str</code> <p>Whether game is scheduled, started, finished, or official, e.g., OFF</p> <code>game_schedule_state</code> <code>str</code> <p>Whether the game has been scheduled, e.g., OK</p> <code>current_period</code> <code>int</code> <p>Current period, or if game has finished, then latest period, e.g., 3</p> <code>current_period_type</code> <code>str</code> <p>Whether period is regular or overtime, e.g., REG</p> <code>time_remaining</code> <code>str</code> <p>Amount of time remaining in the game, e.g., '00:00'</p> <code>seconds_remaining</code> <code>int</code> <p>Amounting of time remaining in the game in seconds, e.g., 0</p> <code>running</code> <code>bool</code> <p>Whether the game is currently running, e.g., False</p> <code>in_intermission</code> <code>bool</code> <p>Whether the game is currently in intermission, e.g., False</p> <code>season</code> <code>int</code> <p>Season in which the game was played, e.g., 20192020</p> <code>session</code> <code>str</code> <p>Whether the game is regular season, playoffs, or pre-season, e.g., R</p> <code>html_id</code> <code>str</code> <p>Game ID used for scraping HTML endpoints, e.g., 020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>start_time_et</code> <code>str</code> <p>Start time in Eastern timezone, regardless of venue, e.g., 20:30</p> <code>venue</code> <code>str</code> <p>Venue name, e.g., UNITED CENTER</p> <code>tv_broadcasts</code> <code>dict</code> <p>TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}</p> <code>home_team</code> <code>dict</code> <p>Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}</p> <code>away_team</code> <code>dict</code> <p>Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}</p> <code>api_endpoint</code> <code>str</code> <p>URL for accessing play-by-play and API rosters, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'</p> <code>api_endpoint_other</code> <code>str</code> <p>URL for accessing other game information, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'</p> <code>html_rosters_endpoint</code> <code>str</code> <p>URL for accessing rosters from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'</p> <code>home_shifts_endpoint</code> <code>str</code> <p>URL for accessing home shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'</p> <code>away_shifts_endpoint</code> <code>str</code> <p>URL for accessing away shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'</p> <code>html_events_endpoint</code> <code>str</code> <p>URL for accessing events from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = game.play_by_play # Returns the data as a list\n</code></pre> <p>Get play-by-play as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; pbp_df = game.play_by_play_df   # Returns the data as a Pandas DataFrame\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = game.shifts    # Returns a list of shifts\n&gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n&gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n</code></pre> <p>Data can also be returned as a Pandas DataFrame, rather than a list</p> <pre><code>&gt;&gt;&gt; shifts_df = game.shifts_df # Same as above, but as Pandas DataFrame\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = game.api_events\n&gt;&gt;&gt; api_rosters = game.api_rosters\n&gt;&gt;&gt; html_events = game.html_events\n&gt;&gt;&gt; html_rosters = game.html_rosters\n</code></pre> <p>The Game object is fairly rich with information</p> <pre><code>&gt;&gt;&gt; game_date = game.game_date\n&gt;&gt;&gt; home_team = game.home_team\n&gt;&gt;&gt; game_state = game.game_state\n&gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Game:\n    \"\"\"\n    Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.\n\n    Parameters:\n        game_id (int or float or str):\n            10-digit game identifier, e.g., 2023020001\n        requests_session (requests.Session, optional):\n            If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints\n\n    Attributes:\n        game_id (int):\n            10-digit game identifier, e.g., 2019020684\n        game_state (str):\n            Whether game is scheduled, started, finished, or official, e.g., OFF\n        game_schedule_state (str):\n            Whether the game has been scheduled, e.g., OK\n        current_period (int):\n            Current period, or if game has finished, then latest period, e.g., 3\n        current_period_type (str):\n            Whether period is regular or overtime, e.g., REG\n        time_remaining (str):\n            Amount of time remaining in the game, e.g., '00:00'\n        seconds_remaining (int):\n            Amounting of time remaining in the game in seconds, e.g., 0\n        running (bool):\n            Whether the game is currently running, e.g., False\n        in_intermission (bool):\n            Whether the game is currently in intermission, e.g., False\n        season (int):\n            Season in which the game was played, e.g., 20192020\n        session (str):\n            Whether the game is regular season, playoffs, or pre-season, e.g., R\n        html_id (str):\n            Game ID used for scraping HTML endpoints, e.g., 020684\n        game_date (str):\n            Date game was played, e.g., 2020-01-09\n        start_time_et (str):\n            Start time in Eastern timezone, regardless of venue, e.g., 20:30\n        venue (str):\n            Venue name, e.g., UNITED CENTER\n        tv_broadcasts (dict):\n            TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}\n        home_team (dict):\n            Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}\n        away_team (dict):\n            Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}\n        api_endpoint (str):\n            URL for accessing play-by-play and API rosters, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'\n        api_endpoint_other (str):\n            URL for accessing other game information, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'\n        html_rosters_endpoint (str):\n            URL for accessing rosters from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'\n        home_shifts_endpoint (str):\n            URL for accessing home shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'\n        away_shifts_endpoint (str):\n            URL for accessing away shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'\n        html_events_endpoint (str):\n            URL for accessing events from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'\n\n    Note:\n        You can return any of the properties as a Pandas DataFrame by appending '_df' to the property\n\n    Examples:\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = game.play_by_play # Returns the data as a list\n\n        Get play-by-play as a Pandas DataFrame\n        &gt;&gt;&gt; pbp_df = game.play_by_play_df   # Returns the data as a Pandas DataFrame\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = game.shifts    # Returns a list of shifts\n        &gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n        &gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n\n        Data can also be returned as a Pandas DataFrame, rather than a list\n        &gt;&gt;&gt; shifts_df = game.shifts_df # Same as above, but as Pandas DataFrame\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = game.api_events\n        &gt;&gt;&gt; api_rosters = game.api_rosters\n        &gt;&gt;&gt; html_events = game.html_events\n        &gt;&gt;&gt; html_rosters = game.html_rosters\n\n        The Game object is fairly rich with information\n        &gt;&gt;&gt; game_date = game.game_date\n        &gt;&gt;&gt; home_team = game.home_team\n        &gt;&gt;&gt; game_state = game.game_state\n        &gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n\n    \"\"\"\n\n    def __init__(\n        self,\n        game_id: str | int | float,\n        requests_session: requests.Session | None = None,\n    ):\n        if str(game_id).isdigit() is False or len(str(game_id)) != 10:\n            raise Exception(f\"{game_id} IS NOT A VALID GAME ID\")\n\n        # Game ID\n        self.game_id: int = int(game_id)\n\n        # season\n        year = int(str(self.game_id)[0:4])\n        self.season: int = int(f\"{year}{year + 1}\")\n\n        # game session\n        game_sessions = {\"O1\": \"PR\", \"02\": \"R\", \"03\": \"P\"}\n        game_session = str(self.game_id)[4:6]\n        self.session: str = game_sessions[game_session]\n\n        # HTML game ID\n        self.html_id: str = str(game_id)[4:]\n\n        # Live endpoint for many things\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/play-by-play\"\n        self.api_endpoint: str = url\n\n        # Alternative live endpoint\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/landing\"\n        self.api_endpoint_other = url\n\n        # HTML rosters endpoint\n        url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/RO{self.html_id}.HTM\"\n        )\n        self.html_rosters_endpoint: str = url\n\n        # shifts endpoints\n        home_url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/TH{self.html_id}.HTM\"\n        )\n        self.home_shifts_endpoint: str = home_url\n\n        away_url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/TV{self.html_id}.HTM\"\n        )\n        self.away_shifts_endpoint: str = away_url\n\n        # HTML events endpoint\n        url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/PL{self.html_id}.HTM\"\n        )\n        self.html_events_endpoint: str = url\n\n        # requests session\n        if requests_session is None:\n            self._requests_session = s_session()\n        else:\n            self._requests_session = requests_session\n\n        # Downloading information from NHL api\n        response: dict = self._requests_session.get(self.api_endpoint).json()\n        self.api_response: dict = response\n\n        # Away team information\n        away_team = response[\"awayTeam\"]\n\n        if away_team[\"abbrev\"] == \"PHX\":\n            away_team[\"abbrev\"] = \"ARI\"\n\n        self.away_team = {\n            \"id\": away_team[\"id\"],\n            \"name\": away_team[\"name\"][\"default\"].upper(),\n            \"abbrev\": away_team[\"abbrev\"],\n            \"logo\": away_team[\"logo\"],\n        }\n\n        # Home team information\n        home_team = response[\"homeTeam\"]\n\n        if home_team[\"abbrev\"] == \"PHX\":\n            home_team[\"abbrev\"] = \"ARI\"\n\n        self.home_team = {\n            \"id\": home_team[\"id\"],\n            \"name\": home_team[\"name\"][\"default\"].upper(),\n            \"abbrev\": home_team[\"abbrev\"],\n            \"logo\": home_team[\"logo\"],\n        }\n\n        # Venue information\n        self.venue: str = response[\"venue\"][\"default\"].upper()\n\n        est = pytz.timezone(\"US/Eastern\")\n\n        if \"Z\" in response[\"startTimeUTC\"]:\n            response[\"startTimeUTC\"] = response[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n        self._start_time_utc_dt: dt = dt.fromisoformat(\n            response[\"startTimeUTC\"]\n        ).astimezone(timezone.utc)\n        self._start_time_et_dt: dt = self._start_time_utc_dt.astimezone(est)\n\n        # Game date and start time as strings\n        self.game_date = self._start_time_et_dt.strftime(\"%Y-%m-%d\")\n        self.start_time_et = self._start_time_et_dt.strftime(\n            \"%H:%M\"\n        )  # Consider start time local?\n\n        # Broadcast information\n        broadcasts = {\n            x[\"id\"]: {k: v for k, v in x.items() if k != \"id\"}\n            for x in response[\"tvBroadcasts\"]\n        }\n        self.tv_broadcasts = broadcasts\n\n        # Game status\n        self.game_state = response[\"gameState\"]\n\n        # Whether game is finalized in the schedule or not\n        self.game_schedule_state = response[\"gameScheduleState\"]\n\n        # Clock information\n        clock = response[\"clock\"]\n\n        self.time_remaining = clock.get(\"timeRemaining\")\n        self.seconds_remaining = clock.get(\"secondsRemaining\")\n        self.running = clock[\"running\"]\n        self.in_intermission = clock[\"inIntermission\"]\n\n        # Period information\n        if response[\"gameState\"] != \"FUT\":\n            self.current_period = response[\"periodDescriptor\"][\"number\"]\n            self.current_period_type = response[\"periodDescriptor\"][\"periodType\"]\n\n        # Setting up placeholders for data storage\n        self._api_events = None\n        self._api_rosters = None\n        self._changes = None\n        self._html_events = None\n        self._html_rosters = None\n        self._play_by_play = None\n        self._rosters = None\n        self._shifts = None\n\n    def _munge_api_events(self) -&gt; None:\n        \"\"\"Method to munge events from API endpoint. Updates self._api_events\"\"\"\n\n        self._api_events = [x for x in self.api_response[\"plays\"]]\n\n        rosters = {x[\"api_id\"]: x for x in self._api_rosters}\n\n        teams_dict = {\n            self.home_team[\"id\"]: self.home_team[\"abbrev\"],\n            self.away_team[\"id\"]: self.away_team[\"abbrev\"],\n        }\n\n        event_list = []\n\n        for event in self._api_events:\n            time_split = event[\"timeInPeriod\"].split(\":\")\n\n            period = int(event[\"periodDescriptor\"][\"number\"])\n            period_type = event[\"periodDescriptor\"][\"periodType\"]\n            period_seconds = (int(time_split[0]) * 60) + int(time_split[1])\n\n            if self.session == \"R\" and period == 5:\n                game_seconds = 3900\n\n            else:\n                game_seconds = ((period - 1) * 1200) + period_seconds\n\n            event_info = {}\n\n            new_values = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"event_idx\": event[\"sortOrder\"],\n                \"period\": period,\n                \"period_type\": period_type,\n                \"period_seconds\": period_seconds,\n                \"game_seconds\": game_seconds,\n                \"event\": event[\"typeDescKey\"],\n                \"event_code\": event[\"typeCode\"],\n                \"strength\": event.get(\"situationCode\"),\n                \"home_team_defending_side\": event.get(\"homeTeamDefendingSide\"),\n            }\n\n            event_info.update(new_values)\n\n            if event_info[\"event\"] == \"period-start\":\n                event_info[\"event\"] = \"PSTR\"\n\n            if event_info[\"event\"] == \"period-end\":\n                event_info[\"event\"] = \"PEND\"\n\n            if event_info[\"event\"] == \"game-end\":\n                event_info[\"event\"] = \"GEND\"\n\n            if event_info[\"event\"] == \"shootout-complete\":\n                event_info[\"event\"] = \"SOC\"\n\n            if event.get(\"details\"):\n                new_values = {\n                    \"event_team\": teams_dict.get(\n                        event[\"details\"].get(\"eventOwnerTeamId\")\n                    ),\n                    \"coords_x\": event[\"details\"].get(\"xCoord\"),\n                    \"coords_y\": event[\"details\"].get(\"yCoord\"),\n                    \"zone\": event[\"details\"].get(\"zoneCode\"),\n                    \"event_team_id\": event[\"details\"].get(\"eventOwnerTeamId\"),\n                }\n\n                event_info.update(new_values)\n\n                if event_info[\"event\"] == \"faceoff\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"winningPlayerId\"]\n                    event_info[\"player_1_type\"] = \"WINNER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"losingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"LOSER\"\n\n                    event_info[\"event\"] = \"FAC\"\n\n                if event_info[\"event\"] == \"stoppage\":\n                    event_info[\"stoppage_reason\"] = (\n                        event[\"details\"][\"reason\"].replace(\"-\", \" \").upper()\n                    )\n                    event_info[\"stoppage_reason_secondary\"] = (\n                        event[\"details\"]\n                        .get(\"secondaryReason\", \"\")\n                        .replace(\"-\", \" \")\n                        .upper()\n                    )\n\n                    event_info[\"event\"] = \"STOP\"\n\n                if event_info[\"event\"] == \"hit\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"hittingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"HITTER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"hitteePlayerId\"]\n                    event_info[\"player_2_type\"] = \"HITTEE\"\n\n                    event_info[\"event\"] = \"HIT\"\n\n                if event_info[\"event\"] == \"giveaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"GIVER\"\n\n                    event_info[\"event\"] = \"GIVE\"\n\n                if event_info[\"event\"] == \"shot-on-goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                        \"goalieInNetId\", \"EMPTY NET\"\n                    )\n                    event_info[\"shot_type\"] = (\n                        event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    )\n\n                    event_info[\"event\"] = \"SHOT\"\n\n                if event_info[\"event\"] == \"takeaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"TAKER\"\n\n                    event_info[\"event\"] = \"TAKE\"\n\n                if event_info[\"event\"] == \"missed-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                        \"goalieInNetId\", \"EMPTY NET\"\n                    )\n                    event_info[\"shot_type\"] = (\n                        event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    )\n                    event_info[\"miss_reason\"] = (\n                        event[\"details\"].get(\"reason\", \"\").replace(\"-\", \" \").upper()\n                    )\n\n                    event_info[\"event\"] = \"MISS\"\n\n                if event_info[\"event\"] == \"blocked-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"].get(\n                        \"blockingPlayerId\"\n                    )\n                    event_info[\"player_1_type\"] = \"BLOCKER\"\n\n                    if event_info[\"player_1_api_id\"] is None:\n                        event_info[\"event_team\"] = \"OTHER\"\n                        event_info[\"player_1\"] = \"REFEREE\"\n                        event_info[\"player_1_api_id\"] = \"REFEREE\"\n                        event_info[\"player_1_eh_id\"] = \"REFEREE\"\n\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"SHOOTER\"\n\n                    event_info[\"event\"] = \"BLOCK\"\n\n                if event_info[\"event\"] == \"goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"scoringPlayerId\"]\n                    event_info[\"player_1_type\"] = \"GOAL SCORER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                        \"assist1PlayerId\"\n                    )\n\n                    if event_info[\"player_2_api_id\"] is not None:\n                        event_info[\"player_2_type\"] = \"PRIMARY ASSIST\"\n\n                    event_info[\"player_3_api_id\"] = event[\"details\"].get(\n                        \"assist2PlayerId\"\n                    )\n\n                    if event_info[\"player_3_api_id\"] is not None:\n                        event_info[\"player_3_type\"] = \"SECONDARY ASSIST\"\n\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                        \"goalieInNetId\", \"EMPTY NET\"\n                    )\n                    event_info[\"shot_type\"] = (\n                        event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    )\n\n                    event_info[\"event\"] = \"GOAL\"\n\n                if event_info[\"event\"] == \"penalty\":\n                    event_info[\"penalty_type\"] = event[\"details\"][\"typeCode\"]\n                    event_info[\"penalty_reason\"] = event[\"details\"][\"descKey\"].upper()\n                    event_info[\"penalty_duration\"] = event[\"details\"].get(\"duration\")\n\n                    if (\n                        event_info[\"penalty_type\"] == \"BEN\"\n                        and event[\"details\"].get(\"committedByPlayerId\") is None\n                    ):\n                        event_info[\"player_1\"] = \"BENCH\"\n                        event_info[\"player_1_api_id\"] = \"BENCH\"\n                        event_info[\"player_1_eh_id\"] = \"BENCH\"\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"servedByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    elif (\n                        \"HEAD-COACH\" in event_info[\"penalty_reason\"]\n                        or \"TEAM-STAFF\" in event_info[\"penalty_reason\"]\n                    ) and event[\"details\"].get(\"committedByPlayerId\") is None:\n                        event_info[\"player_1\"] = \"BENCH\"\n                        event_info[\"player_1_api_id\"] = \"BENCH\"\n                        event_info[\"player_1_eh_id\"] = \"BENCH\"\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"servedByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    else:\n                        event_info[\"player_1_api_id\"] = event[\"details\"].get(\n                            \"committedByPlayerId\"\n                        )\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"drawnByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"DRAWN BY\"\n\n                        if event_info[\"player_2_api_id\"] is None:\n                            event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                                \"servedByPlayerId\"\n                            )\n                            event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                        else:\n                            event_info[\"player_3_api_id\"] = event[\"details\"].get(\n                                \"servedByPlayerId\"\n                            )\n                            event_info[\"player_3_type\"] = \"SERVED BY\"\n\n                    event_info[\"event\"] = \"PENL\"\n\n                if event_info[\"event\"] == \"delayed-penalty\":\n                    event_info[\"event\"] = \"DELPEN\"\n\n                if event_info[\"event\"] == \"failed-shot-attempt\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"][\"goalieInNetId\"]\n\n                    event_info[\"event\"] = \"MISS\"\n\n            event_info = api_events_fixes(self.game_id, event_info)\n\n            player_cols = [\n                \"player_1_api_id\",\n                \"player_2_api_id\",\n                \"player_3_api_id\",\n                \"opp_goalie_api_id\",\n            ]\n\n            for player_col in player_cols:\n                if player_col not in event_info.keys():\n                    continue\n\n                elif event_info[player_col] is None:\n                    continue\n\n                elif event_info[player_col] == \"BENCH\":\n                    continue\n\n                elif event_info[player_col] == \"REFEREE\":\n                    continue\n\n                else:\n                    player_info = rosters.get(event_info[player_col], {})\n\n                    new_cols = {\n                        player_col.replace(\"_api_id\", \"\"): player_info.get(\n                            \"player_name\"\n                        ),\n                        player_col.replace(\"_api_id\", \"_eh_id\"): player_info.get(\n                            \"eh_id\"\n                        ),\n                        player_col.replace(\"_api_id\", \"_team_jersey\"): player_info.get(\n                            \"team_jersey\"\n                        ),\n                        player_col.replace(\"_api_id\", \"_position\"): player_info.get(\n                            \"position\"\n                        ),\n                    }\n\n                    event_info.update(new_cols)\n\n            event_list.append(event_info)\n\n        final_events = []\n\n        for event in event_list:\n            if \"version\" in event.keys():\n                continue\n\n            other_events = [\n                x\n                for x in event_list\n                if x != event\n                and x[\"event\"] == event[\"event\"]\n                and x[\"game_seconds\"] == event[\"game_seconds\"]\n                and x.get(\"player_1\") is not None\n                and x[\"period\"] == event[\"period\"]\n                and x.get(\"player_1_api_id\") == event.get(\"player_1_api_id\")\n            ]\n\n            version = 1\n\n            event[\"version\"] = 1\n\n            if len(other_events) &gt; 0:\n                for idx, other_event in enumerate(other_events):\n                    if \"version\" not in other_event.keys():\n                        version += 1\n\n                        other_event[\"version\"] = version\n\n            final_events.append(APIEvent.model_validate(event).model_dump())\n\n        self._api_events = final_events\n\n    @property\n    def api_events(self) -&gt; list:\n        \"\"\"List of events scraped from API endpoint. Each event is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_events\n\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        return self._api_events\n\n    @property\n    def api_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from API endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_events_df\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        return pd.DataFrame(self._api_events)\n\n    def _munge_api_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from API  endpoint. Updates self._api_rosters\"\"\"\n\n        players = []\n\n        team_info = {\n            self.home_team[\"id\"]: {\"venue\": \"HOME\", \"team\": self.home_team[\"abbrev\"]},\n            self.away_team[\"id\"]: {\"venue\": \"AWAY\", \"team\": self.away_team[\"abbrev\"]},\n        }\n\n        for player in self.api_response[\"rosterSpots\"]:\n            first_name = (\n                unidecode(player[\"firstName\"][\"default\"])\n                .encode(\"latin\")\n                .decode(\"utf=8\")\n                .upper()\n                .strip()\n            )\n\n            last_name = (\n                unidecode(player[\"lastName\"][\"default\"])\n                .encode(\"latin\")\n                .decode(\"utf=8\")\n                .upper()\n                .strip()\n            )\n\n            player_name = first_name + \" \" + last_name\n\n            player_name = (\n                player_name.replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player_name = correct_names_dict.get(player_name, player_name)\n\n            eh_id = (\n                player_name.split(\" \", 1)[0] + \".\" + player_name.split(\" \", 1)[1]\n            ).replace(\"..\", \".\")\n\n            eh_id = correct_api_names_dict.get(player[\"playerId\"], eh_id)\n\n            team = team_info[player[\"teamId\"]]\n\n            player_info = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": team[\"team\"],\n                \"team_venue\": team[\"venue\"],\n                \"player_name\": player_name,\n                \"first_name\": first_name,\n                \"last_name\": last_name,\n                \"api_id\": player[\"playerId\"],\n                \"eh_id\": correct_api_names_dict.get(player[\"playerId\"], eh_id),\n                \"team_jersey\": team[\"team\"] + str(player[\"sweaterNumber\"]),\n                \"jersey\": player[\"sweaterNumber\"],\n                \"position\": player[\"positionCode\"],\n                \"headshot_url\": player.get(\"headshot\", \"\"),\n            }\n\n            players.append(APIRosterPlayer.model_validate(player_info).model_dump())\n\n        if self.game_id == 2013020971:\n            new_player = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": \"CBJ\",\n                \"team_venue\": \"AWAY\",\n                \"player_name\": \"NATHAN HORTON\",\n                \"first_name\": \"NATHAN\",\n                \"last_name\": \"HORTON\",\n                \"api_id\": 8470596,\n                \"eh_id\": \"NATHAN.HORTON\",\n                \"team_jersey\": \"CBJ8\",\n                \"jersey\": 8,\n                \"position\": \"R\",\n                \"headshot_url\": \"\",\n            }\n\n            players.append(APIRosterPlayer.model_validate(new_player).model_dump())\n\n        players = sorted(players, key=lambda k: (k[\"team_venue\"], k[\"player_name\"]))\n\n        self._api_rosters = players\n\n    @property\n    def api_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API endpoint. Returns a dictionary of players with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_rosters\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return self._api_rosters\n\n    @property\n    def api_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_rosters_df\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return pd.DataFrame(self._api_rosters).fillna(np.nan)\n\n    def _munge_changes(self) -&gt; None:\n        \"\"\"Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes\"\"\"\n\n        game_id = self.game_id\n        season = self.season\n        game_session = self.session\n        shifts = self._shifts\n\n        game_list = []\n\n        periods = np.unique([x[\"period\"] for x in shifts]).tolist()\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            max([x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period])\n\n            for team in teams:\n                changes_dict = {}\n\n                changes_on = np.unique(\n                    [\n                        x[\"start_time_seconds\"]\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"team_venue\"] == team\n                    ]\n                ).tolist()\n\n                for change_on in changes_on:\n                    players_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                    ]\n\n                    players_on = sorted(players_on, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_on = sorted(forwards_on, key=lambda k: (k[\"jersey\"]))\n\n                    defense_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_on = sorted(defense_on, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_on = sorted(goalies_on, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_on[0][\"team\"],\n                        \"is_home\": players_on[0][\"is_home\"],\n                        \"is_away\": players_on[0][\"is_away\"],\n                        \"team_venue\": team,\n                        \"period\": period,\n                        \"period_time\": players_on[0][\"start_time\"],\n                        \"period_seconds\": players_on[0][\"start_time_seconds\"],\n                        \"change_on_count\": len(players_on),\n                        \"change_off_count\": 0,\n                        \"change_on_jersey\": [x[\"team_jersey\"] for x in players_on],\n                        \"change_on\": [x[\"player_name\"] for x in players_on],\n                        \"change_on_eh_id\": [x[\"eh_id\"] for x in players_on],\n                        \"change_on_positions\": [x[\"position\"] for x in players_on],\n                        \"change_off_jersey\": \"\",\n                        \"change_off\": \"\",\n                        \"change_off_eh_id\": \"\",\n                        \"change_off_positions\": \"\",\n                        \"change_on_forwards_count\": len(forwards_on),\n                        \"change_off_forwards_count\": 0,\n                        \"change_on_forwards_jersey\": [\n                            x[\"team_jersey\"] for x in forwards_on\n                        ],\n                        \"change_on_forwards\": [x[\"player_name\"] for x in forwards_on],\n                        \"change_on_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_on],\n                        \"change_off_forwards_jersey\": \"\",\n                        \"change_off_forwards\": \"\",\n                        \"change_off_forwards_eh_id\": \"\",\n                        \"change_on_defense_count\": len(defense_on),\n                        \"change_off_defense_count\": 0,\n                        \"change_on_defense_jersey\": [\n                            x[\"team_jersey\"] for x in defense_on\n                        ],\n                        \"change_on_defense\": [x[\"player_name\"] for x in defense_on],\n                        \"change_on_defense_eh_id\": [x[\"eh_id\"] for x in defense_on],\n                        \"change_off_defense_jersey\": \"\",\n                        \"change_off_defense\": \"\",\n                        \"change_off_defense_eh_id\": \"\",\n                        \"change_on_goalie_count\": len(goalies_on),\n                        \"change_off_goalie_count\": 0,\n                        \"change_on_goalie_jersey\": [\n                            x[\"team_jersey\"] for x in goalies_on\n                        ],\n                        \"change_on_goalie\": [x[\"player_name\"] for x in goalies_on],\n                        \"change_on_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_on],\n                        \"change_off_goalie_jersey\": \"\",\n                        \"change_off_goalie\": \"\",\n                        \"change_off_goalie_eh_id\": \"\",\n                    }\n\n                    changes_dict.update({change_on: new_values})\n\n                changes_off = np.unique(\n                    [\n                        x[\"end_time_seconds\"]\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"team_venue\"] == team\n                    ]\n                ).tolist()\n\n                for change_off in changes_off:\n                    players_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                    ]\n\n                    players_off = sorted(players_off, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_off = sorted(forwards_off, key=lambda k: (k[\"jersey\"]))\n\n                    defense_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_off = sorted(defense_off, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_off = sorted(goalies_off, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_off[0][\"team\"],\n                        \"team_venue\": team,\n                        \"is_home\": players_off[0][\"is_home\"],\n                        \"is_away\": players_off[0][\"is_away\"],\n                        \"period\": period,\n                        \"period_time\": players_off[0][\"end_time\"],\n                        \"period_seconds\": players_off[0][\"end_time_seconds\"],\n                        \"change_off_count\": len(players_off),\n                        \"change_off_jersey\": [x[\"team_jersey\"] for x in players_off],\n                        \"change_off\": [x[\"player_name\"] for x in players_off],\n                        \"change_off_eh_id\": [x[\"eh_id\"] for x in players_off],\n                        \"change_off_positions\": [x[\"position\"] for x in players_off],\n                        \"change_off_forwards_count\": len(forwards_off),\n                        \"change_off_forwards_jersey\": [\n                            x[\"team_jersey\"] for x in forwards_off\n                        ],\n                        \"change_off_forwards\": [x[\"player_name\"] for x in forwards_off],\n                        \"change_off_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_off],\n                        \"change_off_defense_count\": len(defense_off),\n                        \"change_off_defense_jersey\": [\n                            x[\"team_jersey\"] for x in defense_off\n                        ],\n                        \"change_off_defense\": [x[\"player_name\"] for x in defense_off],\n                        \"change_off_defense_eh_id\": [x[\"eh_id\"] for x in defense_off],\n                        \"change_off_goalie_count\": len(goalies_off),\n                        \"change_off_goalie_jersey\": [\n                            x[\"team_jersey\"] for x in goalies_off\n                        ],\n                        \"change_off_goalie\": [x[\"player_name\"] for x in goalies_off],\n                        \"change_off_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_off],\n                    }\n\n                    if change_off in changes_on:\n                        changes_dict[change_off].update(new_values)\n\n                    else:\n                        new_values.update(\n                            {\n                                \"change_on_count\": 0,\n                                \"change_on_forwards_count\": 0,\n                                \"change_on_defense_count\": 0,\n                                \"change_on_goalie_count\": 0,\n                            }\n                        )\n\n                        changes_dict[change_off] = new_values\n\n                game_list.extend(list(changes_dict.values()))\n\n        game_list = sorted(\n            game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"is_away\"])\n        )\n\n        final_changes = []\n\n        for change in game_list:\n            players_on = \", \".join(change.get(\"change_on\", []))\n\n            players_off = \", \".join(change.get(\"change_off\", []))\n\n            on_num = len(change.get(\"change_on\", []))\n\n            off_num = len(change.get(\"change_off\", []))\n\n            if on_num &gt; 0 and off_num &gt; 0:\n                change[\n                    \"description\"\n                ] = f\"PLAYERS ON: {players_on} / PLAYERS OFF: {players_off}\"\n\n            if on_num &gt; 0 and off_num == 0:\n                change[\"description\"] = f\"PLAYERS ON: {players_on}\"\n\n            if off_num &gt; 0 and on_num == 0:\n                change[\"description\"] = f\"PLAYERS OFF: {players_off}\"\n\n            if change[\"period\"] == 5 and game_session == \"R\":\n                change[\"game_seconds\"] = 3900 + change[\"period_seconds\"]\n\n            else:\n                change[\"game_seconds\"] = (int(change[\"period\"]) - 1) * 1200 + change[\n                    \"period_seconds\"\n                ]\n\n            if change[\"is_home\"] == 1:\n                change[\"event_type\"] = \"HOME CHANGE\"\n\n            else:\n                change[\"event_type\"] = \"AWAY CHANGE\"\n\n            final_changes.append(ChangeEvent.model_validate(change).model_dump())\n\n        self._changes = final_changes\n\n    @property\n    def changes(self) -&gt; list:\n        \"\"\"List of changes scraped from API endpoint. Each change is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).changes_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.changes\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._shifts is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        if self._changes is None:\n            self._munge_changes()\n\n        return self._changes\n\n    @property\n    def changes_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.changes_df\n\n        \"\"\"\n\n        if self._changes is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            if self._shifts is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n            self._munge_changes()\n\n        return pd.DataFrame(self._changes).fillna(np.nan)\n\n    def _scrape_html_events(self) -&gt; None:\n        \"\"\"Method for scraping events from HTML endpoint. Updates self._html_events\"\"\"\n\n        url = self.html_events_endpoint\n\n        s = self._requests_session\n\n        try:\n            response = s.get(url)\n        except RetryError:\n            return None\n\n        soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\")\n\n        events = []\n\n        if soup.find(\"html\") is None:\n            return None\n\n        tds = soup.find_all(\"td\", {\"class\": re.compile(\".*bborder.*\")})\n\n        events_data = hs_strip_html(tds)\n\n        events_data = [\n            unidecode(x).replace(\"\\n \", \", \").replace(\"\\n\", \"\") for x in events_data\n        ]\n\n        length = int(len(events_data) / 8)\n\n        events_data = np.array(events_data).reshape(length, 8)\n\n        for idx, event in enumerate(events_data):\n            column_names = [\n                \"event_idx\",\n                \"period\",\n                \"strength\",\n                \"time\",\n                \"event\",\n                \"description\",\n                \"away_skaters\",\n                \"home_skaters\",\n            ]\n\n            if \"#\" in event:\n                continue\n\n            else:\n                event = dict(zip(column_names, event))\n\n                new_values = {\n                    \"season\": self.season,\n                    \"session\": self.session,\n                    \"game_id\": self.game_id,\n                    \"event_idx\": int(event[\"event_idx\"]),\n                    \"description\": unidecode(event[\"description\"]).upper(),\n                    \"period\": event[\"period\"],\n                }\n\n                event.update(new_values)\n\n                # This event is missing from the API and doesn't have a player in the HTML endpoint\n\n                if self.game_id == 2022020194 and event[\"event_idx\"] == 134:\n                    continue\n\n                if self.game_id == 2022020673 and event[\"event_idx\"] == 208:\n                    continue\n\n                events.append(event)\n\n        self._html_events = events\n\n    def _munge_html_events(self) -&gt; None:\n        \"\"\"Method to munge list of events from HTML endpoint. Updates self._html_events\"\"\"\n\n        game_session = self.session\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        roster = self._html_rosters\n\n        # Compiling regex expressions to save time later\n\n        event_team_re = re.compile(r\"^([A-Z]{3}|[A-Z]\\.[A-Z])\")\n        numbers_re = re.compile(r\"#([0-9]{1,2})\")\n        event_players_re = re.compile(r\"([A-Z]{3}\\s+#[0-9]{1,2})\")\n        re.compile(r\"([A-Z]{1,2})\")\n        fo_team_re = re.compile(r\"([A-Z]{3}) WON\")\n        block_team_re = re.compile(r\"BLOCKED BY\\s+([A-Z]{3})\")\n        re.compile(r\"(\\d+)\")\n        zone_re = re.compile(r\"([A-Za-z]{3}). ZONE\")\n        penalty_re = re.compile(\n            r\"([A-Za-z]*|[A-Za-z]*-[A-Za-z]*|[A-Za-z]*\\s+\\(.*\\))\\s*\\(\"\n        )\n        penalty_length_re = re.compile(r\"(\\d+) MIN\")\n        shot_re = re.compile(r\",\\s+([A-Za-z]*|[A-Za-z]*-[A-Za-z]*)\\s+,\")\n        distance_re = re.compile(r\"(\\d+) FT\")\n        served_re = re.compile(r\"([A-Z]{3})\\s.+SERVED BY: #([0-9]+)\")\n        # served_drawn_re = re.compile('([A-Z]{3})\\s#.*\\sSERVED BY: #([0-9]+)')\n        drawn_re = re.compile(r\"DRAWN BY: ([A-Z]{3}) #([0-9]+)\")\n\n        actives = {\n            player[\"team_jersey\"]: player\n            for player in roster\n            if player[\"status\"] == \"ACTIVE\"\n        }\n\n        scratches = {\n            player[\"team_jersey\"]: player\n            for player in roster\n            if player[\"status\"] == \"SCRATCH\"\n        }\n\n        for event in self._html_events:\n            non_descripts = {\n                \"PGSTR\": \"PRE-GAME START\",\n                \"PGEND\": \"PRE-GAME END\",\n                \"ANTHEM\": \"NATIONAL ANTHEM\",\n                \"EISTR\": \"EARLY INTERMISSION START\",\n                \"EIEND\": \"EARLY INTERMISSION END\",\n            }\n\n            if event[\"event\"] in list(non_descripts.keys()):\n                event[\"description\"] = non_descripts[event[\"event\"]]\n\n            # Replacing the team names with three-letter codes from API endpoint\n\n            new_team_names = {\n                \"L.A\": \"LAK\",\n                \"N.J\": \"NJD\",\n                \"S.J\": \"SJS\",\n                \"T.B\": \"TBL\",\n                \"PHX\": \"ARI\",\n            }\n\n            for old_name, new_name in new_team_names.items():\n                event[\"description\"] = (\n                    event[\"description\"].replace(old_name, new_name).upper()\n                )\n\n            event = html_events_fixes(self.game_id, event)\n\n            if event[\"event\"] == \"PEND\" and event[\"time\"] == \"-16:0-120:00\":\n                goals = [\n                    x\n                    for x in self._html_events\n                    if x[\"period\"] == event[\"period\"] and x[\"event\"] == \"GOAL\"\n                ]\n\n                if len(goals) == 0:\n                    if int(event[\"period\"]) == 4 and event[\"session\"] == \"R\":\n                        event[\"time\"] = event[\"time\"].replace(\n                            \"-16:0-120:00\", \"5:000:00\"\n                        )\n\n                    else:\n                        event[\"time\"] = event[\"time\"].replace(\n                            \"-16:0-120:00\", \"20:000:00\"\n                        )\n\n                elif len(goals) &gt; 0:\n                    goal = goals[-1]\n\n                    event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", goal[\"time\"])\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"PBOX\",\n            ]\n\n            if event[\"event\"] not in non_team_events:\n                try:\n                    event[\"event_team\"] = re.search(\n                        event_team_re, event[\"description\"]\n                    ).group(1)\n\n                    if event[\"event_team\"] == \"LEA\":\n                        event[\"event_team\"] = \"\"\n\n                except AttributeError:\n                    continue\n\n            if event[\"event\"] == \"FAC\":\n                event[\"event_team\"] = re.search(fo_team_re, event[\"description\"]).group(\n                    1\n                )\n\n            if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY\" in event[\"description\"]:\n                event[\"event_team\"] = re.search(\n                    block_team_re, event[\"description\"]\n                ).group(1)\n\n            event[\"period\"] = int(event[\"period\"])\n\n            time_split = event[\"time\"].split(\":\")\n\n            event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n            event[\"period_seconds\"] = (\n                60 * int(event[\"period_time\"].split(\":\")[0])\n            ) + int(event[\"period_time\"].split(\":\")[1])\n\n            event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\n                \"period_seconds\"\n            ]\n\n            if event[\"period\"] == 5 and game_session == \"R\":\n                event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            event_list = [\"GOAL\", \"SHOT\", \"TAKE\", \"GIVE\"]\n\n            if event[\"event\"] in event_list:\n                event_players = [\n                    event[\"event_team\"] + num\n                    for num in re.findall(numbers_re, event[\"description\"])\n                ]\n\n            else:\n                event_players = re.findall(event_players_re, event[\"description\"])\n\n            if event[\"event\"] == \"FAC\" and event[\"event_team\"] not in event_players[0]:\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            if event[\"event\"] == \"BLOCK\" and \"TEAMMATE\" in event[\"description\"]:\n                event[\"event_team\"] = event[\"description\"][:3]\n\n                event_players.insert(0, \"TEAMMATE\")\n\n            elif (\n                event[\"event\"] == \"BLOCK\" and \"BLOCKED BY OTHER\" in event[\"description\"]\n            ):\n                event[\"event_team\"] = \"OTHER\"\n\n                event_players.insert(0, \"REFEREE\")\n\n            elif (\n                event[\"event\"] == \"BLOCK\"\n                and event[\"event_team\"] not in event_players[0]\n            ):\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            for idx, event_player in enumerate(event_players):\n                num = idx + 1\n\n                event_player = event_player.replace(\" #\", \"\")\n\n                if event_player == \"TEAMMATE\":\n                    player_name = \"TEAMMATE\"\n                    eh_id = \"TEAMMATE\"\n                    position = None\n\n                elif event_player == \"REFEREE\":\n                    player_name = \"REFEREE\"\n                    eh_id = \"REFEREE\"\n                    position = None\n\n                else:\n                    try:\n                        player_name = actives[event_player][\"player_name\"]\n                        eh_id = actives[event_player][\"eh_id\"]\n                        position = actives[event_player][\"position\"]\n\n                    except KeyError:\n                        player_name = scratches[event_player][\"player_name\"]\n                        eh_id = scratches[event_player][\"eh_id\"]\n                        position = scratches[event_player][\"position\"]\n\n                new_values = {\n                    f\"player_{num}\": player_name,\n                    f\"player_{num}_eh_id\": eh_id,\n                    f\"player_{num}_position\": position,\n                }\n\n                event.update(new_values)\n\n            try:\n                event[\"zone\"] = (\n                    re.search(zone_re, event[\"description\"]).group(1).upper()\n                )\n\n                if \"BLOCK\" in event[\"event\"] and event[\"zone\"] == \"DEF\":\n                    event[\"zone\"] = \"OFF\"\n\n            except AttributeError:\n                pass\n\n            if event[\"event\"] == \"PENL\":\n                if (\n                    \"TEAM\" in event[\"description\"]\n                    and \"SERVED BY\" in event[\"description\"]\n                ) or (\"HEAD COACH\" in event[\"description\"]):\n                    event[\"player_1\"] = \"BENCH\"\n\n                    event[\"player_1_eh_id\"] = \"BENCH\"\n\n                    event[\"player_1_position\"] = None\n\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        name = served_by.group(1) + str(served_by.group(2))\n\n                    except AttributeError:\n                        try:\n                            drawn_by = re.search(drawn_re, event[\"description\"])\n\n                            name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        except AttributeError:\n                            continue\n\n                    event[\"player_2\"] = actives[name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[name][\"position\"]\n\n                if (\n                    \"SERVED BY\" in event[\"description\"]\n                    and \"DRAWN BY\" in event[\"description\"]\n                ):\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                        if event[\"player_1_eh_id\"] == event[\"player_2_eh_id\"]:\n                            event[\"player_1\"] = \"BENCH\"\n                            event[\"player_1_eh_id\"] = \"BENCH\"\n                            event[\"player_1_position\"] = None\n\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_3\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_3_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_3_position\"] = actives[served_name][\"position\"]\n\n                        if (\n                            \"TEAM\" in event[\"description\"]\n                            or \"HEAD COACH\" in event[\"description\"]\n                        ):\n                            event[\"player_2\"], event[\"player_3\"] = (\n                                event[\"player_3\"],\n                                event[\"player_2\"],\n                            )\n\n                            event[\"player_2_eh_id\"], event[\"player_3_eh_id\"] = (\n                                event[\"player_3_eh_id\"],\n                                event[\"player_2_eh_id\"],\n                            )\n\n                            event[\"player_2_position\"], event[\"player_3_position\"] = (\n                                event[\"player_3_position\"],\n                                event[\"player_2_position\"],\n                            )\n\n                    except AttributeError:\n                        pass\n\n                elif \"SERVED BY\" in event[\"description\"]:\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_2\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[served_name][\"position\"]\n\n                    except AttributeError:\n                        pass\n\n                elif \"DRAWN BY\" in event[\"description\"]:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                    except AttributeError:\n                        pass\n\n                if \"player_1\" not in event.keys():\n                    new_values = {\n                        \"player_1\": \"BENCH\",\n                        \"player_1_eh_id\": \"BENCH\",\n                        \"player_1_position\": \"\",\n                    }\n\n                    event.update(new_values)\n\n                try:\n                    event[\"penalty_length\"] = int(\n                        re.search(penalty_length_re, event[\"description\"]).group(1)\n                    )\n\n                except TypeError:\n                    pass\n\n                try:\n                    event[\"penalty\"] = (\n                        re.search(penalty_re, event[\"description\"]).group(1).upper()\n                    )\n\n                except AttributeError:\n                    continue\n\n                if (\n                    \"INTERFERENCE\" in event[\"description\"]\n                    and \"GOALKEEPER\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"GOALKEEPER INTERFERENCE\"\n\n                elif (\n                    \"CROSS\" in event[\"description\"]\n                    and \"CHECKING\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"CROSS-CHECKING\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"PUCK OVER\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - PUCK OVER GLASS\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"FO VIOL\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - FACEOFF VIOLATION\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"EQUIPMENT\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - EQUIPMENT\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"UNSUCC\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - UNSUCCESSFUL CHALLENGE\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"SMOTHERING\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - SMOTHERING THE PUCK\"\n\n                elif (\n                    \"ILLEGAL\" in event[\"description\"]\n                    and \"CHECK\" in event[\"description\"]\n                    and \"HEAD\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"ILLEGAL CHECK TO HEAD\"\n\n                elif (\n                    \"HIGH-STICKING\" in event[\"description\"]\n                    and \"- DOUBLE\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HIGH-STICKING - DOUBLE MINOR\"\n\n                elif \"GAME MISCONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n                elif \"MATCH PENALTY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"MATCH PENALTY\"\n\n                elif (\n                    \"NET\" in event[\"description\"]\n                    and \"DISPLACED\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DISPLACED NET\"\n\n                elif (\n                    \"THROW\" in event[\"description\"]\n                    and \"OBJECT\" in event[\"description\"]\n                    and \"AT PUCK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"THROWING OBJECT AT PUCK\"\n\n                elif (\n                    \"INSTIGATOR\" in event[\"description\"]\n                    and \"FACE SHIELD\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"INSTIGATOR - FACE SHIELD\"\n\n                elif \"GOALIE LEAVE CREASE\" in event[\"description\"]:\n                    event[\"penalty\"] = \"LEAVING THE CREASE\"\n\n                elif (\n                    \"REMOVING\" in event[\"description\"]\n                    and \"HELMET\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"REMOVING OPPONENT HELMET\"\n\n                elif (\n                    \"BROKEN\" in event[\"description\"] and \"STICK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOLDING BROKEN STICK\"\n\n                elif (\n                    \"HOOKING\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOOKING - BREAKAWAY\"\n\n                elif (\n                    \"HOLDING\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOLDING - BREAKAWAY\"\n\n                elif (\n                    \"TRIPPING\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"TRIPPING - BREAKAWAY\"\n\n                elif (\n                    \"SLASH\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"SLASHING - BREAKAWAY\"\n\n                elif \"TEAM TOO MANY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"TOO MANY MEN ON THE ICE\"\n\n                elif (\n                    \"HOLDING\" in event[\"description\"]\n                    and \"STICK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOLDING THE STICK\"\n\n                elif (\n                    \"THROWING\" in event[\"description\"]\n                    and \"STICK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"THROWING STICK\"\n\n                elif (\n                    \"CLOSING\" in event[\"description\"] and \"HAND\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"CLOSING HAND ON PUCK\"\n\n                elif (\n                    \"ABUSE\" in event[\"description\"]\n                    and \"OFFICIALS\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"ABUSE OF OFFICIALS\"\n\n                elif \"UNSPORTSMANLIKE CONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"UNSPORTSMANLIKE CONDUCT\"\n\n                elif (\n                    \"PUCK\" in event[\"description\"]\n                    and \"THROWN\" in event[\"description\"]\n                    and \"FWD\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"PUCK THROWN FORWARD - GOALKEEPER\"\n\n                elif \"DELAY\" in event[\"description\"] and \"GAME\" in event[\"description\"]:\n                    event[\"penalty\"] = \"DELAY OF GAME\"\n\n                elif event[\"penalty\"] == \"MISCONDUCT\":\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n            shot_events = [\"GOAL\", \"SHOT\", \"MISS\", \"BLOCK\"]\n\n            if event[\"event\"] in shot_events:\n                try:\n                    event[\"shot_type\"] = (\n                        re.search(shot_re, event[\"description\"]).group(1).upper()\n                    )\n\n                except AttributeError:\n                    event[\"shot_type\"] = \"WRIST\"\n\n                    pass\n\n                if \"BETWEEN LEGS\" in event[\"description\"]:\n                    event[\"shot_type\"] = \"BETWEEN LEGS\"\n\n            try:\n                event[\"pbp_distance\"] = int(\n                    re.search(distance_re, event[\"description\"]).group(1)\n                )\n\n            except AttributeError:\n                if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                    event[\"pbp_distance\"] = 0\n\n                pass\n\n        self._html_events = sorted(self._html_events, key=lambda k: (k[\"event_idx\"]))\n\n        final_events = []\n\n        for event in self._html_events:\n            if \"period_seconds\" not in event.keys():\n                if \"time\" in event.keys():\n                    event[\"period\"] = int(event[\"period\"])\n\n                    time_split = event[\"time\"].split(\":\")\n\n                    event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n                    event[\"period_seconds\"] = (\n                        60 * int(event[\"period_time\"].split(\":\")[0])\n                    ) + int(event[\"period_time\"].split(\":\")[1])\n\n            if \"game_seconds\" not in event.keys():\n                event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\n                    \"period_seconds\"\n                ]\n\n                if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                    event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            if \"version\" not in event.keys():\n                other_events = [\n                    x\n                    for x in self._html_events\n                    if x != event\n                    and x[\"event\"] == event[\"event\"]\n                    and x.get(\"game_seconds\") == event[\"game_seconds\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                ]\n\n                version = 1\n\n                event[\"version\"] = version\n\n                if len(other_events) &gt; 0:\n                    for idx, other_event in enumerate(other_events):\n                        if \"version\" not in other_event.keys():\n                            version += 1\n\n                            other_event[\"version\"] = version\n\n            final_events.append(HTMLEvent.model_validate(event).model_dump())\n\n        self._html_events = final_events\n\n    @property\n    def html_events(self) -&gt; list:\n        \"\"\"List of events scraped from HTML endpoint. Each event is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_events\n\n        \"\"\"\n\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return self._html_events\n\n    @property\n    def html_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_events_df\n\n        \"\"\"\n\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return pd.DataFrame(self._html_events).fillna(np.nan)\n\n    def _scrape_html_rosters(self) -&gt; None:\n        \"\"\"Method for scraping players from HTML endpoint. Updates self._html_rosters\"\"\"\n\n        # URL and scraping url\n\n        url = self.html_rosters_endpoint\n\n        s = self._requests_session\n\n        try:\n            page = s.get(url)\n        except RetryError:\n            return None\n\n        # Continue if status code is bad\n\n        if page.status_code == 404:\n            return None\n\n        # Reading the HTML file using beautiful soup package\n\n        soup = BeautifulSoup(\n            page.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None\n        )\n\n        # Information for reading the HTML data\n\n        td_dict = {\n            \"align\": \"center\",\n            \"class\": [\"teamHeading + border\", \"teamHeading + border \"],\n            \"width\": \"50%\",\n        }\n\n        # Finding all active players in the html file\n\n        teamsoup = soup.find_all(\"td\", td_dict)\n\n        # Dictionary for finding each team's table in the HTML file\n\n        table_dict = {\n            \"align\": \"center\",\n            \"border\": \"0\",\n            \"cellpadding\": \"0\",\n            \"cellspacing\": \"0\",\n            \"width\": \"100%\",\n            \"xmlns:ext\": \"\",\n        }\n\n        # Dictionary to collect the team names\n\n        team_names = {}\n\n        # Dictionary to collect the team tables from the HTML data for iterating\n\n        team_soup_list = []\n\n        # List of teams for iterating\n\n        team_list = [\"away\", \"home\"]\n\n        # List to collect the player dictionaries during iteration\n\n        player_list = []\n\n        # Iterating through the home and away teams to collect names and tables\n\n        for idx, team in enumerate(team_list):\n            # Collecting team names\n\n            team_name = unidecode(\n                teamsoup[idx].get_text().encode(\"latin-1\").decode(\"utf-8\")\n            ).upper()\n\n            # Correcting the Coyotes team name\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            team_names.update({team: team_name})\n\n            # Collecting tables of active players\n\n            team_soup_list.append(\n                (soup.find_all(\"table\", table_dict))[idx].find_all(\"td\")\n            )\n\n        # Iterating through the team's tables of active players\n\n        for idx, team_soup in enumerate(team_soup_list):\n            table_dict = {\n                \"align\": \"center\",\n                \"border\": \"0\",\n                \"cellpadding\": \"0\",\n                \"cellspacing\": \"0\",\n                \"width\": \"100%\",\n                \"xmlns:ext\": \"\",\n            }\n\n            stuff = soup.find_all(\"table\", table_dict)[idx].find_all(\n                \"td\", {\"class\": \"bold\"}\n            )\n\n            starters = list(np.reshape(stuff, (int(len(stuff) / 3), 3))[:, 2])\n\n            # Getting length to create numpy array\n\n            length = int(len(team_soup) / 3)\n\n            # Creating a numpy array from the data, chopping off the headers to create my own\n\n            active_array = np.array(team_soup).reshape(length, 3)\n\n            # Getting original headers\n\n            og_headers = active_array[0]\n\n            if \"Name\" not in og_headers and \"Nom/Name\" not in og_headers:\n                continue\n\n            # Chop off the headers to create my own\n\n            actives = active_array[1:]\n\n            # Iterating through each player, or row in the array\n\n            for player in actives:\n                # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                if len(player) == 3:\n                    headers = [\"jersey\", \"position\", \"player_name\"]\n\n                # Sometimes headers are missing\n\n                else:\n                    headers = [\"jersey\", \"player_name\"]\n\n                # Creating dictionary with headers as keys from the player data\n\n                player = dict(zip(headers, player))\n\n                # Adding new values to the player dictionary\n\n                new_values = {\n                    \"team_name\": team_names.get(team_list[idx]),\n                    \"team_venue\": team_list[idx].upper(),\n                    \"status\": \"ACTIVE\",\n                }\n\n                if player[\"player_name\"] in starters:\n                    player[\"starter\"] = 1\n\n                else:\n                    player[\"starter\"] = 0\n\n                player[\"player_name\"] = (\n                    re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                    .strip()\n                    .encode(\"latin-1\")\n                    .decode(\"utf-8\")\n                    .upper()\n                )\n\n                player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                if \"position\" not in headers:\n                    player[\"position\"] = None\n\n                # Update the player's dictionary with new values\n\n                player.update(new_values)\n\n                # Append player dictionary to list of players\n\n                player_list.append(player)\n\n        # Check if scratches are present\n\n        if len(soup.find_all(\"table\", table_dict)) &gt; 2:\n            # If scratches are present, iterate through the team's scratch tables\n\n            for idx, team in enumerate(team_list):\n                # Getting team's scratches from HTML\n\n                scratch_soup = (soup.find_all(\"table\", table_dict))[idx + 2].find_all(\n                    \"td\"\n                )\n\n                # Checking to see if there is at least one set of scratches (first row are headers)\n\n                if len(scratch_soup) &gt; 1:\n                    # Getting the number of scratches\n\n                    length = int(len(scratch_soup) / 3)\n\n                    # Creating numpy array of scratches, removing headers\n\n                    scratches = np.array(scratch_soup).reshape(length, 3)[1:]\n\n                    # Iterating through the array\n\n                    for player in scratches:\n                        # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                        if len(player) == 3:\n                            headers = [\"jersey\", \"position\", \"player_name\"]\n\n                        # Sometimes headers are missing\n\n                        else:\n                            headers = [\"jersey\", \"player_name\"]\n\n                        # Creating dictionary with headers as keys from the player data\n\n                        player = dict(zip(headers, player))\n\n                        # Adding new values to the player dictionary\n\n                        new_values = {\n                            \"team_name\": team_names.get(team_list[idx]),\n                            \"team_venue\": team_list[idx].upper(),\n                            \"starter\": 0,\n                            \"status\": \"SCRATCH\",\n                        }\n\n                        if \"position\" not in headers:\n                            player[\"position\"] = None\n\n                        player[\"player_name\"] = (\n                            re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                            .strip()\n                            .encode(\"latin-1\")\n                            .decode(\"utf-8\")\n                            .upper()\n                        )\n\n                        player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                        # Updating player dictionary\n\n                        player.update(new_values)\n\n                        # Appending the player dictionary to the player list\n\n                        player_list.append(player)\n\n        self._html_rosters = player_list\n\n    def _munge_html_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from HTML endpoint. Updates self._html_rosters\"\"\"\n\n        season = self.season\n        game_session = self.session\n\n        # Iterating through each player to change information\n\n        final_rosters = []\n\n        for player in self._html_rosters:\n            # Fixing jersey data type\n\n            player = html_rosters_fixes(self.game_id, player)\n\n            player[\"jersey\"] = int(player[\"jersey\"])\n\n            # Adding new values in a batch\n\n            new_values = {\n                \"season\": int(season),\n                \"session\": game_session,\n                \"game_id\": self.game_id,\n            }\n\n            player.update(new_values)\n\n            player[\"player_name\"] = (\n                player[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player[\"player_name\"] = correct_names_dict.get(\n                player[\"player_name\"], player[\"player_name\"]\n            )\n\n            # Creating Evolving Hockey ID\n\n            player[\"eh_id\"] = unidecode(player[\"player_name\"])\n\n            name_split = player[\"eh_id\"].split(\" \", maxsplit=1)\n\n            player[\"eh_id\"] = f\"{name_split[0]}.{name_split[1]}\"\n\n            player[\"eh_id\"] = player[\"eh_id\"].replace(\"..\", \".\")\n\n            # Correcting Evolving Hockey IDs for duplicates\n\n            duplicates = {\n                \"SEBASTIAN.AHO\": player[\"position\"] == \"D\",\n                \"COLIN.WHITE\": player[\"season\"] &gt;= 20162017,\n                \"SEAN.COLLINS\": player[\"position\"] != \"D\",\n                \"ALEX.PICARD\": player[\"position\"] != \"D\",\n                \"ERIK.GUSTAFSSON\": player[\"season\"] &gt;= 20152016,\n                \"MIKKO.LEHTONEN\": player[\"season\"] &gt;= 20202021,\n                \"NATHAN.SMITH\": player[\"season\"] &gt;= 20212022,\n                \"DANIIL.TARASOV\": player[\"position\"] == \"G\",\n            }\n\n            # Iterating through the duplicate names and conditions\n\n            for duplicate_name, condition in duplicates.items():\n                if player[\"eh_id\"] == duplicate_name and condition:\n                    player[\"eh_id\"] = f\"{duplicate_name}2\"\n\n            # Something weird with Colin White\n\n            if player[\"eh_id\"] == \"COLIN.\":\n                player[\"eh_id\"] = \"COLIN.WHITE2\"\n\n            player[\"team\"] = team_codes.get(player[\"team_name\"])\n\n            player[\"team_jersey\"] = f\"{player['team']}{player['jersey']}\"\n\n            final_rosters.append(HTMLRosterPlayer.model_validate(player).model_dump())\n\n        self._html_rosters = final_rosters\n\n        self._html_rosters = sorted(\n            self._html_rosters,\n            key=lambda k: (k[\"team_venue\"], k[\"status\"], k[\"player_name\"]),\n        )\n\n    @property\n    def html_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from HTML endpoint. Returns a dictionary of players with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_rosters\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return self._html_rosters\n\n    @property\n    def html_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_rosters_df\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return pd.DataFrame(self._html_rosters).fillna(np.nan)\n\n    def _combine_events(self) -&gt; None:\n        \"\"\"Method to combine API and HTML events. Updates self._play_by_play\"\"\"\n\n        html_events = self._html_events\n        api_events = self._api_events\n\n        game_list = []\n\n        for event in html_events:\n            if event[\"event\"] == \"EGPID\":\n                continue\n\n            event_data = {}\n\n            event_data.update(event)\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"EGT\",\n                \"PBOX\",\n                \"PRDY\",\n                \"POFF\",\n                \"GOFF\",\n            ]\n\n            if event[\"event\"] in non_team_events:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is None:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is not None:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"PENL\":\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x.get(\"player_2_eh_id\") == event.get(\"player_2_eh_id\")\n                    and x.get(\"player_3_eh_id\") == event.get(\"player_3_eh_id\")\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                ]\n\n            elif event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            else:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if event[\"event\"] == \"FAC\" and len(api_matches) == 0:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if len(api_matches) == 0:\n                game_list.append(event_data)\n\n                continue\n\n            elif len(api_matches) == 1:\n                api_match = api_matches[0]\n\n                new_values = {\n                    \"event_idx_api\": api_match.get(\"event_idx\"),\n                    \"coords_x\": api_match.get(\"coords_x\"),\n                    \"coords_y\": api_match.get(\"coords_y\"),\n                    \"player_1_eh_id_api\": api_match.get(\"player_1_eh_id\"),\n                    \"player_1_api_id\": api_match.get(\"player_1_api_id\"),\n                    \"player_1_type\": api_match.get(\"player_1_type\"),\n                    \"player_2_eh_id_api\": api_match.get(\"player_2_eh_id\"),\n                    \"player_2_api_id\": api_match.get(\"player_2_api_id\"),\n                    \"player_2_type\": api_match.get(\"player_2_type\"),\n                    \"player_3_eh_id_api\": api_match.get(\"player_3_eh_id\"),\n                    \"player_3_api_id\": api_match.get(\"player_3_api_id\"),\n                    \"player_3_type\": api_match.get(\"player_3_type\"),\n                    \"version_api\": api_match.get(\"version\", 1),\n                }\n\n                event_data.update(new_values)\n\n                if event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":\n                    new_values = {\n                        \"player_1\": api_match.get(\"player_1\", event[\"player_1\"]),\n                        \"player_1_eh_id\": api_match.get(\n                            \"player_1_eh_id\", event[\"player_1_eh_id\"]\n                        ),\n                        \"player_1_position\": api_match.get(\n                            \"player_1_position\", event[\"player_1_position\"]\n                        ),\n                    }\n\n                    event_data.update(new_values)\n\n                game_list.append(event_data)\n\n        game_list.extend(self._changes)\n\n        for event in game_list:\n            new_values = {\n                \"game_date\": self.game_date,\n                \"home_team\": self.home_team[\"abbrev\"],\n                \"away_team\": self.away_team[\"abbrev\"],\n            }\n\n            event.update(new_values)\n\n            if \"version\" not in event.keys():\n                event[\"version\"] = 1\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                event[\"sort_value\"] = event[\"event_idx\"]\n\n            else:\n                sort_dict = {\n                    \"PGSTR\": 1,\n                    \"PGEND\": 2,\n                    \"ANTHEM\": 3,\n                    \"EGT\": 3,\n                    \"CHL\": 3,\n                    \"DELPEN\": 3,\n                    \"BLOCK\": 3,\n                    \"GIVE\": 3,\n                    \"HIT\": 3,\n                    \"MISS\": 3,\n                    \"SHOT\": 3,\n                    \"TAKE\": 3,\n                    \"GOAL\": 5,\n                    \"STOP\": 6,\n                    \"PENL\": 7,\n                    \"PBOX\": 7,\n                    \"PSTR\": 7,\n                    \"CHANGE\": 8,\n                    \"EISTR\": 9,\n                    \"EIEND\": 10,\n                    \"FAC\": 12,\n                    \"PEND\": 13,\n                    \"SOC\": 14,\n                    \"GEND\": 15,\n                    \"GOFF\": 16,\n                }\n\n                event[\"sort_value\"] = sort_dict[event[\"event\"]]\n\n        game_list = sorted(\n            game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"sort_value\"])\n        )  # , k['version']\n\n        self._play_by_play = game_list\n\n    def _munge_play_by_play(self) -&gt; None:\n        \"\"\"Method to munge list of events and changes for play-by-play. Updates self._play_by_play\"\"\"\n\n        game_session = self.session\n\n        home_score = 0\n\n        away_score = 0\n\n        for idx, event in enumerate(self._play_by_play):\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"opp_team\"] = event[\"away_team\"]\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"opp_team\"] = event[\"home_team\"]\n\n            event[\"home_forwards_eh_id\"] = []\n            event[\"home_forwards_api_id\"] = []\n            event[\"home_forwards\"] = []\n            event[\"home_forwards_positions\"] = []\n\n            event[\"home_defense_eh_id\"] = []\n            event[\"home_defense_api_id\"] = []\n            event[\"home_defense\"] = []\n            event[\"home_defense_positions\"] = []\n\n            event[\"home_goalie_eh_id\"] = []\n            event[\"home_goalie_api_id\"] = []\n            event[\"home_goalie\"] = []\n\n            event[\"away_forwards_eh_id\"] = []\n            event[\"away_forwards_api_id\"] = []\n            event[\"away_forwards\"] = []\n            event[\"away_forwards_positions\"] = []\n\n            event[\"away_defense_eh_id\"] = []\n            event[\"away_defense_api_id\"] = []\n            event[\"away_defense\"] = []\n            event[\"away_defense_positions\"] = []\n\n            event[\"away_goalie_eh_id\"] = []\n            event[\"away_goalie_api_id\"] = []\n            event[\"away_goalie\"] = []\n\n            if (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"home_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    home_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:\n                    ot_events = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(home_goals) &gt; len(away_goals):\n                        home_score += 1\n\n                else:\n                    home_score += 1\n\n            elif (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"away_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    away_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:\n                    ot_events = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(away_goals) &gt; len(home_goals):\n                        away_score += 1\n\n                else:\n                    away_score += 1\n\n            event[\"home_score\"] = home_score\n            event[\"home_score_diff\"] = home_score - away_score\n\n            event[\"away_score\"] = away_score\n            event[\"away_score_diff\"] = away_score - home_score\n\n            event[\"score_state\"] = f\"{home_score}v{away_score}\"\n            event[\"score_diff\"] = home_score - away_score\n\n        roster = [x for x in self._rosters if x[\"status\"] == \"ACTIVE\"]\n\n        roster = sorted(roster, key=lambda k: (k[\"team_venue\"], k[\"jersey\"]))\n\n        for player in roster:\n            counter = 0\n\n            for event in self._play_by_play:\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_on\") is not None\n                ):\n                    players_on = [\n                        x\n                        for x in event[\"change_on_jersey\"].split(\", \")\n                        if x == player[\"team_jersey\"]\n                    ]\n\n                    if len(players_on) &gt; 0:\n                        counter += 1\n\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_off\") is not None\n                ):\n                    players_off = [\n                        x\n                        for x in event[\"change_off_jersey\"].split(\", \")\n                        if x == player[\"team_jersey\"]\n                    ]\n\n                    if len(players_off) &gt; 0:\n                        counter -= 1\n\n                if counter &gt; 0:\n                    forwards = [\"L\", \"C\", \"R\"]\n\n                    if player[\"team_venue\"] == \"HOME\":\n                        if player[\"position\"] in forwards:\n                            event[\"home_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_forwards\"].append(player[\"player_name\"])\n                            event[\"home_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"home_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_defense\"].append(player[\"player_name\"])\n                            event[\"home_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"home_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_goalie\"].append(player[\"player_name\"])\n\n                    else:\n                        if player[\"position\"] in forwards:\n                            event[\"away_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_forwards\"].append(player[\"player_name\"])\n                            event[\"away_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"away_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_defense\"].append(player[\"player_name\"])\n                            event[\"away_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"away_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_goalie\"].append(player[\"player_name\"])\n\n        # Instantiating shapely objects for high-danger and danger area computations\n\n        high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n        high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n        danger1 = Polygon(\n            np.array(\n                [\n                    [89, 9],\n                    [89, -9],\n                    [69, -22],\n                    [54, -22],\n                    [54, -9],\n                    [44, -9],\n                    [44, 9],\n                    [54, 9],\n                    [54, 22],\n                    [69, 22],\n                ]\n            )\n        )\n        danger2 = Polygon(\n            np.array(\n                [\n                    [-89, 9],\n                    [-89, -9],\n                    [-69, -22],\n                    [-54, -22],\n                    [-54, -9],\n                    [-44, -9],\n                    [-44, 9],\n                    [-54, 9],\n                    [-54, 22],\n                    [-69, 22],\n                ]\n            )\n        )\n\n        final_events = []\n\n        for idx, event in enumerate(self._play_by_play):\n            if idx == 0:\n                event_length_idx = 0\n\n            else:\n                event_length_idx = idx - 1\n\n            new_values = {\n                \"event_idx\": idx + 1,\n                \"event_length\": event[\"game_seconds\"]\n                - self._play_by_play[event_length_idx][\"game_seconds\"],\n                \"home_on_eh_id\": event[\"home_forwards_eh_id\"]\n                + event[\"home_defense_eh_id\"],\n                \"home_on_api_id\": event[\"home_forwards_api_id\"]\n                + event[\"home_defense_api_id\"],\n                \"home_on\": event[\"home_forwards\"] + event[\"home_defense\"],\n                \"home_on_positions\": event[\"home_forwards_positions\"]\n                + event[\"home_defense_positions\"],\n                \"away_on_eh_id\": event[\"away_forwards_eh_id\"]\n                + event[\"away_defense_eh_id\"],\n                \"away_on_api_id\": event[\"away_forwards_api_id\"]\n                + event[\"away_defense_api_id\"],\n                \"away_on\": event[\"away_forwards\"] + event[\"away_defense\"],\n                \"away_on_positions\": event[\"away_forwards_positions\"]\n                + event[\"away_defense_positions\"],\n            }\n\n            event.update(new_values)\n\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"is_home\"] = 1\n\n            else:\n                event[\"is_home\"] = 0\n\n            if event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"is_away\"] = 1\n\n            else:\n                event[\"is_away\"] = 0\n\n            if (\n                event.get(\"coords_x\") is not None\n                and event.get(\"coords_x\") != \"\"\n                and event.get(\"coords_y\") is not None\n                and event.get(\"coords_y\") != \"\"\n            ):\n                # Fixing event angle and distance for errors\n\n                is_fenwick = event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                is_long_distance = (\n                    event[\"pbp_distance\"] is not None\n                    and event.get(\"pbp_distance\", 0) &gt; 89\n                )\n                x_is_neg = event.get(\"coords_x\", 0) &lt; 0\n                x_is_pos = event.get(\"coords_x\", 0) &gt; 0\n                bad_shots = event.get(\"shot_type\", \"WRIST\") not in [\n                    \"TIP-IN\",\n                    \"WRAP-AROUND\",\n                    \"WRAP\",\n                    \"DEFLECTED\",\n                    \"BAT\",\n                    \"BETWEEN LEGS\",\n                    \"POKE\",\n                ]\n\n                zone_cond = event.get(\"zone\") != \"OFF\"\n\n                x_is_neg_conds = (\n                    is_fenwick &amp; is_long_distance &amp; x_is_neg &amp; bad_shots &amp; zone_cond\n                )\n\n                x_is_pos_conds = (\n                    is_fenwick &amp; is_long_distance &amp; x_is_pos &amp; bad_shots &amp; zone_cond\n                )\n\n                if x_is_neg_conds is True:\n                    event[\"event_distance\"] = (\n                        (abs(event[\"coords_x\"]) + 89) ** 2 + event[\"coords_y\"] ** 2\n                    ) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(\n                                np.arctan(\n                                    event[\"coords_y\"] / (abs(event[\"coords_x\"] + 89))\n                                )\n                            )\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                elif x_is_pos_conds is True:\n                    event[\"event_distance\"] = (\n                        (event[\"coords_x\"] + 89) ** 2 + event[\"coords_y\"] ** 2\n                    ) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(np.arctan(event[\"coords_y\"] / (event[\"coords_x\"] + 89)))\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                else:\n                    event[\"event_distance\"] = (\n                        (89 - abs(event[\"coords_x\"])) ** 2 + event[\"coords_y\"] ** 2\n                    ) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(\n                                np.arctan(\n                                    event[\"coords_y\"] / (89 - abs(event[\"coords_x\"]))\n                                )\n                            )\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            if (\n                event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                and event.get(\"zone\") == \"DEF\"\n                and event.get(\"event_distance\", 0) &lt;= 64\n            ):\n                event[\"zone\"] = \"OFF\"\n\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                if event.get(\"zone\") == \"OFF\":\n                    if (\n                        event.get(\"coords_x\") is not None\n                        and event.get(\"coords_y\") is not None\n                    ):\n                        shot_coords = Point(event[\"coords_x\"], event[\"coords_y\"])\n\n                        if danger1.contains(shot_coords) or danger2.contains(\n                            shot_coords\n                        ):\n                            event[\"danger\"] = 1\n\n                        else:\n                            event[\"danger\"] = 0\n\n                        if high_danger1.contains(shot_coords) or high_danger2.contains(\n                            shot_coords\n                        ):\n                            event[\"high_danger\"] = 1\n\n                            event[\"danger\"] = 0\n\n                        else:\n                            event[\"high_danger\"] = 0\n\n                    else:\n                        event[\"high_danger\"] = 0\n\n                        event[\"danger\"] = 0\n\n                else:\n                    event[\"high_danger\"] = 0\n\n                    event[\"danger\"] = 0\n\n            event[\"home_skaters\"] = len(event[\"home_on_eh_id\"])\n\n            event[\"away_skaters\"] = len(event[\"away_on_eh_id\"])\n\n            if not event[\"home_goalie\"]:\n                home_on = \"E\"\n\n            else:\n                home_on = event[\"home_skaters\"]\n\n            if not event[\"away_goalie\"]:\n                away_on = \"E\"\n\n            else:\n                away_on = event[\"away_skaters\"]\n\n            event[\"strength_state\"] = f\"{home_on}v{away_on}\"\n\n            if \"PENALTY SHOT\" in event[\"description\"]:\n                event[\"strength_state\"] = \"1v0\"\n\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                new_values = {\n                    \"strength_state\": f\"{home_on}v{away_on}\",\n                    \"score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"score_diff\": event[\"home_score_diff\"],\n                    \"event_team_skaters\": event[\"home_skaters\"],\n                    \"teammates_eh_id\": event[\"home_on_eh_id\"],\n                    \"teammates_api_id\": event[\"home_on_api_id\"],\n                    \"teammates\": event[\"home_on\"],\n                    \"teammates_positions\": event[\"home_on_positions\"],\n                    \"forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"forwards\": event[\"home_forwards\"],\n                    \"defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"defense_api_id\": event[\"home_defense_api_id\"],\n                    \"defense\": event[\"home_defense\"],\n                    \"own_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"own_goalie\": event[\"home_goalie\"],\n                    \"opp_strength_state\": f\"{away_on}v{home_on}\",\n                    \"opp_score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"opp_score_diff\": event[\"away_score_diff\"],\n                    \"opp_team_skaters\": event[\"away_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"away_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"away_on_api_id\"],\n                    \"opp_team_on\": event[\"away_on\"],\n                    \"opp_forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"opp_forwards\": event[\"away_forwards\"],\n                    \"opp_defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"away_defense_api_id\"],\n                    \"opp_defense\": event[\"away_defense\"],\n                    \"opp_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"opp_goalie\": event[\"away_goalie\"],\n                }\n\n                event.update(new_values)\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                new_values = {\n                    \"strength_state\": f\"{away_on}v{home_on}\",\n                    \"score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"score_diff\": event[\"away_score_diff\"],\n                    \"event_team_skaters\": event[\"away_skaters\"],\n                    \"teammates_eh_id\": event[\"away_on_eh_id\"],\n                    \"teammates_api_id\": event[\"away_on_api_id\"],\n                    \"teammates\": event[\"away_on\"],\n                    \"teammates_positions\": event[\"away_on_positions\"],\n                    \"forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"forwards\": event[\"away_forwards\"],\n                    \"defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"defense_api_id\": event[\"away_defense_api_id\"],\n                    \"defense\": event[\"away_defense\"],\n                    \"own_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"own_goalie\": event[\"away_goalie\"],\n                    \"opp_strength_state\": f\"{home_on}v{away_on}\",\n                    \"opp_score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"opp_score_diff\": event[\"home_score_diff\"],\n                    \"opp_team_skaters\": event[\"home_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"home_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"home_on_api_id\"],\n                    \"opp_team_on\": event[\"home_on\"],\n                    \"opp_team_on_positions\": event[\"home_on_positions\"],\n                    \"opp_forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"opp_forwards\": event[\"home_forwards\"],\n                    \"opp_defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"home_defense_api_id\"],\n                    \"opp_defense\": event[\"home_defense\"],\n                    \"opp_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"opp_goalie\": event[\"home_goalie\"],\n                }\n\n                event.update(new_values)\n\n            if (event[\"home_skaters\"] &gt; 5 and event[\"home_goalie\"] != []) or (\n                event[\"away_skaters\"] &gt; 5 and event[\"away_goalie\"] != []\n            ):\n                event[\"strength_state\"] = \"ILLEGAL\"\n\n                event[\"opp_strength_state\"] = \"ILLEGAL\"\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                event[\"strength_state\"] = \"1v0\"\n\n            if event[\"event\"] == \"CHANGE\":\n                faceoffs = [\n                    x\n                    for x in self._play_by_play\n                    if (\n                        x[\"event\"] == \"FAC\"\n                        and x[\"game_seconds\"] == event[\"game_seconds\"]\n                        and x[\"period\"] == event[\"period\"]\n                    )\n                ]\n\n                if len(faceoffs) &gt; 0:\n                    game_seconds_list = [x[\"game_seconds\"] for x in self._play_by_play]\n\n                    max_seconds = max(game_seconds_list)\n\n                    bad_seconds = [0, 1200, 2400, 3600, 3900, max_seconds]\n\n                    if event[\"game_seconds\"] not in bad_seconds:\n                        event[\"coords_x\"] = faceoffs[0].get(\"coords_x\", \"\")\n\n                        event[\"coords_y\"] = faceoffs[0].get(\"coords_y\", \"\")\n\n                        if event[\"event_team\"] == faceoffs[0][\"event_team\"]:\n                            event[\"zone_start\"] = faceoffs[0][\"zone\"]\n\n                        else:\n                            zones = {\"OFF\": \"DEF\", \"DEF\": \"OFF\", \"NEU\": \"NEU\"}\n\n                            event[\"zone_start\"] = zones[faceoffs[0][\"zone\"]]\n\n                else:\n                    event[\"zone_start\"] = \"OTF\"\n\n            event_dummies = [\n                \"block\",\n                \"change\",\n                \"chl\",\n                \"fac\",\n                \"give\",\n                \"goal\",\n                \"hit\",\n                \"miss\",\n                \"penl\",\n                \"shot\",\n                \"stop\",\n                \"take\",\n            ]\n\n            for event_dummy in event_dummies:\n                if event[\"event\"].lower() == event_dummy:\n                    event[event_dummy] = 1\n\n                else:\n                    event[event_dummy] = 0\n\n            if event[\"event\"] == \"GOAL\" or event[\"event\"] == \"SHOT\":\n                event[\"shot\"] = 1\n\n            fenwick_events = [\"SHOT\", \"GOAL\", \"MISS\"]\n\n            if event[\"event\"] in fenwick_events:\n                event[\"fenwick\"] = 1\n\n            else:\n                event[\"fenwick\"] = 0\n\n            corsi_events = fenwick_events + [\"BLOCK\"]\n\n            if event[\"event\"] in corsi_events:\n                event[\"corsi\"] = 1\n\n            else:\n                event[\"corsi\"] = 0\n\n            if event[\"event\"] == \"FAC\":\n                if event[\"zone\"] == \"OFF\":\n                    event[\"ozf\"] = 1\n\n                else:\n                    event[\"ozf\"] = 0\n\n                if event[\"zone\"] == \"DEF\":\n                    event[\"dzf\"] = 1\n\n                else:\n                    event[\"dzf\"] = 0\n\n                if event[\"zone\"] == \"NEU\":\n                    event[\"nzf\"] = 1\n\n                else:\n                    event[\"nzf\"] = 0\n\n            else:\n                event[\"ozf\"] = 0\n                event[\"nzf\"] = 0\n                event[\"dzf\"] = 0\n\n            if event[\"event\"] == \"CHANGE\" and event.get(\"zone_start\") is not None:\n                if event[\"zone_start\"] == \"OFF\":\n                    event[\"ozc\"] = 1\n\n                else:\n                    event[\"ozc\"] = 0\n\n                if event[\"zone_start\"] == \"DEF\":\n                    event[\"dzc\"] = 1\n\n                else:\n                    event[\"dzc\"] = 0\n\n                if event[\"zone_start\"] == \"NEU\":\n                    event[\"nzc\"] = 1\n\n                else:\n                    event[\"nzc\"] = 0\n\n                if event[\"zone_start\"] == \"OTF\":\n                    event[\"otf\"] = 1\n\n                else:\n                    event[\"otf\"] = 0\n\n            else:\n                event[\"ozc\"] = 0\n                event[\"nzc\"] = 0\n                event[\"dzc\"] = 0\n                event[\"otf\"] = 0\n\n            if event[\"event\"] == \"PENL\":\n                penalty_lengths = [0, 2, 4, 5, 10]\n\n                for penalty_length in penalty_lengths:\n                    if event.get(\"penalty_length\") == penalty_length:\n                        event[f\"pen{penalty_length}\"] = 1\n\n                    else:\n                        event[f\"pen{penalty_length}\"] = 0\n\n            else:\n                event[\"pen0\"] = 0\n                event[\"pen2\"] = 0\n                event[\"pen4\"] = 0\n                event[\"pen5\"] = 0\n                event[\"pen10\"] = 0\n\n            final_events.append(PBPEvent.model_validate(event).model_dump())\n\n        self._play_by_play = final_events\n\n    @property\n    def play_by_play(self) -&gt; list:\n        \"\"\"List of events in play-by-play. Each event is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).play_by_play_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.play_by_play\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._html_events is None:\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        if self._changes is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n            self._munge_changes()\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._rosters is None:\n            self._combine_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        if self._play_by_play is None:\n            self._combine_events()\n            self._munge_play_by_play()\n\n        return self._play_by_play\n\n    @property\n    def play_by_play_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.play_by_play_df\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._html_events is None:\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        if self._changes is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n            self._munge_changes()\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._rosters is None:\n            self._combine_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        if self._play_by_play is None:\n            self._combine_events()\n            self._munge_play_by_play()\n\n        return pd.DataFrame(self._play_by_play).fillna(np.nan)\n\n    def _combine_rosters(self) -&gt; None:\n        \"\"\"Method to combine API and HTML rosters. Updates self._rosters\"\"\"\n\n        html_rosters = self._html_rosters\n        api_rosters = self._api_rosters\n\n        api_rosters_dict = {x[\"team_jersey\"]: x for x in api_rosters}\n\n        players = []\n\n        for player in html_rosters:\n            if player[\"status\"] == \"ACTIVE\":\n                api_info = api_rosters_dict[player[\"team_jersey\"]]\n\n            else:\n                api_info = {\n                    \"api_id\": None,\n                    \"headshot_url\": None,\n                }\n\n            player_info = {}\n\n            player_info.update(player)\n\n            new_values = {\n                \"api_id\": api_info[\"api_id\"],\n                \"headshot_url\": api_info[\"headshot_url\"],\n            }\n\n            player_info.update(new_values)\n\n            players.append(RosterPlayer.model_validate(player_info).model_dump())\n\n        self._rosters = players\n\n    @property\n    def rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API &amp; HTML endpoints. Returns a dictionary of players with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.rosters\n\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._rosters is None:\n            self._combine_rosters()\n\n        return self._rosters\n\n    @property\n    def rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"\n        Pandas Dataframe of players scraped from API &amp; HTML endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.rosters_df\n\n        \"\"\"\n\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._combine_rosters()\n\n        return pd.DataFrame(self._rosters).fillna(np.nan)\n\n    def _scrape_shifts(self) -&gt; None:\n        \"\"\"Method for scraping shifts from HTML endpoint. Updates self._shifts\"\"\"\n\n        # Creating basic information from game ID\n        season = self.season\n        game_session = self.session\n        game_id = self.game_id\n\n        # This is the list for collecting all the game information for the end\n\n        game_list = []\n\n        # Dictionary of urls for scraping\n\n        urls_dict = {\n            \"HOME\": self.home_shifts_endpoint,\n            \"AWAY\": self.away_shifts_endpoint,\n        }\n\n        # Iterating through the url dictionary\n\n        for team_venue, url in urls_dict.items():\n            response = requests.get(url)\n\n            soup = BeautifulSoup(\n                response.content.decode(\"ISO-8859-1\"),\n                \"lxml\",\n                multi_valued_attributes=None,\n            )\n\n            # Getting team names from the HTML Data\n\n            team_name = soup.find(\n                \"td\", {\"align\": \"center\", \"class\": \"teamHeading + border\"}\n            )\n\n            # Converting team names to proper format\n\n            if team_name is None:\n                continue\n\n            team_name = unidecode(team_name.get_text())\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            elif \"CANADIENS\" in team_name:\n                team_name = \"MONTREAL CANADIENS\"\n\n            # Getting players from the HTML data\n\n            players = soup.find_all(\n                \"td\", {\"class\": [\"playerHeading + border\", \"lborder + bborder\"]}\n            )\n\n            # Creating a dictionary to collect the players' information\n\n            players_dict = {}\n\n            # Iterating through the players\n\n            for player in players:\n                # Getting player's data\n\n                data = player.get_text()\n\n                # If there is a name in the data, get the information\n\n                if \", \" in data:\n                    name = data.split(\",\", 1)\n\n                    jersey = name[0].split(\" \")[0].strip()\n\n                    last_name = name[0].split(\" \", 1)[1].strip()\n\n                    first_name = re.sub(r\"\\(\\s?(.+)\\)\", \"\", name[1]).strip()\n\n                    full_name = f\"{first_name} {last_name}\"\n\n                    if full_name == \" \":\n                        continue\n\n                    new_values = {\n                        full_name: {\n                            \"player_name\": full_name,\n                            \"jersey\": jersey,\n                            \"shifts\": [],\n                        }\n                    }\n\n                    players_dict.update(new_values)\n\n                # If there is not a name it is likely because these are shift information, not player information\n\n                else:\n                    if full_name == \" \":\n                        continue\n\n                    # Extend the player's shift information with the shift data\n\n                    players_dict[full_name][\"shifts\"].extend([data])\n\n            # Iterating through the player's dictionary,\n            # which has a key of the player's name and an array of shift-arrays\n\n            for player, shifts in players_dict.items():\n                # Getting the number of shifts\n\n                length = int(len(np.array(shifts[\"shifts\"])) / 5)\n\n                # Reshaping the shift data into fields and values\n\n                for number, shift in enumerate(\n                    np.array(shifts[\"shifts\"]).reshape(length, 5)\n                ):\n                    # Adding header values to the shift data\n\n                    headers = [\n                        \"shift_count\",\n                        \"period\",\n                        \"shift_start\",\n                        \"shift_end\",\n                        \"duration\",\n                    ]\n\n                    # Creating a dictionary from the headers and the shift data\n\n                    shift_dict = dict(zip(headers, shift.flatten()))\n\n                    # Adding other data to the shift dictionary\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"team_name\": team_name,\n                        \"team\": team_codes[team_name],\n                        \"team_venue\": team_venue.upper(),\n                        \"player_name\": unidecode(shifts[\"player_name\"]).upper(),\n                        \"team_jersey\": f\"{team_codes[team_name]}{shifts['jersey']}\",\n                        \"jersey\": int(shifts[\"jersey\"]),\n                        \"period\": int(\n                            shift_dict[\"period\"].replace(\"OT\", \"4\").replace(\"SO\", \"5\")\n                        ),\n                        \"shift_count\": int(shift_dict[\"shift_count\"]),\n                        \"shift_start\": unidecode(shift_dict[\"shift_start\"]).strip(),\n                        \"start_time\": unidecode(shift_dict[\"shift_start\"])\n                        .strip()\n                        .split(\"/\", 1)[0]\n                        .strip(),\n                        \"shift_end\": unidecode(shift_dict[\"shift_end\"]).strip(),\n                        \"end_time\": unidecode(shift_dict[\"shift_end\"])\n                        .strip()\n                        .split(\"/\", 1)[0]\n                        .strip(),\n                    }\n\n                    shift_dict.update(new_values)\n\n                    # Appending the shift dictionary to the list of shift dictionaries\n\n                    if shift_dict[\"start_time\"] != \"31:23\":\n                        game_list.append(shift_dict)\n\n        self._shifts = game_list\n\n    def _munge_shifts(self) -&gt; None:\n        \"\"\"Method to munge list of shifts from HTML endpoint. Updates self._shifts\"\"\"\n\n        season = self.season\n        game_session = self.session\n\n        # Iterating through the lists of shifts\n\n        roster = self._html_rosters\n\n        actives = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"ACTIVE\"}\n        scratches = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"SCRATCH\"}\n\n        if self.game_id == 2020020860:\n            new_shifts = {\n                \"DAL29\": 5,\n                \"CHI60\": 4,\n                \"DAL14\": 27,\n                \"DAL21\": 22,\n                \"DAL3\": 28,\n                \"CHI5\": 27,\n                \"CHI88\": 26,\n                \"CHI12\": 26,\n            }\n\n            for new_player, shift_count in new_shifts.items():\n                new_player_info = actives[new_player]\n\n                new_goalies = [\"DAL29\", \"CHI60\"]\n\n                if new_player in new_goalies:\n                    shift_start = \"0:00 / 5:00\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"4:30\"\n                    start_time = \"0:00\"\n                    end_time = \"4:30\"\n\n                new_players = [\"DAL14\", \"DAL21\", \"DAL3\", \"CHI5\"]\n\n                if new_player in new_players:\n                    shift_start = \"3:47 / 1:13\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:43\"\n                    start_time = \"3:47\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI88\":\n                    shift_start = \"3:51 / 1:09\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:39\"\n                    start_time = \"3:51\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI12\":\n                    shift_start = \"4:14 / 0:46\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:16\"\n                    start_time = \"4:14\"\n                    end_time = \"4:30\"\n\n                new_shift = {\n                    \"shift_count\": shift_count,\n                    \"period\": 4,\n                    \"shift_start\": shift_start,\n                    \"shift_end\": shift_end,\n                    \"duration\": duration,\n                    \"season\": 20202021,\n                    \"session\": \"R\",\n                    \"game_id\": self.game_id,\n                    \"team_name\": new_player_info[\"team_name\"],\n                    \"team\": new_player_info[\"team\"],\n                    \"team_venue\": new_player_info[\"team_venue\"],\n                    \"player_name\": new_player_info[\"player_name\"],\n                    \"team_jersey\": new_player_info[\"team_jersey\"],\n                    \"jersey\": new_player_info[\"jersey\"],\n                    \"start_time\": start_time,\n                    \"end_time\": end_time,\n                }\n\n                self._shifts.append(new_shift)\n\n        for shift in self._shifts:\n            # Get active players and store them in a new dictionary with team jersey as key\n            # and other info as a value-dictionary\n\n            shift[\"eh_id\"] = actives.get(\n                shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"])\n            )[\"eh_id\"]\n\n            shift[\"position\"] = actives.get(\n                shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"])\n            )[\"position\"]\n\n            # Replacing some player names\n\n            shift[\"player_name\"] = (\n                shift[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            shift[\"player_name\"] = correct_names_dict.get(\n                shift[\"player_name\"], shift[\"player_name\"]\n            )\n\n            # Adding seconds columns\n\n            cols = [\"start_time\", \"end_time\", \"duration\"]\n\n            for col in cols:\n                time_split = shift[col].split(\":\", 1)\n\n                # Sometimes the shift value can be blank, if it is, we'll skip the field and fix later\n\n                try:\n                    shift[f\"{col}_seconds\"] = 60 * int(time_split[0]) + int(\n                        time_split[1]\n                    )\n\n                except ValueError:\n                    continue\n\n            # Fixing end time if it is blank or empty\n\n            if shift[\"end_time\"] == \" \" or shift[\"end_time\"] == \"\":\n                # Calculating end time based on duration seconds\n\n                shift[\"end_time_seconds\"] = (\n                    shift[\"start_time_seconds\"] + shift[\"duration_seconds\"]\n                )\n\n                # Creating end time based on time delta\n\n                shift[\"end_time\"] = str(\n                    timedelta(seconds=shift[\"end_time_seconds\"])\n                ).split(\":\", 1)[1]\n\n            # If the shift start is after the shift end, we need to fix the error\n\n            if shift[\"start_time_seconds\"] &gt; shift[\"end_time_seconds\"]:\n                # Creating new values based on game session and period\n\n                if shift[\"period\"] &lt; 4:\n                    # Setting the end time\n\n                    shift[\"end_time\"] = \"20:00\"\n\n                    # Setting the end time in seconds\n\n                    shift[\"end_time_seconds\"] = 1200\n\n                    # Setting the shift end\n\n                    shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # Setting duration and duration in seconds\n\n                    shift[\"duration_seconds\"] = (\n                        shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n                    )\n\n                    shift[\"duration\"] = str(\n                        timedelta(seconds=shift[\"duration_seconds\"])\n                    ).split(\":\", 1)[1]\n\n                else:\n                    if game_session == \"P\":\n                        total_seconds = 1200\n\n                    else:\n                        total_seconds = 300\n\n                    # Need to get the end period to get the end time in seconds\n\n                    max_period = max(\n                        [\n                            int(shift[\"period\"])\n                            for shift in self._shifts\n                            if shift[\"period\"] != \" \"\n                        ]\n                    )\n\n                    # Getting the end time in seconds for the final period\n\n                    max_seconds = max(\n                        [\n                            shift[\"end_time_seconds\"]\n                            for shift in self._shifts\n                            if \"end_time_seconds\" in shift.keys()\n                            and shift[\"period\"] == max_period\n                        ]\n                    )\n\n                    shift[\"end_time_seconds\"] = max_seconds\n\n                    # Setting end time\n\n                    end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                    # Setting remainder time\n\n                    remainder = str(\n                        timedelta(seconds=(total_seconds - max_seconds))\n                    ).split(\":\", 1)[1]\n\n                    shift[\"end_time\"] = end_time\n\n                    shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n            # Setting goalie values\n\n            if shift[\"position\"] == \"G\":\n                shift[\"goalie\"] = 1\n\n            else:\n                shift[\"goalie\"] = 0\n\n            # Setting home and away values\n\n            if shift[\"team_venue\"] == \"HOME\":\n                shift[\"is_home\"] = 1\n\n                shift[\"is_away\"] = 0\n\n            else:\n                shift[\"is_home\"] = 0\n\n                shift[\"is_away\"] = 1\n\n        periods = np.unique([x[\"period\"] for x in self._shifts]).tolist()\n\n        # Setting list of teams to iterate through while iterating through the periods\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            # Getting max seconds for the period\n\n            max_seconds = max(\n                [\n                    int(x[\"end_time_seconds\"])\n                    for x in self._shifts\n                    if x[\"period\"] == period\n                ]\n            )\n\n            # Iterating through home and away teams\n\n            for team in teams:\n                # Getting the team's goalies for the game\n\n                team_goalies = [\n                    x\n                    for x in self._shifts\n                    if x[\"goalie\"] == 1 and x[\"team_venue\"] == team\n                ]\n\n                # Getting the goalies for the period\n\n                goalies = [\n                    x\n                    for x in self._shifts\n                    if x[\"goalie\"] == 1\n                    and x[\"team_venue\"] == team\n                    and x[\"period\"] == period\n                ]\n\n                # If there are no goalies changing during the period, we need to add them\n\n                if len(goalies) &lt; 1:\n                    if period == 1:\n                        if len(team_goalies) &lt; 1:\n                            first_goalie = {}\n\n                            starter = [\n                                x\n                                for x in actives.values()\n                                if x[\"position\"] == \"G\"\n                                and x[\"team_venue\"] == team\n                                and x[\"starter\"] == 1\n                            ][0]\n\n                            new_values = {\n                                \"season\": season,\n                                \"session\": game_session,\n                                \"game_id\": self.game_id,\n                                \"period\": period,\n                                \"team_venue\": team,\n                                \"goalie\": 1,\n                                \"shift_count\": 1,\n                            }\n\n                            new_values.update(starter)\n\n                            if team == \"HOME\":\n                                new_values.update({\"is_home\": 1, \"is_away\": 0})\n\n                            else:\n                                new_values.update({\"is_away\": 1, \"is_home\": 0})\n\n                            first_goalie.update(new_values)\n\n                        else:\n                            first_goalie = team_goalies[0]\n\n                        # Initial dictionary is set using data from the first goalie to appear\n\n                        goalie_shift = dict(first_goalie)\n\n                    else:\n                        # Initial dictionary is set using data from the pervious goalie to appear\n\n                        prev_goalie = [\n                            x for x in team_goalies if x[\"period\"] == (period - 1)\n                        ][-1]\n\n                        goalie_shift = dict(prev_goalie)\n\n                    # Setting goalie shift number so we can identify later\n\n                    goalie_shift[\"number\"] = 0\n\n                    # Setting the period for the current period\n\n                    goalie_shift[\"period\"] = period\n\n                    # Setting the start time\n\n                    goalie_shift[\"start_time\"] = \"0:00\"\n\n                    # Setting the start time in seconds\n\n                    goalie_shift[\"start_time_seconds\"] = 0\n\n                    # If during regular time\n\n                    if period &lt; 4:\n                        # Setting shift start value\n\n                        goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                        if max_seconds &lt; 1200:\n                            # Setting end time value\n\n                            goalie_shift[\"end_time\"] = \"20:00\"\n\n                            # Setting end time in seconds\n\n                            goalie_shift[\"end_time_seconds\"] = 1200\n\n                            # Setting the duration, assuming they were out there the whole time\n\n                            goalie_shift[\"duration\"] = \"20:00\"\n\n                            # Setting the duration in seconds, assuming they were out there the whole time\n\n                            goalie_shift[\"duration_seconds\"] = 1200\n\n                            # Setting the shift end value\n\n                            goalie_shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # If the period is greater than 3\n\n                    else:\n                        # Need to account for whether regular season or playoffs\n\n                        if game_session == \"P\":\n                            goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                            total_seconds = 1200\n\n                        else:\n                            goalie_shift[\"shift_start\"] = \"0:00 / 5:00\"\n\n                            total_seconds = 300\n\n                        if max_seconds &lt; total_seconds:\n                            # Getting end time\n\n                            end_time = str(timedelta(seconds=max_seconds)).split(\n                                \":\", 1\n                            )[1]\n\n                            # Getting remainder time\n\n                            remainder = str(\n                                timedelta(seconds=(total_seconds - max_seconds))\n                            ).split(\":\", 1)[1]\n\n                            # Setting values\n\n                            goalie_shift[\"end_time_seconds\"] = max_seconds\n\n                            goalie_shift[\"end_time\"] = end_time\n\n                            goalie_shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                    # Appending the new goalie shift to the game list\n\n                    self._shifts.append(goalie_shift)\n\n            # Iterating through the shifts\n\n            for shift in self._shifts:\n                # Fixing goalie errors\n\n                if (\n                    shift[\"goalie\"] == 1\n                    and shift[\"period\"] == period\n                    and shift[\"shift_end\"] == \"0:00 / 0:00\"\n                ):\n                    if period &lt; 4:\n                        shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                        shift[\"end_time\"] = \"20:00\"\n\n                        shift[\"end_time_seconds\"] = 1200\n\n                    else:\n                        if game_session == \"R\":\n                            total_seconds = 300\n\n                        else:\n                            total_seconds = 1200\n\n                        end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                        remainder = str(\n                            timedelta(seconds=(total_seconds - max_seconds))\n                        ).split(\":\", 1)[1]\n\n                        shift[\"end_time_seconds\"] = max_seconds\n\n                        shift[\"end_time\"] = end_time\n\n                        shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n        self._shifts = [\n            PlayerShift.model_validate(shift).model_dump() for shift in self._shifts\n        ]\n\n    @property\n    def shifts(self) -&gt; list:\n        \"\"\"List of shifts scraped from HTML endpoint. Returns a dictionary of player - shifts with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).shifts_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.shifts\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._shifts is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return self._shifts\n\n    @property\n    def shifts_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.shifts_df\n\n        \"\"\"\n\n        if self._shifts is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return pd.DataFrame(self._shifts).fillna(np.nan)\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_api_events","title":"_munge_api_events","text":"<pre><code>_munge_api_events()\n</code></pre> <p>Method to munge events from API endpoint. Updates self._api_events</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_api_events(self) -&gt; None:\n    \"\"\"Method to munge events from API endpoint. Updates self._api_events\"\"\"\n\n    self._api_events = [x for x in self.api_response[\"plays\"]]\n\n    rosters = {x[\"api_id\"]: x for x in self._api_rosters}\n\n    teams_dict = {\n        self.home_team[\"id\"]: self.home_team[\"abbrev\"],\n        self.away_team[\"id\"]: self.away_team[\"abbrev\"],\n    }\n\n    event_list = []\n\n    for event in self._api_events:\n        time_split = event[\"timeInPeriod\"].split(\":\")\n\n        period = int(event[\"periodDescriptor\"][\"number\"])\n        period_type = event[\"periodDescriptor\"][\"periodType\"]\n        period_seconds = (int(time_split[0]) * 60) + int(time_split[1])\n\n        if self.session == \"R\" and period == 5:\n            game_seconds = 3900\n\n        else:\n            game_seconds = ((period - 1) * 1200) + period_seconds\n\n        event_info = {}\n\n        new_values = {\n            \"season\": self.season,\n            \"session\": self.session,\n            \"game_id\": self.game_id,\n            \"event_idx\": event[\"sortOrder\"],\n            \"period\": period,\n            \"period_type\": period_type,\n            \"period_seconds\": period_seconds,\n            \"game_seconds\": game_seconds,\n            \"event\": event[\"typeDescKey\"],\n            \"event_code\": event[\"typeCode\"],\n            \"strength\": event.get(\"situationCode\"),\n            \"home_team_defending_side\": event.get(\"homeTeamDefendingSide\"),\n        }\n\n        event_info.update(new_values)\n\n        if event_info[\"event\"] == \"period-start\":\n            event_info[\"event\"] = \"PSTR\"\n\n        if event_info[\"event\"] == \"period-end\":\n            event_info[\"event\"] = \"PEND\"\n\n        if event_info[\"event\"] == \"game-end\":\n            event_info[\"event\"] = \"GEND\"\n\n        if event_info[\"event\"] == \"shootout-complete\":\n            event_info[\"event\"] = \"SOC\"\n\n        if event.get(\"details\"):\n            new_values = {\n                \"event_team\": teams_dict.get(\n                    event[\"details\"].get(\"eventOwnerTeamId\")\n                ),\n                \"coords_x\": event[\"details\"].get(\"xCoord\"),\n                \"coords_y\": event[\"details\"].get(\"yCoord\"),\n                \"zone\": event[\"details\"].get(\"zoneCode\"),\n                \"event_team_id\": event[\"details\"].get(\"eventOwnerTeamId\"),\n            }\n\n            event_info.update(new_values)\n\n            if event_info[\"event\"] == \"faceoff\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"winningPlayerId\"]\n                event_info[\"player_1_type\"] = \"WINNER\"\n                event_info[\"player_2_api_id\"] = event[\"details\"][\"losingPlayerId\"]\n                event_info[\"player_2_type\"] = \"LOSER\"\n\n                event_info[\"event\"] = \"FAC\"\n\n            if event_info[\"event\"] == \"stoppage\":\n                event_info[\"stoppage_reason\"] = (\n                    event[\"details\"][\"reason\"].replace(\"-\", \" \").upper()\n                )\n                event_info[\"stoppage_reason_secondary\"] = (\n                    event[\"details\"]\n                    .get(\"secondaryReason\", \"\")\n                    .replace(\"-\", \" \")\n                    .upper()\n                )\n\n                event_info[\"event\"] = \"STOP\"\n\n            if event_info[\"event\"] == \"hit\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"hittingPlayerId\"]\n                event_info[\"player_1_type\"] = \"HITTER\"\n                event_info[\"player_2_api_id\"] = event[\"details\"][\"hitteePlayerId\"]\n                event_info[\"player_2_type\"] = \"HITTEE\"\n\n                event_info[\"event\"] = \"HIT\"\n\n            if event_info[\"event\"] == \"giveaway\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                event_info[\"player_1_type\"] = \"GIVER\"\n\n                event_info[\"event\"] = \"GIVE\"\n\n            if event_info[\"event\"] == \"shot-on-goal\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_1_type\"] = \"SHOOTER\"\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                    \"goalieInNetId\", \"EMPTY NET\"\n                )\n                event_info[\"shot_type\"] = (\n                    event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                )\n\n                event_info[\"event\"] = \"SHOT\"\n\n            if event_info[\"event\"] == \"takeaway\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                event_info[\"player_1_type\"] = \"TAKER\"\n\n                event_info[\"event\"] = \"TAKE\"\n\n            if event_info[\"event\"] == \"missed-shot\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_1_type\"] = \"SHOOTER\"\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                    \"goalieInNetId\", \"EMPTY NET\"\n                )\n                event_info[\"shot_type\"] = (\n                    event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                )\n                event_info[\"miss_reason\"] = (\n                    event[\"details\"].get(\"reason\", \"\").replace(\"-\", \" \").upper()\n                )\n\n                event_info[\"event\"] = \"MISS\"\n\n            if event_info[\"event\"] == \"blocked-shot\":\n                event_info[\"player_1_api_id\"] = event[\"details\"].get(\n                    \"blockingPlayerId\"\n                )\n                event_info[\"player_1_type\"] = \"BLOCKER\"\n\n                if event_info[\"player_1_api_id\"] is None:\n                    event_info[\"event_team\"] = \"OTHER\"\n                    event_info[\"player_1\"] = \"REFEREE\"\n                    event_info[\"player_1_api_id\"] = \"REFEREE\"\n                    event_info[\"player_1_eh_id\"] = \"REFEREE\"\n\n                event_info[\"player_2_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_2_type\"] = \"SHOOTER\"\n\n                event_info[\"event\"] = \"BLOCK\"\n\n            if event_info[\"event\"] == \"goal\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"scoringPlayerId\"]\n                event_info[\"player_1_type\"] = \"GOAL SCORER\"\n                event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                    \"assist1PlayerId\"\n                )\n\n                if event_info[\"player_2_api_id\"] is not None:\n                    event_info[\"player_2_type\"] = \"PRIMARY ASSIST\"\n\n                event_info[\"player_3_api_id\"] = event[\"details\"].get(\n                    \"assist2PlayerId\"\n                )\n\n                if event_info[\"player_3_api_id\"] is not None:\n                    event_info[\"player_3_type\"] = \"SECONDARY ASSIST\"\n\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                    \"goalieInNetId\", \"EMPTY NET\"\n                )\n                event_info[\"shot_type\"] = (\n                    event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                )\n\n                event_info[\"event\"] = \"GOAL\"\n\n            if event_info[\"event\"] == \"penalty\":\n                event_info[\"penalty_type\"] = event[\"details\"][\"typeCode\"]\n                event_info[\"penalty_reason\"] = event[\"details\"][\"descKey\"].upper()\n                event_info[\"penalty_duration\"] = event[\"details\"].get(\"duration\")\n\n                if (\n                    event_info[\"penalty_type\"] == \"BEN\"\n                    and event[\"details\"].get(\"committedByPlayerId\") is None\n                ):\n                    event_info[\"player_1\"] = \"BENCH\"\n                    event_info[\"player_1_api_id\"] = \"BENCH\"\n                    event_info[\"player_1_eh_id\"] = \"BENCH\"\n                    event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                        \"servedByPlayerId\"\n                    )\n                    event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                elif (\n                    \"HEAD-COACH\" in event_info[\"penalty_reason\"]\n                    or \"TEAM-STAFF\" in event_info[\"penalty_reason\"]\n                ) and event[\"details\"].get(\"committedByPlayerId\") is None:\n                    event_info[\"player_1\"] = \"BENCH\"\n                    event_info[\"player_1_api_id\"] = \"BENCH\"\n                    event_info[\"player_1_eh_id\"] = \"BENCH\"\n                    event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                        \"servedByPlayerId\"\n                    )\n                    event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                else:\n                    event_info[\"player_1_api_id\"] = event[\"details\"].get(\n                        \"committedByPlayerId\"\n                    )\n                    event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                        \"drawnByPlayerId\"\n                    )\n                    event_info[\"player_2_type\"] = \"DRAWN BY\"\n\n                    if event_info[\"player_2_api_id\"] is None:\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"servedByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    else:\n                        event_info[\"player_3_api_id\"] = event[\"details\"].get(\n                            \"servedByPlayerId\"\n                        )\n                        event_info[\"player_3_type\"] = \"SERVED BY\"\n\n                event_info[\"event\"] = \"PENL\"\n\n            if event_info[\"event\"] == \"delayed-penalty\":\n                event_info[\"event\"] = \"DELPEN\"\n\n            if event_info[\"event\"] == \"failed-shot-attempt\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_1_type\"] = \"SHOOTER\"\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"][\"goalieInNetId\"]\n\n                event_info[\"event\"] = \"MISS\"\n\n        event_info = api_events_fixes(self.game_id, event_info)\n\n        player_cols = [\n            \"player_1_api_id\",\n            \"player_2_api_id\",\n            \"player_3_api_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        for player_col in player_cols:\n            if player_col not in event_info.keys():\n                continue\n\n            elif event_info[player_col] is None:\n                continue\n\n            elif event_info[player_col] == \"BENCH\":\n                continue\n\n            elif event_info[player_col] == \"REFEREE\":\n                continue\n\n            else:\n                player_info = rosters.get(event_info[player_col], {})\n\n                new_cols = {\n                    player_col.replace(\"_api_id\", \"\"): player_info.get(\n                        \"player_name\"\n                    ),\n                    player_col.replace(\"_api_id\", \"_eh_id\"): player_info.get(\n                        \"eh_id\"\n                    ),\n                    player_col.replace(\"_api_id\", \"_team_jersey\"): player_info.get(\n                        \"team_jersey\"\n                    ),\n                    player_col.replace(\"_api_id\", \"_position\"): player_info.get(\n                        \"position\"\n                    ),\n                }\n\n                event_info.update(new_cols)\n\n        event_list.append(event_info)\n\n    final_events = []\n\n    for event in event_list:\n        if \"version\" in event.keys():\n            continue\n\n        other_events = [\n            x\n            for x in event_list\n            if x != event\n            and x[\"event\"] == event[\"event\"]\n            and x[\"game_seconds\"] == event[\"game_seconds\"]\n            and x.get(\"player_1\") is not None\n            and x[\"period\"] == event[\"period\"]\n            and x.get(\"player_1_api_id\") == event.get(\"player_1_api_id\")\n        ]\n\n        version = 1\n\n        event[\"version\"] = 1\n\n        if len(other_events) &gt; 0:\n            for idx, other_event in enumerate(other_events):\n                if \"version\" not in other_event.keys():\n                    version += 1\n\n                    other_event[\"version\"] = version\n\n        final_events.append(APIEvent.model_validate(event).model_dump())\n\n    self._api_events = final_events\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_api_rosters","title":"_munge_api_rosters","text":"<pre><code>_munge_api_rosters()\n</code></pre> <p>Method to munge list of players from API  endpoint. Updates self._api_rosters</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_api_rosters(self) -&gt; None:\n    \"\"\"Method to munge list of players from API  endpoint. Updates self._api_rosters\"\"\"\n\n    players = []\n\n    team_info = {\n        self.home_team[\"id\"]: {\"venue\": \"HOME\", \"team\": self.home_team[\"abbrev\"]},\n        self.away_team[\"id\"]: {\"venue\": \"AWAY\", \"team\": self.away_team[\"abbrev\"]},\n    }\n\n    for player in self.api_response[\"rosterSpots\"]:\n        first_name = (\n            unidecode(player[\"firstName\"][\"default\"])\n            .encode(\"latin\")\n            .decode(\"utf=8\")\n            .upper()\n            .strip()\n        )\n\n        last_name = (\n            unidecode(player[\"lastName\"][\"default\"])\n            .encode(\"latin\")\n            .decode(\"utf=8\")\n            .upper()\n            .strip()\n        )\n\n        player_name = first_name + \" \" + last_name\n\n        player_name = (\n            player_name.replace(\"ALEXANDRE\", \"ALEX\")\n            .replace(\"ALEXANDER\", \"ALEX\")\n            .replace(\"CHRISTOPHER\", \"CHRIS\")\n        )\n\n        player_name = correct_names_dict.get(player_name, player_name)\n\n        eh_id = (\n            player_name.split(\" \", 1)[0] + \".\" + player_name.split(\" \", 1)[1]\n        ).replace(\"..\", \".\")\n\n        eh_id = correct_api_names_dict.get(player[\"playerId\"], eh_id)\n\n        team = team_info[player[\"teamId\"]]\n\n        player_info = {\n            \"season\": self.season,\n            \"session\": self.session,\n            \"game_id\": self.game_id,\n            \"team\": team[\"team\"],\n            \"team_venue\": team[\"venue\"],\n            \"player_name\": player_name,\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"api_id\": player[\"playerId\"],\n            \"eh_id\": correct_api_names_dict.get(player[\"playerId\"], eh_id),\n            \"team_jersey\": team[\"team\"] + str(player[\"sweaterNumber\"]),\n            \"jersey\": player[\"sweaterNumber\"],\n            \"position\": player[\"positionCode\"],\n            \"headshot_url\": player.get(\"headshot\", \"\"),\n        }\n\n        players.append(APIRosterPlayer.model_validate(player_info).model_dump())\n\n    if self.game_id == 2013020971:\n        new_player = {\n            \"season\": self.season,\n            \"session\": self.session,\n            \"game_id\": self.game_id,\n            \"team\": \"CBJ\",\n            \"team_venue\": \"AWAY\",\n            \"player_name\": \"NATHAN HORTON\",\n            \"first_name\": \"NATHAN\",\n            \"last_name\": \"HORTON\",\n            \"api_id\": 8470596,\n            \"eh_id\": \"NATHAN.HORTON\",\n            \"team_jersey\": \"CBJ8\",\n            \"jersey\": 8,\n            \"position\": \"R\",\n            \"headshot_url\": \"\",\n        }\n\n        players.append(APIRosterPlayer.model_validate(new_player).model_dump())\n\n    players = sorted(players, key=lambda k: (k[\"team_venue\"], k[\"player_name\"]))\n\n    self._api_rosters = players\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_changes","title":"_munge_changes","text":"<pre><code>_munge_changes()\n</code></pre> <p>Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_changes(self) -&gt; None:\n    \"\"\"Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes\"\"\"\n\n    game_id = self.game_id\n    season = self.season\n    game_session = self.session\n    shifts = self._shifts\n\n    game_list = []\n\n    periods = np.unique([x[\"period\"] for x in shifts]).tolist()\n\n    teams = [\"HOME\", \"AWAY\"]\n\n    for period in periods:\n        max([x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period])\n\n        for team in teams:\n            changes_dict = {}\n\n            changes_on = np.unique(\n                [\n                    x[\"start_time_seconds\"]\n                    for x in shifts\n                    if x[\"period\"] == period and x[\"team_venue\"] == team\n                ]\n            ).tolist()\n\n            for change_on in changes_on:\n                players_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                ]\n\n                players_on = sorted(players_on, key=lambda k: (k[\"jersey\"]))\n\n                f_positions = [\"L\", \"C\", \"R\"]\n\n                forwards_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] in f_positions\n                ]\n\n                forwards_on = sorted(forwards_on, key=lambda k: (k[\"jersey\"]))\n\n                defense_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"D\"\n                ]\n\n                defense_on = sorted(defense_on, key=lambda k: (k[\"jersey\"]))\n\n                goalies_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"G\"\n                ]\n\n                goalies_on = sorted(goalies_on, key=lambda k: (k[\"jersey\"]))\n\n                new_values = {\n                    \"season\": season,\n                    \"session\": game_session,\n                    \"game_id\": game_id,\n                    \"event\": \"CHANGE\",\n                    \"event_team\": players_on[0][\"team\"],\n                    \"is_home\": players_on[0][\"is_home\"],\n                    \"is_away\": players_on[0][\"is_away\"],\n                    \"team_venue\": team,\n                    \"period\": period,\n                    \"period_time\": players_on[0][\"start_time\"],\n                    \"period_seconds\": players_on[0][\"start_time_seconds\"],\n                    \"change_on_count\": len(players_on),\n                    \"change_off_count\": 0,\n                    \"change_on_jersey\": [x[\"team_jersey\"] for x in players_on],\n                    \"change_on\": [x[\"player_name\"] for x in players_on],\n                    \"change_on_eh_id\": [x[\"eh_id\"] for x in players_on],\n                    \"change_on_positions\": [x[\"position\"] for x in players_on],\n                    \"change_off_jersey\": \"\",\n                    \"change_off\": \"\",\n                    \"change_off_eh_id\": \"\",\n                    \"change_off_positions\": \"\",\n                    \"change_on_forwards_count\": len(forwards_on),\n                    \"change_off_forwards_count\": 0,\n                    \"change_on_forwards_jersey\": [\n                        x[\"team_jersey\"] for x in forwards_on\n                    ],\n                    \"change_on_forwards\": [x[\"player_name\"] for x in forwards_on],\n                    \"change_on_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_on],\n                    \"change_off_forwards_jersey\": \"\",\n                    \"change_off_forwards\": \"\",\n                    \"change_off_forwards_eh_id\": \"\",\n                    \"change_on_defense_count\": len(defense_on),\n                    \"change_off_defense_count\": 0,\n                    \"change_on_defense_jersey\": [\n                        x[\"team_jersey\"] for x in defense_on\n                    ],\n                    \"change_on_defense\": [x[\"player_name\"] for x in defense_on],\n                    \"change_on_defense_eh_id\": [x[\"eh_id\"] for x in defense_on],\n                    \"change_off_defense_jersey\": \"\",\n                    \"change_off_defense\": \"\",\n                    \"change_off_defense_eh_id\": \"\",\n                    \"change_on_goalie_count\": len(goalies_on),\n                    \"change_off_goalie_count\": 0,\n                    \"change_on_goalie_jersey\": [\n                        x[\"team_jersey\"] for x in goalies_on\n                    ],\n                    \"change_on_goalie\": [x[\"player_name\"] for x in goalies_on],\n                    \"change_on_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_on],\n                    \"change_off_goalie_jersey\": \"\",\n                    \"change_off_goalie\": \"\",\n                    \"change_off_goalie_eh_id\": \"\",\n                }\n\n                changes_dict.update({change_on: new_values})\n\n            changes_off = np.unique(\n                [\n                    x[\"end_time_seconds\"]\n                    for x in shifts\n                    if x[\"period\"] == period and x[\"team_venue\"] == team\n                ]\n            ).tolist()\n\n            for change_off in changes_off:\n                players_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                ]\n\n                players_off = sorted(players_off, key=lambda k: (k[\"jersey\"]))\n\n                f_positions = [\"L\", \"C\", \"R\"]\n\n                forwards_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] in f_positions\n                ]\n\n                forwards_off = sorted(forwards_off, key=lambda k: (k[\"jersey\"]))\n\n                defense_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"D\"\n                ]\n\n                defense_off = sorted(defense_off, key=lambda k: (k[\"jersey\"]))\n\n                goalies_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"G\"\n                ]\n\n                goalies_off = sorted(goalies_off, key=lambda k: (k[\"jersey\"]))\n\n                new_values = {\n                    \"season\": season,\n                    \"session\": game_session,\n                    \"game_id\": game_id,\n                    \"event\": \"CHANGE\",\n                    \"event_team\": players_off[0][\"team\"],\n                    \"team_venue\": team,\n                    \"is_home\": players_off[0][\"is_home\"],\n                    \"is_away\": players_off[0][\"is_away\"],\n                    \"period\": period,\n                    \"period_time\": players_off[0][\"end_time\"],\n                    \"period_seconds\": players_off[0][\"end_time_seconds\"],\n                    \"change_off_count\": len(players_off),\n                    \"change_off_jersey\": [x[\"team_jersey\"] for x in players_off],\n                    \"change_off\": [x[\"player_name\"] for x in players_off],\n                    \"change_off_eh_id\": [x[\"eh_id\"] for x in players_off],\n                    \"change_off_positions\": [x[\"position\"] for x in players_off],\n                    \"change_off_forwards_count\": len(forwards_off),\n                    \"change_off_forwards_jersey\": [\n                        x[\"team_jersey\"] for x in forwards_off\n                    ],\n                    \"change_off_forwards\": [x[\"player_name\"] for x in forwards_off],\n                    \"change_off_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_off],\n                    \"change_off_defense_count\": len(defense_off),\n                    \"change_off_defense_jersey\": [\n                        x[\"team_jersey\"] for x in defense_off\n                    ],\n                    \"change_off_defense\": [x[\"player_name\"] for x in defense_off],\n                    \"change_off_defense_eh_id\": [x[\"eh_id\"] for x in defense_off],\n                    \"change_off_goalie_count\": len(goalies_off),\n                    \"change_off_goalie_jersey\": [\n                        x[\"team_jersey\"] for x in goalies_off\n                    ],\n                    \"change_off_goalie\": [x[\"player_name\"] for x in goalies_off],\n                    \"change_off_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_off],\n                }\n\n                if change_off in changes_on:\n                    changes_dict[change_off].update(new_values)\n\n                else:\n                    new_values.update(\n                        {\n                            \"change_on_count\": 0,\n                            \"change_on_forwards_count\": 0,\n                            \"change_on_defense_count\": 0,\n                            \"change_on_goalie_count\": 0,\n                        }\n                    )\n\n                    changes_dict[change_off] = new_values\n\n            game_list.extend(list(changes_dict.values()))\n\n    game_list = sorted(\n        game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"is_away\"])\n    )\n\n    final_changes = []\n\n    for change in game_list:\n        players_on = \", \".join(change.get(\"change_on\", []))\n\n        players_off = \", \".join(change.get(\"change_off\", []))\n\n        on_num = len(change.get(\"change_on\", []))\n\n        off_num = len(change.get(\"change_off\", []))\n\n        if on_num &gt; 0 and off_num &gt; 0:\n            change[\n                \"description\"\n            ] = f\"PLAYERS ON: {players_on} / PLAYERS OFF: {players_off}\"\n\n        if on_num &gt; 0 and off_num == 0:\n            change[\"description\"] = f\"PLAYERS ON: {players_on}\"\n\n        if off_num &gt; 0 and on_num == 0:\n            change[\"description\"] = f\"PLAYERS OFF: {players_off}\"\n\n        if change[\"period\"] == 5 and game_session == \"R\":\n            change[\"game_seconds\"] = 3900 + change[\"period_seconds\"]\n\n        else:\n            change[\"game_seconds\"] = (int(change[\"period\"]) - 1) * 1200 + change[\n                \"period_seconds\"\n            ]\n\n        if change[\"is_home\"] == 1:\n            change[\"event_type\"] = \"HOME CHANGE\"\n\n        else:\n            change[\"event_type\"] = \"AWAY CHANGE\"\n\n        final_changes.append(ChangeEvent.model_validate(change).model_dump())\n\n    self._changes = final_changes\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._scrape_html_events","title":"_scrape_html_events","text":"<pre><code>_scrape_html_events()\n</code></pre> <p>Method for scraping events from HTML endpoint. Updates self._html_events</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_html_events(self) -&gt; None:\n    \"\"\"Method for scraping events from HTML endpoint. Updates self._html_events\"\"\"\n\n    url = self.html_events_endpoint\n\n    s = self._requests_session\n\n    try:\n        response = s.get(url)\n    except RetryError:\n        return None\n\n    soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\")\n\n    events = []\n\n    if soup.find(\"html\") is None:\n        return None\n\n    tds = soup.find_all(\"td\", {\"class\": re.compile(\".*bborder.*\")})\n\n    events_data = hs_strip_html(tds)\n\n    events_data = [\n        unidecode(x).replace(\"\\n \", \", \").replace(\"\\n\", \"\") for x in events_data\n    ]\n\n    length = int(len(events_data) / 8)\n\n    events_data = np.array(events_data).reshape(length, 8)\n\n    for idx, event in enumerate(events_data):\n        column_names = [\n            \"event_idx\",\n            \"period\",\n            \"strength\",\n            \"time\",\n            \"event\",\n            \"description\",\n            \"away_skaters\",\n            \"home_skaters\",\n        ]\n\n        if \"#\" in event:\n            continue\n\n        else:\n            event = dict(zip(column_names, event))\n\n            new_values = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"event_idx\": int(event[\"event_idx\"]),\n                \"description\": unidecode(event[\"description\"]).upper(),\n                \"period\": event[\"period\"],\n            }\n\n            event.update(new_values)\n\n            # This event is missing from the API and doesn't have a player in the HTML endpoint\n\n            if self.game_id == 2022020194 and event[\"event_idx\"] == 134:\n                continue\n\n            if self.game_id == 2022020673 and event[\"event_idx\"] == 208:\n                continue\n\n            events.append(event)\n\n    self._html_events = events\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_html_events","title":"_munge_html_events","text":"<pre><code>_munge_html_events()\n</code></pre> <p>Method to munge list of events from HTML endpoint. Updates self._html_events</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_html_events(self) -&gt; None:\n    \"\"\"Method to munge list of events from HTML endpoint. Updates self._html_events\"\"\"\n\n    game_session = self.session\n\n    if self._html_rosters is None:\n        self._scrape_html_rosters()\n        self._munge_html_rosters()\n\n    roster = self._html_rosters\n\n    # Compiling regex expressions to save time later\n\n    event_team_re = re.compile(r\"^([A-Z]{3}|[A-Z]\\.[A-Z])\")\n    numbers_re = re.compile(r\"#([0-9]{1,2})\")\n    event_players_re = re.compile(r\"([A-Z]{3}\\s+#[0-9]{1,2})\")\n    re.compile(r\"([A-Z]{1,2})\")\n    fo_team_re = re.compile(r\"([A-Z]{3}) WON\")\n    block_team_re = re.compile(r\"BLOCKED BY\\s+([A-Z]{3})\")\n    re.compile(r\"(\\d+)\")\n    zone_re = re.compile(r\"([A-Za-z]{3}). ZONE\")\n    penalty_re = re.compile(\n        r\"([A-Za-z]*|[A-Za-z]*-[A-Za-z]*|[A-Za-z]*\\s+\\(.*\\))\\s*\\(\"\n    )\n    penalty_length_re = re.compile(r\"(\\d+) MIN\")\n    shot_re = re.compile(r\",\\s+([A-Za-z]*|[A-Za-z]*-[A-Za-z]*)\\s+,\")\n    distance_re = re.compile(r\"(\\d+) FT\")\n    served_re = re.compile(r\"([A-Z]{3})\\s.+SERVED BY: #([0-9]+)\")\n    # served_drawn_re = re.compile('([A-Z]{3})\\s#.*\\sSERVED BY: #([0-9]+)')\n    drawn_re = re.compile(r\"DRAWN BY: ([A-Z]{3}) #([0-9]+)\")\n\n    actives = {\n        player[\"team_jersey\"]: player\n        for player in roster\n        if player[\"status\"] == \"ACTIVE\"\n    }\n\n    scratches = {\n        player[\"team_jersey\"]: player\n        for player in roster\n        if player[\"status\"] == \"SCRATCH\"\n    }\n\n    for event in self._html_events:\n        non_descripts = {\n            \"PGSTR\": \"PRE-GAME START\",\n            \"PGEND\": \"PRE-GAME END\",\n            \"ANTHEM\": \"NATIONAL ANTHEM\",\n            \"EISTR\": \"EARLY INTERMISSION START\",\n            \"EIEND\": \"EARLY INTERMISSION END\",\n        }\n\n        if event[\"event\"] in list(non_descripts.keys()):\n            event[\"description\"] = non_descripts[event[\"event\"]]\n\n        # Replacing the team names with three-letter codes from API endpoint\n\n        new_team_names = {\n            \"L.A\": \"LAK\",\n            \"N.J\": \"NJD\",\n            \"S.J\": \"SJS\",\n            \"T.B\": \"TBL\",\n            \"PHX\": \"ARI\",\n        }\n\n        for old_name, new_name in new_team_names.items():\n            event[\"description\"] = (\n                event[\"description\"].replace(old_name, new_name).upper()\n            )\n\n        event = html_events_fixes(self.game_id, event)\n\n        if event[\"event\"] == \"PEND\" and event[\"time\"] == \"-16:0-120:00\":\n            goals = [\n                x\n                for x in self._html_events\n                if x[\"period\"] == event[\"period\"] and x[\"event\"] == \"GOAL\"\n            ]\n\n            if len(goals) == 0:\n                if int(event[\"period\"]) == 4 and event[\"session\"] == \"R\":\n                    event[\"time\"] = event[\"time\"].replace(\n                        \"-16:0-120:00\", \"5:000:00\"\n                    )\n\n                else:\n                    event[\"time\"] = event[\"time\"].replace(\n                        \"-16:0-120:00\", \"20:000:00\"\n                    )\n\n            elif len(goals) &gt; 0:\n                goal = goals[-1]\n\n                event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", goal[\"time\"])\n\n        non_team_events = [\n            \"STOP\",\n            \"ANTHEM\",\n            \"PGSTR\",\n            \"PGEND\",\n            \"PSTR\",\n            \"PEND\",\n            \"EISTR\",\n            \"EIEND\",\n            \"GEND\",\n            \"SOC\",\n            \"PBOX\",\n        ]\n\n        if event[\"event\"] not in non_team_events:\n            try:\n                event[\"event_team\"] = re.search(\n                    event_team_re, event[\"description\"]\n                ).group(1)\n\n                if event[\"event_team\"] == \"LEA\":\n                    event[\"event_team\"] = \"\"\n\n            except AttributeError:\n                continue\n\n        if event[\"event\"] == \"FAC\":\n            event[\"event_team\"] = re.search(fo_team_re, event[\"description\"]).group(\n                1\n            )\n\n        if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY\" in event[\"description\"]:\n            event[\"event_team\"] = re.search(\n                block_team_re, event[\"description\"]\n            ).group(1)\n\n        event[\"period\"] = int(event[\"period\"])\n\n        time_split = event[\"time\"].split(\":\")\n\n        event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n        event[\"period_seconds\"] = (\n            60 * int(event[\"period_time\"].split(\":\")[0])\n        ) + int(event[\"period_time\"].split(\":\")[1])\n\n        event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\n            \"period_seconds\"\n        ]\n\n        if event[\"period\"] == 5 and game_session == \"R\":\n            event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n        event_list = [\"GOAL\", \"SHOT\", \"TAKE\", \"GIVE\"]\n\n        if event[\"event\"] in event_list:\n            event_players = [\n                event[\"event_team\"] + num\n                for num in re.findall(numbers_re, event[\"description\"])\n            ]\n\n        else:\n            event_players = re.findall(event_players_re, event[\"description\"])\n\n        if event[\"event\"] == \"FAC\" and event[\"event_team\"] not in event_players[0]:\n            event_players[0], event_players[1] = event_players[1], event_players[0]\n\n        if event[\"event\"] == \"BLOCK\" and \"TEAMMATE\" in event[\"description\"]:\n            event[\"event_team\"] = event[\"description\"][:3]\n\n            event_players.insert(0, \"TEAMMATE\")\n\n        elif (\n            event[\"event\"] == \"BLOCK\" and \"BLOCKED BY OTHER\" in event[\"description\"]\n        ):\n            event[\"event_team\"] = \"OTHER\"\n\n            event_players.insert(0, \"REFEREE\")\n\n        elif (\n            event[\"event\"] == \"BLOCK\"\n            and event[\"event_team\"] not in event_players[0]\n        ):\n            event_players[0], event_players[1] = event_players[1], event_players[0]\n\n        for idx, event_player in enumerate(event_players):\n            num = idx + 1\n\n            event_player = event_player.replace(\" #\", \"\")\n\n            if event_player == \"TEAMMATE\":\n                player_name = \"TEAMMATE\"\n                eh_id = \"TEAMMATE\"\n                position = None\n\n            elif event_player == \"REFEREE\":\n                player_name = \"REFEREE\"\n                eh_id = \"REFEREE\"\n                position = None\n\n            else:\n                try:\n                    player_name = actives[event_player][\"player_name\"]\n                    eh_id = actives[event_player][\"eh_id\"]\n                    position = actives[event_player][\"position\"]\n\n                except KeyError:\n                    player_name = scratches[event_player][\"player_name\"]\n                    eh_id = scratches[event_player][\"eh_id\"]\n                    position = scratches[event_player][\"position\"]\n\n            new_values = {\n                f\"player_{num}\": player_name,\n                f\"player_{num}_eh_id\": eh_id,\n                f\"player_{num}_position\": position,\n            }\n\n            event.update(new_values)\n\n        try:\n            event[\"zone\"] = (\n                re.search(zone_re, event[\"description\"]).group(1).upper()\n            )\n\n            if \"BLOCK\" in event[\"event\"] and event[\"zone\"] == \"DEF\":\n                event[\"zone\"] = \"OFF\"\n\n        except AttributeError:\n            pass\n\n        if event[\"event\"] == \"PENL\":\n            if (\n                \"TEAM\" in event[\"description\"]\n                and \"SERVED BY\" in event[\"description\"]\n            ) or (\"HEAD COACH\" in event[\"description\"]):\n                event[\"player_1\"] = \"BENCH\"\n\n                event[\"player_1_eh_id\"] = \"BENCH\"\n\n                event[\"player_1_position\"] = None\n\n                try:\n                    served_by = re.search(served_re, event[\"description\"])\n\n                    name = served_by.group(1) + str(served_by.group(2))\n\n                except AttributeError:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                    except AttributeError:\n                        continue\n\n                event[\"player_2\"] = actives[name][\"player_name\"]\n\n                event[\"player_2_eh_id\"] = actives[name][\"eh_id\"]\n\n                event[\"player_2_position\"] = actives[name][\"position\"]\n\n            if (\n                \"SERVED BY\" in event[\"description\"]\n                and \"DRAWN BY\" in event[\"description\"]\n            ):\n                try:\n                    drawn_by = re.search(drawn_re, event[\"description\"])\n\n                    drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                    event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                    if event[\"player_1_eh_id\"] == event[\"player_2_eh_id\"]:\n                        event[\"player_1\"] = \"BENCH\"\n                        event[\"player_1_eh_id\"] = \"BENCH\"\n                        event[\"player_1_position\"] = None\n\n                    served_by = re.search(served_re, event[\"description\"])\n\n                    served_name = served_by.group(1) + str(served_by.group(2))\n\n                    event[\"player_3\"] = actives[served_name][\"player_name\"]\n\n                    event[\"player_3_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                    event[\"player_3_position\"] = actives[served_name][\"position\"]\n\n                    if (\n                        \"TEAM\" in event[\"description\"]\n                        or \"HEAD COACH\" in event[\"description\"]\n                    ):\n                        event[\"player_2\"], event[\"player_3\"] = (\n                            event[\"player_3\"],\n                            event[\"player_2\"],\n                        )\n\n                        event[\"player_2_eh_id\"], event[\"player_3_eh_id\"] = (\n                            event[\"player_3_eh_id\"],\n                            event[\"player_2_eh_id\"],\n                        )\n\n                        event[\"player_2_position\"], event[\"player_3_position\"] = (\n                            event[\"player_3_position\"],\n                            event[\"player_2_position\"],\n                        )\n\n                except AttributeError:\n                    pass\n\n            elif \"SERVED BY\" in event[\"description\"]:\n                try:\n                    served_by = re.search(served_re, event[\"description\"])\n\n                    served_name = served_by.group(1) + str(served_by.group(2))\n\n                    event[\"player_2\"] = actives[served_name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[served_name][\"position\"]\n\n                except AttributeError:\n                    pass\n\n            elif \"DRAWN BY\" in event[\"description\"]:\n                try:\n                    drawn_by = re.search(drawn_re, event[\"description\"])\n\n                    drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                    event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                except AttributeError:\n                    pass\n\n            if \"player_1\" not in event.keys():\n                new_values = {\n                    \"player_1\": \"BENCH\",\n                    \"player_1_eh_id\": \"BENCH\",\n                    \"player_1_position\": \"\",\n                }\n\n                event.update(new_values)\n\n            try:\n                event[\"penalty_length\"] = int(\n                    re.search(penalty_length_re, event[\"description\"]).group(1)\n                )\n\n            except TypeError:\n                pass\n\n            try:\n                event[\"penalty\"] = (\n                    re.search(penalty_re, event[\"description\"]).group(1).upper()\n                )\n\n            except AttributeError:\n                continue\n\n            if (\n                \"INTERFERENCE\" in event[\"description\"]\n                and \"GOALKEEPER\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"GOALKEEPER INTERFERENCE\"\n\n            elif (\n                \"CROSS\" in event[\"description\"]\n                and \"CHECKING\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"CROSS-CHECKING\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"PUCK OVER\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - PUCK OVER GLASS\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"FO VIOL\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - FACEOFF VIOLATION\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"EQUIPMENT\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - EQUIPMENT\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"UNSUCC\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - UNSUCCESSFUL CHALLENGE\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"SMOTHERING\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - SMOTHERING THE PUCK\"\n\n            elif (\n                \"ILLEGAL\" in event[\"description\"]\n                and \"CHECK\" in event[\"description\"]\n                and \"HEAD\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"ILLEGAL CHECK TO HEAD\"\n\n            elif (\n                \"HIGH-STICKING\" in event[\"description\"]\n                and \"- DOUBLE\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"HIGH-STICKING - DOUBLE MINOR\"\n\n            elif \"GAME MISCONDUCT\" in event[\"description\"]:\n                event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n            elif \"MATCH PENALTY\" in event[\"description\"]:\n                event[\"penalty\"] = \"MATCH PENALTY\"\n\n            elif (\n                \"NET\" in event[\"description\"]\n                and \"DISPLACED\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DISPLACED NET\"\n\n            elif (\n                \"THROW\" in event[\"description\"]\n                and \"OBJECT\" in event[\"description\"]\n                and \"AT PUCK\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"THROWING OBJECT AT PUCK\"\n\n            elif (\n                \"INSTIGATOR\" in event[\"description\"]\n                and \"FACE SHIELD\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"INSTIGATOR - FACE SHIELD\"\n\n            elif \"GOALIE LEAVE CREASE\" in event[\"description\"]:\n                event[\"penalty\"] = \"LEAVING THE CREASE\"\n\n            elif (\n                \"REMOVING\" in event[\"description\"]\n                and \"HELMET\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"REMOVING OPPONENT HELMET\"\n\n            elif (\n                \"BROKEN\" in event[\"description\"] and \"STICK\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"HOLDING BROKEN STICK\"\n\n            elif (\n                \"HOOKING\" in event[\"description\"]\n                and \"BREAKAWAY\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"HOOKING - BREAKAWAY\"\n\n            elif (\n                \"HOLDING\" in event[\"description\"]\n                and \"BREAKAWAY\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"HOLDING - BREAKAWAY\"\n\n            elif (\n                \"TRIPPING\" in event[\"description\"]\n                and \"BREAKAWAY\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"TRIPPING - BREAKAWAY\"\n\n            elif (\n                \"SLASH\" in event[\"description\"]\n                and \"BREAKAWAY\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"SLASHING - BREAKAWAY\"\n\n            elif \"TEAM TOO MANY\" in event[\"description\"]:\n                event[\"penalty\"] = \"TOO MANY MEN ON THE ICE\"\n\n            elif (\n                \"HOLDING\" in event[\"description\"]\n                and \"STICK\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"HOLDING THE STICK\"\n\n            elif (\n                \"THROWING\" in event[\"description\"]\n                and \"STICK\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"THROWING STICK\"\n\n            elif (\n                \"CLOSING\" in event[\"description\"] and \"HAND\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"CLOSING HAND ON PUCK\"\n\n            elif (\n                \"ABUSE\" in event[\"description\"]\n                and \"OFFICIALS\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"ABUSE OF OFFICIALS\"\n\n            elif \"UNSPORTSMANLIKE CONDUCT\" in event[\"description\"]:\n                event[\"penalty\"] = \"UNSPORTSMANLIKE CONDUCT\"\n\n            elif (\n                \"PUCK\" in event[\"description\"]\n                and \"THROWN\" in event[\"description\"]\n                and \"FWD\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"PUCK THROWN FORWARD - GOALKEEPER\"\n\n            elif \"DELAY\" in event[\"description\"] and \"GAME\" in event[\"description\"]:\n                event[\"penalty\"] = \"DELAY OF GAME\"\n\n            elif event[\"penalty\"] == \"MISCONDUCT\":\n                event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n        shot_events = [\"GOAL\", \"SHOT\", \"MISS\", \"BLOCK\"]\n\n        if event[\"event\"] in shot_events:\n            try:\n                event[\"shot_type\"] = (\n                    re.search(shot_re, event[\"description\"]).group(1).upper()\n                )\n\n            except AttributeError:\n                event[\"shot_type\"] = \"WRIST\"\n\n                pass\n\n            if \"BETWEEN LEGS\" in event[\"description\"]:\n                event[\"shot_type\"] = \"BETWEEN LEGS\"\n\n        try:\n            event[\"pbp_distance\"] = int(\n                re.search(distance_re, event[\"description\"]).group(1)\n            )\n\n        except AttributeError:\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                event[\"pbp_distance\"] = 0\n\n            pass\n\n    self._html_events = sorted(self._html_events, key=lambda k: (k[\"event_idx\"]))\n\n    final_events = []\n\n    for event in self._html_events:\n        if \"period_seconds\" not in event.keys():\n            if \"time\" in event.keys():\n                event[\"period\"] = int(event[\"period\"])\n\n                time_split = event[\"time\"].split(\":\")\n\n                event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n                event[\"period_seconds\"] = (\n                    60 * int(event[\"period_time\"].split(\":\")[0])\n                ) + int(event[\"period_time\"].split(\":\")[1])\n\n        if \"game_seconds\" not in event.keys():\n            event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\n                \"period_seconds\"\n            ]\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n        if \"version\" not in event.keys():\n            other_events = [\n                x\n                for x in self._html_events\n                if x != event\n                and x[\"event\"] == event[\"event\"]\n                and x.get(\"game_seconds\") == event[\"game_seconds\"]\n                and x[\"period\"] == event[\"period\"]\n                and x.get(\"player_1_eh_id\") is not None\n                and event.get(\"player_1_eh_id\") is not None\n                and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n            ]\n\n            version = 1\n\n            event[\"version\"] = version\n\n            if len(other_events) &gt; 0:\n                for idx, other_event in enumerate(other_events):\n                    if \"version\" not in other_event.keys():\n                        version += 1\n\n                        other_event[\"version\"] = version\n\n        final_events.append(HTMLEvent.model_validate(event).model_dump())\n\n    self._html_events = final_events\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._scrape_html_rosters","title":"_scrape_html_rosters","text":"<pre><code>_scrape_html_rosters()\n</code></pre> <p>Method for scraping players from HTML endpoint. Updates self._html_rosters</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_html_rosters(self) -&gt; None:\n    \"\"\"Method for scraping players from HTML endpoint. Updates self._html_rosters\"\"\"\n\n    # URL and scraping url\n\n    url = self.html_rosters_endpoint\n\n    s = self._requests_session\n\n    try:\n        page = s.get(url)\n    except RetryError:\n        return None\n\n    # Continue if status code is bad\n\n    if page.status_code == 404:\n        return None\n\n    # Reading the HTML file using beautiful soup package\n\n    soup = BeautifulSoup(\n        page.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None\n    )\n\n    # Information for reading the HTML data\n\n    td_dict = {\n        \"align\": \"center\",\n        \"class\": [\"teamHeading + border\", \"teamHeading + border \"],\n        \"width\": \"50%\",\n    }\n\n    # Finding all active players in the html file\n\n    teamsoup = soup.find_all(\"td\", td_dict)\n\n    # Dictionary for finding each team's table in the HTML file\n\n    table_dict = {\n        \"align\": \"center\",\n        \"border\": \"0\",\n        \"cellpadding\": \"0\",\n        \"cellspacing\": \"0\",\n        \"width\": \"100%\",\n        \"xmlns:ext\": \"\",\n    }\n\n    # Dictionary to collect the team names\n\n    team_names = {}\n\n    # Dictionary to collect the team tables from the HTML data for iterating\n\n    team_soup_list = []\n\n    # List of teams for iterating\n\n    team_list = [\"away\", \"home\"]\n\n    # List to collect the player dictionaries during iteration\n\n    player_list = []\n\n    # Iterating through the home and away teams to collect names and tables\n\n    for idx, team in enumerate(team_list):\n        # Collecting team names\n\n        team_name = unidecode(\n            teamsoup[idx].get_text().encode(\"latin-1\").decode(\"utf-8\")\n        ).upper()\n\n        # Correcting the Coyotes team name\n\n        if team_name == \"PHOENIX COYOTES\":\n            team_name = \"ARIZONA COYOTES\"\n\n        team_names.update({team: team_name})\n\n        # Collecting tables of active players\n\n        team_soup_list.append(\n            (soup.find_all(\"table\", table_dict))[idx].find_all(\"td\")\n        )\n\n    # Iterating through the team's tables of active players\n\n    for idx, team_soup in enumerate(team_soup_list):\n        table_dict = {\n            \"align\": \"center\",\n            \"border\": \"0\",\n            \"cellpadding\": \"0\",\n            \"cellspacing\": \"0\",\n            \"width\": \"100%\",\n            \"xmlns:ext\": \"\",\n        }\n\n        stuff = soup.find_all(\"table\", table_dict)[idx].find_all(\n            \"td\", {\"class\": \"bold\"}\n        )\n\n        starters = list(np.reshape(stuff, (int(len(stuff) / 3), 3))[:, 2])\n\n        # Getting length to create numpy array\n\n        length = int(len(team_soup) / 3)\n\n        # Creating a numpy array from the data, chopping off the headers to create my own\n\n        active_array = np.array(team_soup).reshape(length, 3)\n\n        # Getting original headers\n\n        og_headers = active_array[0]\n\n        if \"Name\" not in og_headers and \"Nom/Name\" not in og_headers:\n            continue\n\n        # Chop off the headers to create my own\n\n        actives = active_array[1:]\n\n        # Iterating through each player, or row in the array\n\n        for player in actives:\n            # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n            if len(player) == 3:\n                headers = [\"jersey\", \"position\", \"player_name\"]\n\n            # Sometimes headers are missing\n\n            else:\n                headers = [\"jersey\", \"player_name\"]\n\n            # Creating dictionary with headers as keys from the player data\n\n            player = dict(zip(headers, player))\n\n            # Adding new values to the player dictionary\n\n            new_values = {\n                \"team_name\": team_names.get(team_list[idx]),\n                \"team_venue\": team_list[idx].upper(),\n                \"status\": \"ACTIVE\",\n            }\n\n            if player[\"player_name\"] in starters:\n                player[\"starter\"] = 1\n\n            else:\n                player[\"starter\"] = 0\n\n            player[\"player_name\"] = (\n                re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                .strip()\n                .encode(\"latin-1\")\n                .decode(\"utf-8\")\n                .upper()\n            )\n\n            player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n            if \"position\" not in headers:\n                player[\"position\"] = None\n\n            # Update the player's dictionary with new values\n\n            player.update(new_values)\n\n            # Append player dictionary to list of players\n\n            player_list.append(player)\n\n    # Check if scratches are present\n\n    if len(soup.find_all(\"table\", table_dict)) &gt; 2:\n        # If scratches are present, iterate through the team's scratch tables\n\n        for idx, team in enumerate(team_list):\n            # Getting team's scratches from HTML\n\n            scratch_soup = (soup.find_all(\"table\", table_dict))[idx + 2].find_all(\n                \"td\"\n            )\n\n            # Checking to see if there is at least one set of scratches (first row are headers)\n\n            if len(scratch_soup) &gt; 1:\n                # Getting the number of scratches\n\n                length = int(len(scratch_soup) / 3)\n\n                # Creating numpy array of scratches, removing headers\n\n                scratches = np.array(scratch_soup).reshape(length, 3)[1:]\n\n                # Iterating through the array\n\n                for player in scratches:\n                    # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                    if len(player) == 3:\n                        headers = [\"jersey\", \"position\", \"player_name\"]\n\n                    # Sometimes headers are missing\n\n                    else:\n                        headers = [\"jersey\", \"player_name\"]\n\n                    # Creating dictionary with headers as keys from the player data\n\n                    player = dict(zip(headers, player))\n\n                    # Adding new values to the player dictionary\n\n                    new_values = {\n                        \"team_name\": team_names.get(team_list[idx]),\n                        \"team_venue\": team_list[idx].upper(),\n                        \"starter\": 0,\n                        \"status\": \"SCRATCH\",\n                    }\n\n                    if \"position\" not in headers:\n                        player[\"position\"] = None\n\n                    player[\"player_name\"] = (\n                        re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                        .strip()\n                        .encode(\"latin-1\")\n                        .decode(\"utf-8\")\n                        .upper()\n                    )\n\n                    player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                    # Updating player dictionary\n\n                    player.update(new_values)\n\n                    # Appending the player dictionary to the player list\n\n                    player_list.append(player)\n\n    self._html_rosters = player_list\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_html_rosters","title":"_munge_html_rosters","text":"<pre><code>_munge_html_rosters()\n</code></pre> <p>Method to munge list of players from HTML endpoint. Updates self._html_rosters</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_html_rosters(self) -&gt; None:\n    \"\"\"Method to munge list of players from HTML endpoint. Updates self._html_rosters\"\"\"\n\n    season = self.season\n    game_session = self.session\n\n    # Iterating through each player to change information\n\n    final_rosters = []\n\n    for player in self._html_rosters:\n        # Fixing jersey data type\n\n        player = html_rosters_fixes(self.game_id, player)\n\n        player[\"jersey\"] = int(player[\"jersey\"])\n\n        # Adding new values in a batch\n\n        new_values = {\n            \"season\": int(season),\n            \"session\": game_session,\n            \"game_id\": self.game_id,\n        }\n\n        player.update(new_values)\n\n        player[\"player_name\"] = (\n            player[\"player_name\"]\n            .replace(\"ALEXANDRE\", \"ALEX\")\n            .replace(\"ALEXANDER\", \"ALEX\")\n            .replace(\"CHRISTOPHER\", \"CHRIS\")\n        )\n\n        player[\"player_name\"] = correct_names_dict.get(\n            player[\"player_name\"], player[\"player_name\"]\n        )\n\n        # Creating Evolving Hockey ID\n\n        player[\"eh_id\"] = unidecode(player[\"player_name\"])\n\n        name_split = player[\"eh_id\"].split(\" \", maxsplit=1)\n\n        player[\"eh_id\"] = f\"{name_split[0]}.{name_split[1]}\"\n\n        player[\"eh_id\"] = player[\"eh_id\"].replace(\"..\", \".\")\n\n        # Correcting Evolving Hockey IDs for duplicates\n\n        duplicates = {\n            \"SEBASTIAN.AHO\": player[\"position\"] == \"D\",\n            \"COLIN.WHITE\": player[\"season\"] &gt;= 20162017,\n            \"SEAN.COLLINS\": player[\"position\"] != \"D\",\n            \"ALEX.PICARD\": player[\"position\"] != \"D\",\n            \"ERIK.GUSTAFSSON\": player[\"season\"] &gt;= 20152016,\n            \"MIKKO.LEHTONEN\": player[\"season\"] &gt;= 20202021,\n            \"NATHAN.SMITH\": player[\"season\"] &gt;= 20212022,\n            \"DANIIL.TARASOV\": player[\"position\"] == \"G\",\n        }\n\n        # Iterating through the duplicate names and conditions\n\n        for duplicate_name, condition in duplicates.items():\n            if player[\"eh_id\"] == duplicate_name and condition:\n                player[\"eh_id\"] = f\"{duplicate_name}2\"\n\n        # Something weird with Colin White\n\n        if player[\"eh_id\"] == \"COLIN.\":\n            player[\"eh_id\"] = \"COLIN.WHITE2\"\n\n        player[\"team\"] = team_codes.get(player[\"team_name\"])\n\n        player[\"team_jersey\"] = f\"{player['team']}{player['jersey']}\"\n\n        final_rosters.append(HTMLRosterPlayer.model_validate(player).model_dump())\n\n    self._html_rosters = final_rosters\n\n    self._html_rosters = sorted(\n        self._html_rosters,\n        key=lambda k: (k[\"team_venue\"], k[\"status\"], k[\"player_name\"]),\n    )\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._combine_events","title":"_combine_events","text":"<pre><code>_combine_events()\n</code></pre> <p>Method to combine API and HTML events. Updates self._play_by_play</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _combine_events(self) -&gt; None:\n    \"\"\"Method to combine API and HTML events. Updates self._play_by_play\"\"\"\n\n    html_events = self._html_events\n    api_events = self._api_events\n\n    game_list = []\n\n    for event in html_events:\n        if event[\"event\"] == \"EGPID\":\n            continue\n\n        event_data = {}\n\n        event_data.update(event)\n\n        non_team_events = [\n            \"STOP\",\n            \"ANTHEM\",\n            \"PGSTR\",\n            \"PGEND\",\n            \"PSTR\",\n            \"PEND\",\n            \"EISTR\",\n            \"EIEND\",\n            \"GEND\",\n            \"SOC\",\n            \"EGT\",\n            \"PBOX\",\n            \"PRDY\",\n            \"POFF\",\n            \"GOFF\",\n        ]\n\n        if event[\"event\"] in non_team_events:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is None:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is not None:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"event_team\") is not None\n                and event.get(\"event_team\") is not None\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        elif event[\"event\"] == \"PENL\":\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                and x.get(\"player_2_eh_id\") == event.get(\"player_2_eh_id\")\n                and x.get(\"player_3_eh_id\") == event.get(\"player_3_eh_id\")\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n            ]\n\n        elif event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"event_team\") is not None\n                and event.get(\"event_team\") is not None\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        else:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"event_team\") is not None\n                and event.get(\"event_team\") is not None\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x.get(\"player_1_eh_id\") is not None\n                and event.get(\"player_1_eh_id\") is not None\n                and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        if event[\"event\"] == \"FAC\" and len(api_matches) == 0:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        if len(api_matches) == 0:\n            game_list.append(event_data)\n\n            continue\n\n        elif len(api_matches) == 1:\n            api_match = api_matches[0]\n\n            new_values = {\n                \"event_idx_api\": api_match.get(\"event_idx\"),\n                \"coords_x\": api_match.get(\"coords_x\"),\n                \"coords_y\": api_match.get(\"coords_y\"),\n                \"player_1_eh_id_api\": api_match.get(\"player_1_eh_id\"),\n                \"player_1_api_id\": api_match.get(\"player_1_api_id\"),\n                \"player_1_type\": api_match.get(\"player_1_type\"),\n                \"player_2_eh_id_api\": api_match.get(\"player_2_eh_id\"),\n                \"player_2_api_id\": api_match.get(\"player_2_api_id\"),\n                \"player_2_type\": api_match.get(\"player_2_type\"),\n                \"player_3_eh_id_api\": api_match.get(\"player_3_eh_id\"),\n                \"player_3_api_id\": api_match.get(\"player_3_api_id\"),\n                \"player_3_type\": api_match.get(\"player_3_type\"),\n                \"version_api\": api_match.get(\"version\", 1),\n            }\n\n            event_data.update(new_values)\n\n            if event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":\n                new_values = {\n                    \"player_1\": api_match.get(\"player_1\", event[\"player_1\"]),\n                    \"player_1_eh_id\": api_match.get(\n                        \"player_1_eh_id\", event[\"player_1_eh_id\"]\n                    ),\n                    \"player_1_position\": api_match.get(\n                        \"player_1_position\", event[\"player_1_position\"]\n                    ),\n                }\n\n                event_data.update(new_values)\n\n            game_list.append(event_data)\n\n    game_list.extend(self._changes)\n\n    for event in game_list:\n        new_values = {\n            \"game_date\": self.game_date,\n            \"home_team\": self.home_team[\"abbrev\"],\n            \"away_team\": self.away_team[\"abbrev\"],\n        }\n\n        event.update(new_values)\n\n        if \"version\" not in event.keys():\n            event[\"version\"] = 1\n\n        if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n            event[\"sort_value\"] = event[\"event_idx\"]\n\n        else:\n            sort_dict = {\n                \"PGSTR\": 1,\n                \"PGEND\": 2,\n                \"ANTHEM\": 3,\n                \"EGT\": 3,\n                \"CHL\": 3,\n                \"DELPEN\": 3,\n                \"BLOCK\": 3,\n                \"GIVE\": 3,\n                \"HIT\": 3,\n                \"MISS\": 3,\n                \"SHOT\": 3,\n                \"TAKE\": 3,\n                \"GOAL\": 5,\n                \"STOP\": 6,\n                \"PENL\": 7,\n                \"PBOX\": 7,\n                \"PSTR\": 7,\n                \"CHANGE\": 8,\n                \"EISTR\": 9,\n                \"EIEND\": 10,\n                \"FAC\": 12,\n                \"PEND\": 13,\n                \"SOC\": 14,\n                \"GEND\": 15,\n                \"GOFF\": 16,\n            }\n\n            event[\"sort_value\"] = sort_dict[event[\"event\"]]\n\n    game_list = sorted(\n        game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"sort_value\"])\n    )  # , k['version']\n\n    self._play_by_play = game_list\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_play_by_play","title":"_munge_play_by_play","text":"<pre><code>_munge_play_by_play()\n</code></pre> <p>Method to munge list of events and changes for play-by-play. Updates self._play_by_play</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_play_by_play(self) -&gt; None:\n    \"\"\"Method to munge list of events and changes for play-by-play. Updates self._play_by_play\"\"\"\n\n    game_session = self.session\n\n    home_score = 0\n\n    away_score = 0\n\n    for idx, event in enumerate(self._play_by_play):\n        if event.get(\"event_team\") == event[\"home_team\"]:\n            event[\"opp_team\"] = event[\"away_team\"]\n\n        elif event.get(\"event_team\") == event[\"away_team\"]:\n            event[\"opp_team\"] = event[\"home_team\"]\n\n        event[\"home_forwards_eh_id\"] = []\n        event[\"home_forwards_api_id\"] = []\n        event[\"home_forwards\"] = []\n        event[\"home_forwards_positions\"] = []\n\n        event[\"home_defense_eh_id\"] = []\n        event[\"home_defense_api_id\"] = []\n        event[\"home_defense\"] = []\n        event[\"home_defense_positions\"] = []\n\n        event[\"home_goalie_eh_id\"] = []\n        event[\"home_goalie_api_id\"] = []\n        event[\"home_goalie\"] = []\n\n        event[\"away_forwards_eh_id\"] = []\n        event[\"away_forwards_api_id\"] = []\n        event[\"away_forwards\"] = []\n        event[\"away_forwards_positions\"] = []\n\n        event[\"away_defense_eh_id\"] = []\n        event[\"away_defense_api_id\"] = []\n        event[\"away_defense\"] = []\n        event[\"away_defense_positions\"] = []\n\n        event[\"away_goalie_eh_id\"] = []\n        event[\"away_goalie_api_id\"] = []\n        event[\"away_goalie\"] = []\n\n        if (\n            self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n            and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"home_team\"]\n        ):\n            if game_session == \"R\" and event[\"period\"] != 5:\n                home_score += 1\n\n            elif game_session == \"R\" and event[\"period\"] == 5:\n                ot_events = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                ]\n\n                home_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\"\n                    and x[\"period\"] == 5\n                    and x[\"event_team\"] == event[\"home_team\"]\n                ]\n\n                away_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\"\n                    and x[\"period\"] == 5\n                    and x[\"event_team\"] == event[\"away_team\"]\n                ]\n\n                if event == ot_events[-1] and len(home_goals) &gt; len(away_goals):\n                    home_score += 1\n\n            else:\n                home_score += 1\n\n        elif (\n            self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n            and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"away_team\"]\n        ):\n            if game_session == \"R\" and event[\"period\"] != 5:\n                away_score += 1\n\n            elif game_session == \"R\" and event[\"period\"] == 5:\n                ot_events = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                ]\n\n                home_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\"\n                    and x[\"period\"] == 5\n                    and x[\"event_team\"] == event[\"home_team\"]\n                ]\n\n                away_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\"\n                    and x[\"period\"] == 5\n                    and x[\"event_team\"] == event[\"away_team\"]\n                ]\n\n                if event == ot_events[-1] and len(away_goals) &gt; len(home_goals):\n                    away_score += 1\n\n            else:\n                away_score += 1\n\n        event[\"home_score\"] = home_score\n        event[\"home_score_diff\"] = home_score - away_score\n\n        event[\"away_score\"] = away_score\n        event[\"away_score_diff\"] = away_score - home_score\n\n        event[\"score_state\"] = f\"{home_score}v{away_score}\"\n        event[\"score_diff\"] = home_score - away_score\n\n    roster = [x for x in self._rosters if x[\"status\"] == \"ACTIVE\"]\n\n    roster = sorted(roster, key=lambda k: (k[\"team_venue\"], k[\"jersey\"]))\n\n    for player in roster:\n        counter = 0\n\n        for event in self._play_by_play:\n            if (\n                event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                and event[\"event\"] == \"CHANGE\"\n                and event.get(\"change_on\") is not None\n            ):\n                players_on = [\n                    x\n                    for x in event[\"change_on_jersey\"].split(\", \")\n                    if x == player[\"team_jersey\"]\n                ]\n\n                if len(players_on) &gt; 0:\n                    counter += 1\n\n            if (\n                event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                and event[\"event\"] == \"CHANGE\"\n                and event.get(\"change_off\") is not None\n            ):\n                players_off = [\n                    x\n                    for x in event[\"change_off_jersey\"].split(\", \")\n                    if x == player[\"team_jersey\"]\n                ]\n\n                if len(players_off) &gt; 0:\n                    counter -= 1\n\n            if counter &gt; 0:\n                forwards = [\"L\", \"C\", \"R\"]\n\n                if player[\"team_venue\"] == \"HOME\":\n                    if player[\"position\"] in forwards:\n                        event[\"home_forwards_eh_id\"].append(player[\"eh_id\"])\n                        event[\"home_forwards_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"home_forwards\"].append(player[\"player_name\"])\n                        event[\"home_forwards_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"D\":\n                        event[\"home_defense_eh_id\"].append(player[\"eh_id\"])\n                        event[\"home_defense_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"home_defense\"].append(player[\"player_name\"])\n                        event[\"home_defense_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"G\":\n                        event[\"home_goalie_eh_id\"].append(player[\"eh_id\"])\n                        event[\"home_goalie_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"home_goalie\"].append(player[\"player_name\"])\n\n                else:\n                    if player[\"position\"] in forwards:\n                        event[\"away_forwards_eh_id\"].append(player[\"eh_id\"])\n                        event[\"away_forwards_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"away_forwards\"].append(player[\"player_name\"])\n                        event[\"away_forwards_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"D\":\n                        event[\"away_defense_eh_id\"].append(player[\"eh_id\"])\n                        event[\"away_defense_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"away_defense\"].append(player[\"player_name\"])\n                        event[\"away_defense_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"G\":\n                        event[\"away_goalie_eh_id\"].append(player[\"eh_id\"])\n                        event[\"away_goalie_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"away_goalie\"].append(player[\"player_name\"])\n\n    # Instantiating shapely objects for high-danger and danger area computations\n\n    high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n    high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n    danger1 = Polygon(\n        np.array(\n            [\n                [89, 9],\n                [89, -9],\n                [69, -22],\n                [54, -22],\n                [54, -9],\n                [44, -9],\n                [44, 9],\n                [54, 9],\n                [54, 22],\n                [69, 22],\n            ]\n        )\n    )\n    danger2 = Polygon(\n        np.array(\n            [\n                [-89, 9],\n                [-89, -9],\n                [-69, -22],\n                [-54, -22],\n                [-54, -9],\n                [-44, -9],\n                [-44, 9],\n                [-54, 9],\n                [-54, 22],\n                [-69, 22],\n            ]\n        )\n    )\n\n    final_events = []\n\n    for idx, event in enumerate(self._play_by_play):\n        if idx == 0:\n            event_length_idx = 0\n\n        else:\n            event_length_idx = idx - 1\n\n        new_values = {\n            \"event_idx\": idx + 1,\n            \"event_length\": event[\"game_seconds\"]\n            - self._play_by_play[event_length_idx][\"game_seconds\"],\n            \"home_on_eh_id\": event[\"home_forwards_eh_id\"]\n            + event[\"home_defense_eh_id\"],\n            \"home_on_api_id\": event[\"home_forwards_api_id\"]\n            + event[\"home_defense_api_id\"],\n            \"home_on\": event[\"home_forwards\"] + event[\"home_defense\"],\n            \"home_on_positions\": event[\"home_forwards_positions\"]\n            + event[\"home_defense_positions\"],\n            \"away_on_eh_id\": event[\"away_forwards_eh_id\"]\n            + event[\"away_defense_eh_id\"],\n            \"away_on_api_id\": event[\"away_forwards_api_id\"]\n            + event[\"away_defense_api_id\"],\n            \"away_on\": event[\"away_forwards\"] + event[\"away_defense\"],\n            \"away_on_positions\": event[\"away_forwards_positions\"]\n            + event[\"away_defense_positions\"],\n        }\n\n        event.update(new_values)\n\n        if event.get(\"event_team\") == event[\"home_team\"]:\n            event[\"is_home\"] = 1\n\n        else:\n            event[\"is_home\"] = 0\n\n        if event.get(\"event_team\") == event[\"away_team\"]:\n            event[\"is_away\"] = 1\n\n        else:\n            event[\"is_away\"] = 0\n\n        if (\n            event.get(\"coords_x\") is not None\n            and event.get(\"coords_x\") != \"\"\n            and event.get(\"coords_y\") is not None\n            and event.get(\"coords_y\") != \"\"\n        ):\n            # Fixing event angle and distance for errors\n\n            is_fenwick = event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n            is_long_distance = (\n                event[\"pbp_distance\"] is not None\n                and event.get(\"pbp_distance\", 0) &gt; 89\n            )\n            x_is_neg = event.get(\"coords_x\", 0) &lt; 0\n            x_is_pos = event.get(\"coords_x\", 0) &gt; 0\n            bad_shots = event.get(\"shot_type\", \"WRIST\") not in [\n                \"TIP-IN\",\n                \"WRAP-AROUND\",\n                \"WRAP\",\n                \"DEFLECTED\",\n                \"BAT\",\n                \"BETWEEN LEGS\",\n                \"POKE\",\n            ]\n\n            zone_cond = event.get(\"zone\") != \"OFF\"\n\n            x_is_neg_conds = (\n                is_fenwick &amp; is_long_distance &amp; x_is_neg &amp; bad_shots &amp; zone_cond\n            )\n\n            x_is_pos_conds = (\n                is_fenwick &amp; is_long_distance &amp; x_is_pos &amp; bad_shots &amp; zone_cond\n            )\n\n            if x_is_neg_conds is True:\n                event[\"event_distance\"] = (\n                    (abs(event[\"coords_x\"]) + 89) ** 2 + event[\"coords_y\"] ** 2\n                ) ** (1 / 2)\n\n                try:\n                    event[\"event_angle\"] = np.degrees(\n                        abs(\n                            np.arctan(\n                                event[\"coords_y\"] / (abs(event[\"coords_x\"] + 89))\n                            )\n                        )\n                    )\n\n                except ZeroDivisionError:\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            elif x_is_pos_conds is True:\n                event[\"event_distance\"] = (\n                    (event[\"coords_x\"] + 89) ** 2 + event[\"coords_y\"] ** 2\n                ) ** (1 / 2)\n\n                try:\n                    event[\"event_angle\"] = np.degrees(\n                        abs(np.arctan(event[\"coords_y\"] / (event[\"coords_x\"] + 89)))\n                    )\n\n                except ZeroDivisionError:\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            else:\n                event[\"event_distance\"] = (\n                    (89 - abs(event[\"coords_x\"])) ** 2 + event[\"coords_y\"] ** 2\n                ) ** (1 / 2)\n\n                try:\n                    event[\"event_angle\"] = np.degrees(\n                        abs(\n                            np.arctan(\n                                event[\"coords_y\"] / (89 - abs(event[\"coords_x\"]))\n                            )\n                        )\n                    )\n\n                except ZeroDivisionError:\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n        if (\n            event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n            and event.get(\"zone\") == \"DEF\"\n            and event.get(\"event_distance\", 0) &lt;= 64\n        ):\n            event[\"zone\"] = \"OFF\"\n\n        if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n            if event.get(\"zone\") == \"OFF\":\n                if (\n                    event.get(\"coords_x\") is not None\n                    and event.get(\"coords_y\") is not None\n                ):\n                    shot_coords = Point(event[\"coords_x\"], event[\"coords_y\"])\n\n                    if danger1.contains(shot_coords) or danger2.contains(\n                        shot_coords\n                    ):\n                        event[\"danger\"] = 1\n\n                    else:\n                        event[\"danger\"] = 0\n\n                    if high_danger1.contains(shot_coords) or high_danger2.contains(\n                        shot_coords\n                    ):\n                        event[\"high_danger\"] = 1\n\n                        event[\"danger\"] = 0\n\n                    else:\n                        event[\"high_danger\"] = 0\n\n                else:\n                    event[\"high_danger\"] = 0\n\n                    event[\"danger\"] = 0\n\n            else:\n                event[\"high_danger\"] = 0\n\n                event[\"danger\"] = 0\n\n        event[\"home_skaters\"] = len(event[\"home_on_eh_id\"])\n\n        event[\"away_skaters\"] = len(event[\"away_on_eh_id\"])\n\n        if not event[\"home_goalie\"]:\n            home_on = \"E\"\n\n        else:\n            home_on = event[\"home_skaters\"]\n\n        if not event[\"away_goalie\"]:\n            away_on = \"E\"\n\n        else:\n            away_on = event[\"away_skaters\"]\n\n        event[\"strength_state\"] = f\"{home_on}v{away_on}\"\n\n        if \"PENALTY SHOT\" in event[\"description\"]:\n            event[\"strength_state\"] = \"1v0\"\n\n        if event.get(\"event_team\") == event[\"home_team\"]:\n            new_values = {\n                \"strength_state\": f\"{home_on}v{away_on}\",\n                \"score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                \"score_diff\": event[\"home_score_diff\"],\n                \"event_team_skaters\": event[\"home_skaters\"],\n                \"teammates_eh_id\": event[\"home_on_eh_id\"],\n                \"teammates_api_id\": event[\"home_on_api_id\"],\n                \"teammates\": event[\"home_on\"],\n                \"teammates_positions\": event[\"home_on_positions\"],\n                \"forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                \"forwards_api_id\": event[\"home_forwards_api_id\"],\n                \"forwards\": event[\"home_forwards\"],\n                \"defense_eh_id\": event[\"home_defense_eh_id\"],\n                \"defense_api_id\": event[\"home_defense_api_id\"],\n                \"defense\": event[\"home_defense\"],\n                \"own_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                \"own_goalie_api_id\": event[\"home_goalie_api_id\"],\n                \"own_goalie\": event[\"home_goalie\"],\n                \"opp_strength_state\": f\"{away_on}v{home_on}\",\n                \"opp_score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                \"opp_score_diff\": event[\"away_score_diff\"],\n                \"opp_team_skaters\": event[\"away_skaters\"],\n                \"opp_team_on_eh_id\": event[\"away_on_eh_id\"],\n                \"opp_team_on_api_id\": event[\"away_on_api_id\"],\n                \"opp_team_on\": event[\"away_on\"],\n                \"opp_forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                \"opp_forwards_api_id\": event[\"away_forwards_api_id\"],\n                \"opp_forwards\": event[\"away_forwards\"],\n                \"opp_defense_eh_id\": event[\"away_defense_eh_id\"],\n                \"opp_defense_api_id\": event[\"away_defense_api_id\"],\n                \"opp_defense\": event[\"away_defense\"],\n                \"opp_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                \"opp_goalie_api_id\": event[\"away_goalie_api_id\"],\n                \"opp_goalie\": event[\"away_goalie\"],\n            }\n\n            event.update(new_values)\n\n        elif event.get(\"event_team\") == event[\"away_team\"]:\n            new_values = {\n                \"strength_state\": f\"{away_on}v{home_on}\",\n                \"score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                \"score_diff\": event[\"away_score_diff\"],\n                \"event_team_skaters\": event[\"away_skaters\"],\n                \"teammates_eh_id\": event[\"away_on_eh_id\"],\n                \"teammates_api_id\": event[\"away_on_api_id\"],\n                \"teammates\": event[\"away_on\"],\n                \"teammates_positions\": event[\"away_on_positions\"],\n                \"forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                \"forwards_api_id\": event[\"away_forwards_api_id\"],\n                \"forwards\": event[\"away_forwards\"],\n                \"defense_eh_id\": event[\"away_defense_eh_id\"],\n                \"defense_api_id\": event[\"away_defense_api_id\"],\n                \"defense\": event[\"away_defense\"],\n                \"own_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                \"own_goalie_api_id\": event[\"away_goalie_api_id\"],\n                \"own_goalie\": event[\"away_goalie\"],\n                \"opp_strength_state\": f\"{home_on}v{away_on}\",\n                \"opp_score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                \"opp_score_diff\": event[\"home_score_diff\"],\n                \"opp_team_skaters\": event[\"home_skaters\"],\n                \"opp_team_on_eh_id\": event[\"home_on_eh_id\"],\n                \"opp_team_on_api_id\": event[\"home_on_api_id\"],\n                \"opp_team_on\": event[\"home_on\"],\n                \"opp_team_on_positions\": event[\"home_on_positions\"],\n                \"opp_forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                \"opp_forwards_api_id\": event[\"home_forwards_api_id\"],\n                \"opp_forwards\": event[\"home_forwards\"],\n                \"opp_defense_eh_id\": event[\"home_defense_eh_id\"],\n                \"opp_defense_api_id\": event[\"home_defense_api_id\"],\n                \"opp_defense\": event[\"home_defense\"],\n                \"opp_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                \"opp_goalie_api_id\": event[\"home_goalie_api_id\"],\n                \"opp_goalie\": event[\"home_goalie\"],\n            }\n\n            event.update(new_values)\n\n        if (event[\"home_skaters\"] &gt; 5 and event[\"home_goalie\"] != []) or (\n            event[\"away_skaters\"] &gt; 5 and event[\"away_goalie\"] != []\n        ):\n            event[\"strength_state\"] = \"ILLEGAL\"\n\n            event[\"opp_strength_state\"] = \"ILLEGAL\"\n\n        if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n            event[\"strength_state\"] = \"1v0\"\n\n        if event[\"event\"] == \"CHANGE\":\n            faceoffs = [\n                x\n                for x in self._play_by_play\n                if (\n                    x[\"event\"] == \"FAC\"\n                    and x[\"game_seconds\"] == event[\"game_seconds\"]\n                    and x[\"period\"] == event[\"period\"]\n                )\n            ]\n\n            if len(faceoffs) &gt; 0:\n                game_seconds_list = [x[\"game_seconds\"] for x in self._play_by_play]\n\n                max_seconds = max(game_seconds_list)\n\n                bad_seconds = [0, 1200, 2400, 3600, 3900, max_seconds]\n\n                if event[\"game_seconds\"] not in bad_seconds:\n                    event[\"coords_x\"] = faceoffs[0].get(\"coords_x\", \"\")\n\n                    event[\"coords_y\"] = faceoffs[0].get(\"coords_y\", \"\")\n\n                    if event[\"event_team\"] == faceoffs[0][\"event_team\"]:\n                        event[\"zone_start\"] = faceoffs[0][\"zone\"]\n\n                    else:\n                        zones = {\"OFF\": \"DEF\", \"DEF\": \"OFF\", \"NEU\": \"NEU\"}\n\n                        event[\"zone_start\"] = zones[faceoffs[0][\"zone\"]]\n\n            else:\n                event[\"zone_start\"] = \"OTF\"\n\n        event_dummies = [\n            \"block\",\n            \"change\",\n            \"chl\",\n            \"fac\",\n            \"give\",\n            \"goal\",\n            \"hit\",\n            \"miss\",\n            \"penl\",\n            \"shot\",\n            \"stop\",\n            \"take\",\n        ]\n\n        for event_dummy in event_dummies:\n            if event[\"event\"].lower() == event_dummy:\n                event[event_dummy] = 1\n\n            else:\n                event[event_dummy] = 0\n\n        if event[\"event\"] == \"GOAL\" or event[\"event\"] == \"SHOT\":\n            event[\"shot\"] = 1\n\n        fenwick_events = [\"SHOT\", \"GOAL\", \"MISS\"]\n\n        if event[\"event\"] in fenwick_events:\n            event[\"fenwick\"] = 1\n\n        else:\n            event[\"fenwick\"] = 0\n\n        corsi_events = fenwick_events + [\"BLOCK\"]\n\n        if event[\"event\"] in corsi_events:\n            event[\"corsi\"] = 1\n\n        else:\n            event[\"corsi\"] = 0\n\n        if event[\"event\"] == \"FAC\":\n            if event[\"zone\"] == \"OFF\":\n                event[\"ozf\"] = 1\n\n            else:\n                event[\"ozf\"] = 0\n\n            if event[\"zone\"] == \"DEF\":\n                event[\"dzf\"] = 1\n\n            else:\n                event[\"dzf\"] = 0\n\n            if event[\"zone\"] == \"NEU\":\n                event[\"nzf\"] = 1\n\n            else:\n                event[\"nzf\"] = 0\n\n        else:\n            event[\"ozf\"] = 0\n            event[\"nzf\"] = 0\n            event[\"dzf\"] = 0\n\n        if event[\"event\"] == \"CHANGE\" and event.get(\"zone_start\") is not None:\n            if event[\"zone_start\"] == \"OFF\":\n                event[\"ozc\"] = 1\n\n            else:\n                event[\"ozc\"] = 0\n\n            if event[\"zone_start\"] == \"DEF\":\n                event[\"dzc\"] = 1\n\n            else:\n                event[\"dzc\"] = 0\n\n            if event[\"zone_start\"] == \"NEU\":\n                event[\"nzc\"] = 1\n\n            else:\n                event[\"nzc\"] = 0\n\n            if event[\"zone_start\"] == \"OTF\":\n                event[\"otf\"] = 1\n\n            else:\n                event[\"otf\"] = 0\n\n        else:\n            event[\"ozc\"] = 0\n            event[\"nzc\"] = 0\n            event[\"dzc\"] = 0\n            event[\"otf\"] = 0\n\n        if event[\"event\"] == \"PENL\":\n            penalty_lengths = [0, 2, 4, 5, 10]\n\n            for penalty_length in penalty_lengths:\n                if event.get(\"penalty_length\") == penalty_length:\n                    event[f\"pen{penalty_length}\"] = 1\n\n                else:\n                    event[f\"pen{penalty_length}\"] = 0\n\n        else:\n            event[\"pen0\"] = 0\n            event[\"pen2\"] = 0\n            event[\"pen4\"] = 0\n            event[\"pen5\"] = 0\n            event[\"pen10\"] = 0\n\n        final_events.append(PBPEvent.model_validate(event).model_dump())\n\n    self._play_by_play = final_events\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._combine_rosters","title":"_combine_rosters","text":"<pre><code>_combine_rosters()\n</code></pre> <p>Method to combine API and HTML rosters. Updates self._rosters</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _combine_rosters(self) -&gt; None:\n    \"\"\"Method to combine API and HTML rosters. Updates self._rosters\"\"\"\n\n    html_rosters = self._html_rosters\n    api_rosters = self._api_rosters\n\n    api_rosters_dict = {x[\"team_jersey\"]: x for x in api_rosters}\n\n    players = []\n\n    for player in html_rosters:\n        if player[\"status\"] == \"ACTIVE\":\n            api_info = api_rosters_dict[player[\"team_jersey\"]]\n\n        else:\n            api_info = {\n                \"api_id\": None,\n                \"headshot_url\": None,\n            }\n\n        player_info = {}\n\n        player_info.update(player)\n\n        new_values = {\n            \"api_id\": api_info[\"api_id\"],\n            \"headshot_url\": api_info[\"headshot_url\"],\n        }\n\n        player_info.update(new_values)\n\n        players.append(RosterPlayer.model_validate(player_info).model_dump())\n\n    self._rosters = players\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._scrape_shifts","title":"_scrape_shifts","text":"<pre><code>_scrape_shifts()\n</code></pre> <p>Method for scraping shifts from HTML endpoint. Updates self._shifts</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_shifts(self) -&gt; None:\n    \"\"\"Method for scraping shifts from HTML endpoint. Updates self._shifts\"\"\"\n\n    # Creating basic information from game ID\n    season = self.season\n    game_session = self.session\n    game_id = self.game_id\n\n    # This is the list for collecting all the game information for the end\n\n    game_list = []\n\n    # Dictionary of urls for scraping\n\n    urls_dict = {\n        \"HOME\": self.home_shifts_endpoint,\n        \"AWAY\": self.away_shifts_endpoint,\n    }\n\n    # Iterating through the url dictionary\n\n    for team_venue, url in urls_dict.items():\n        response = requests.get(url)\n\n        soup = BeautifulSoup(\n            response.content.decode(\"ISO-8859-1\"),\n            \"lxml\",\n            multi_valued_attributes=None,\n        )\n\n        # Getting team names from the HTML Data\n\n        team_name = soup.find(\n            \"td\", {\"align\": \"center\", \"class\": \"teamHeading + border\"}\n        )\n\n        # Converting team names to proper format\n\n        if team_name is None:\n            continue\n\n        team_name = unidecode(team_name.get_text())\n\n        if team_name == \"PHOENIX COYOTES\":\n            team_name = \"ARIZONA COYOTES\"\n\n        elif \"CANADIENS\" in team_name:\n            team_name = \"MONTREAL CANADIENS\"\n\n        # Getting players from the HTML data\n\n        players = soup.find_all(\n            \"td\", {\"class\": [\"playerHeading + border\", \"lborder + bborder\"]}\n        )\n\n        # Creating a dictionary to collect the players' information\n\n        players_dict = {}\n\n        # Iterating through the players\n\n        for player in players:\n            # Getting player's data\n\n            data = player.get_text()\n\n            # If there is a name in the data, get the information\n\n            if \", \" in data:\n                name = data.split(\",\", 1)\n\n                jersey = name[0].split(\" \")[0].strip()\n\n                last_name = name[0].split(\" \", 1)[1].strip()\n\n                first_name = re.sub(r\"\\(\\s?(.+)\\)\", \"\", name[1]).strip()\n\n                full_name = f\"{first_name} {last_name}\"\n\n                if full_name == \" \":\n                    continue\n\n                new_values = {\n                    full_name: {\n                        \"player_name\": full_name,\n                        \"jersey\": jersey,\n                        \"shifts\": [],\n                    }\n                }\n\n                players_dict.update(new_values)\n\n            # If there is not a name it is likely because these are shift information, not player information\n\n            else:\n                if full_name == \" \":\n                    continue\n\n                # Extend the player's shift information with the shift data\n\n                players_dict[full_name][\"shifts\"].extend([data])\n\n        # Iterating through the player's dictionary,\n        # which has a key of the player's name and an array of shift-arrays\n\n        for player, shifts in players_dict.items():\n            # Getting the number of shifts\n\n            length = int(len(np.array(shifts[\"shifts\"])) / 5)\n\n            # Reshaping the shift data into fields and values\n\n            for number, shift in enumerate(\n                np.array(shifts[\"shifts\"]).reshape(length, 5)\n            ):\n                # Adding header values to the shift data\n\n                headers = [\n                    \"shift_count\",\n                    \"period\",\n                    \"shift_start\",\n                    \"shift_end\",\n                    \"duration\",\n                ]\n\n                # Creating a dictionary from the headers and the shift data\n\n                shift_dict = dict(zip(headers, shift.flatten()))\n\n                # Adding other data to the shift dictionary\n\n                new_values = {\n                    \"season\": season,\n                    \"session\": game_session,\n                    \"game_id\": game_id,\n                    \"team_name\": team_name,\n                    \"team\": team_codes[team_name],\n                    \"team_venue\": team_venue.upper(),\n                    \"player_name\": unidecode(shifts[\"player_name\"]).upper(),\n                    \"team_jersey\": f\"{team_codes[team_name]}{shifts['jersey']}\",\n                    \"jersey\": int(shifts[\"jersey\"]),\n                    \"period\": int(\n                        shift_dict[\"period\"].replace(\"OT\", \"4\").replace(\"SO\", \"5\")\n                    ),\n                    \"shift_count\": int(shift_dict[\"shift_count\"]),\n                    \"shift_start\": unidecode(shift_dict[\"shift_start\"]).strip(),\n                    \"start_time\": unidecode(shift_dict[\"shift_start\"])\n                    .strip()\n                    .split(\"/\", 1)[0]\n                    .strip(),\n                    \"shift_end\": unidecode(shift_dict[\"shift_end\"]).strip(),\n                    \"end_time\": unidecode(shift_dict[\"shift_end\"])\n                    .strip()\n                    .split(\"/\", 1)[0]\n                    .strip(),\n                }\n\n                shift_dict.update(new_values)\n\n                # Appending the shift dictionary to the list of shift dictionaries\n\n                if shift_dict[\"start_time\"] != \"31:23\":\n                    game_list.append(shift_dict)\n\n    self._shifts = game_list\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Game._munge_shifts","title":"_munge_shifts","text":"<pre><code>_munge_shifts()\n</code></pre> <p>Method to munge list of shifts from HTML endpoint. Updates self._shifts</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_shifts(self) -&gt; None:\n    \"\"\"Method to munge list of shifts from HTML endpoint. Updates self._shifts\"\"\"\n\n    season = self.season\n    game_session = self.session\n\n    # Iterating through the lists of shifts\n\n    roster = self._html_rosters\n\n    actives = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"ACTIVE\"}\n    scratches = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"SCRATCH\"}\n\n    if self.game_id == 2020020860:\n        new_shifts = {\n            \"DAL29\": 5,\n            \"CHI60\": 4,\n            \"DAL14\": 27,\n            \"DAL21\": 22,\n            \"DAL3\": 28,\n            \"CHI5\": 27,\n            \"CHI88\": 26,\n            \"CHI12\": 26,\n        }\n\n        for new_player, shift_count in new_shifts.items():\n            new_player_info = actives[new_player]\n\n            new_goalies = [\"DAL29\", \"CHI60\"]\n\n            if new_player in new_goalies:\n                shift_start = \"0:00 / 5:00\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"4:30\"\n                start_time = \"0:00\"\n                end_time = \"4:30\"\n\n            new_players = [\"DAL14\", \"DAL21\", \"DAL3\", \"CHI5\"]\n\n            if new_player in new_players:\n                shift_start = \"3:47 / 1:13\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"00:43\"\n                start_time = \"3:47\"\n                end_time = \"4:30\"\n\n            if new_player == \"CHI88\":\n                shift_start = \"3:51 / 1:09\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"00:39\"\n                start_time = \"3:51\"\n                end_time = \"4:30\"\n\n            if new_player == \"CHI12\":\n                shift_start = \"4:14 / 0:46\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"00:16\"\n                start_time = \"4:14\"\n                end_time = \"4:30\"\n\n            new_shift = {\n                \"shift_count\": shift_count,\n                \"period\": 4,\n                \"shift_start\": shift_start,\n                \"shift_end\": shift_end,\n                \"duration\": duration,\n                \"season\": 20202021,\n                \"session\": \"R\",\n                \"game_id\": self.game_id,\n                \"team_name\": new_player_info[\"team_name\"],\n                \"team\": new_player_info[\"team\"],\n                \"team_venue\": new_player_info[\"team_venue\"],\n                \"player_name\": new_player_info[\"player_name\"],\n                \"team_jersey\": new_player_info[\"team_jersey\"],\n                \"jersey\": new_player_info[\"jersey\"],\n                \"start_time\": start_time,\n                \"end_time\": end_time,\n            }\n\n            self._shifts.append(new_shift)\n\n    for shift in self._shifts:\n        # Get active players and store them in a new dictionary with team jersey as key\n        # and other info as a value-dictionary\n\n        shift[\"eh_id\"] = actives.get(\n            shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"])\n        )[\"eh_id\"]\n\n        shift[\"position\"] = actives.get(\n            shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"])\n        )[\"position\"]\n\n        # Replacing some player names\n\n        shift[\"player_name\"] = (\n            shift[\"player_name\"]\n            .replace(\"ALEXANDRE\", \"ALEX\")\n            .replace(\"ALEXANDER\", \"ALEX\")\n            .replace(\"CHRISTOPHER\", \"CHRIS\")\n        )\n\n        shift[\"player_name\"] = correct_names_dict.get(\n            shift[\"player_name\"], shift[\"player_name\"]\n        )\n\n        # Adding seconds columns\n\n        cols = [\"start_time\", \"end_time\", \"duration\"]\n\n        for col in cols:\n            time_split = shift[col].split(\":\", 1)\n\n            # Sometimes the shift value can be blank, if it is, we'll skip the field and fix later\n\n            try:\n                shift[f\"{col}_seconds\"] = 60 * int(time_split[0]) + int(\n                    time_split[1]\n                )\n\n            except ValueError:\n                continue\n\n        # Fixing end time if it is blank or empty\n\n        if shift[\"end_time\"] == \" \" or shift[\"end_time\"] == \"\":\n            # Calculating end time based on duration seconds\n\n            shift[\"end_time_seconds\"] = (\n                shift[\"start_time_seconds\"] + shift[\"duration_seconds\"]\n            )\n\n            # Creating end time based on time delta\n\n            shift[\"end_time\"] = str(\n                timedelta(seconds=shift[\"end_time_seconds\"])\n            ).split(\":\", 1)[1]\n\n        # If the shift start is after the shift end, we need to fix the error\n\n        if shift[\"start_time_seconds\"] &gt; shift[\"end_time_seconds\"]:\n            # Creating new values based on game session and period\n\n            if shift[\"period\"] &lt; 4:\n                # Setting the end time\n\n                shift[\"end_time\"] = \"20:00\"\n\n                # Setting the end time in seconds\n\n                shift[\"end_time_seconds\"] = 1200\n\n                # Setting the shift end\n\n                shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                # Setting duration and duration in seconds\n\n                shift[\"duration_seconds\"] = (\n                    shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n                )\n\n                shift[\"duration\"] = str(\n                    timedelta(seconds=shift[\"duration_seconds\"])\n                ).split(\":\", 1)[1]\n\n            else:\n                if game_session == \"P\":\n                    total_seconds = 1200\n\n                else:\n                    total_seconds = 300\n\n                # Need to get the end period to get the end time in seconds\n\n                max_period = max(\n                    [\n                        int(shift[\"period\"])\n                        for shift in self._shifts\n                        if shift[\"period\"] != \" \"\n                    ]\n                )\n\n                # Getting the end time in seconds for the final period\n\n                max_seconds = max(\n                    [\n                        shift[\"end_time_seconds\"]\n                        for shift in self._shifts\n                        if \"end_time_seconds\" in shift.keys()\n                        and shift[\"period\"] == max_period\n                    ]\n                )\n\n                shift[\"end_time_seconds\"] = max_seconds\n\n                # Setting end time\n\n                end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                # Setting remainder time\n\n                remainder = str(\n                    timedelta(seconds=(total_seconds - max_seconds))\n                ).split(\":\", 1)[1]\n\n                shift[\"end_time\"] = end_time\n\n                shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n        # Setting goalie values\n\n        if shift[\"position\"] == \"G\":\n            shift[\"goalie\"] = 1\n\n        else:\n            shift[\"goalie\"] = 0\n\n        # Setting home and away values\n\n        if shift[\"team_venue\"] == \"HOME\":\n            shift[\"is_home\"] = 1\n\n            shift[\"is_away\"] = 0\n\n        else:\n            shift[\"is_home\"] = 0\n\n            shift[\"is_away\"] = 1\n\n    periods = np.unique([x[\"period\"] for x in self._shifts]).tolist()\n\n    # Setting list of teams to iterate through while iterating through the periods\n\n    teams = [\"HOME\", \"AWAY\"]\n\n    for period in periods:\n        # Getting max seconds for the period\n\n        max_seconds = max(\n            [\n                int(x[\"end_time_seconds\"])\n                for x in self._shifts\n                if x[\"period\"] == period\n            ]\n        )\n\n        # Iterating through home and away teams\n\n        for team in teams:\n            # Getting the team's goalies for the game\n\n            team_goalies = [\n                x\n                for x in self._shifts\n                if x[\"goalie\"] == 1 and x[\"team_venue\"] == team\n            ]\n\n            # Getting the goalies for the period\n\n            goalies = [\n                x\n                for x in self._shifts\n                if x[\"goalie\"] == 1\n                and x[\"team_venue\"] == team\n                and x[\"period\"] == period\n            ]\n\n            # If there are no goalies changing during the period, we need to add them\n\n            if len(goalies) &lt; 1:\n                if period == 1:\n                    if len(team_goalies) &lt; 1:\n                        first_goalie = {}\n\n                        starter = [\n                            x\n                            for x in actives.values()\n                            if x[\"position\"] == \"G\"\n                            and x[\"team_venue\"] == team\n                            and x[\"starter\"] == 1\n                        ][0]\n\n                        new_values = {\n                            \"season\": season,\n                            \"session\": game_session,\n                            \"game_id\": self.game_id,\n                            \"period\": period,\n                            \"team_venue\": team,\n                            \"goalie\": 1,\n                            \"shift_count\": 1,\n                        }\n\n                        new_values.update(starter)\n\n                        if team == \"HOME\":\n                            new_values.update({\"is_home\": 1, \"is_away\": 0})\n\n                        else:\n                            new_values.update({\"is_away\": 1, \"is_home\": 0})\n\n                        first_goalie.update(new_values)\n\n                    else:\n                        first_goalie = team_goalies[0]\n\n                    # Initial dictionary is set using data from the first goalie to appear\n\n                    goalie_shift = dict(first_goalie)\n\n                else:\n                    # Initial dictionary is set using data from the pervious goalie to appear\n\n                    prev_goalie = [\n                        x for x in team_goalies if x[\"period\"] == (period - 1)\n                    ][-1]\n\n                    goalie_shift = dict(prev_goalie)\n\n                # Setting goalie shift number so we can identify later\n\n                goalie_shift[\"number\"] = 0\n\n                # Setting the period for the current period\n\n                goalie_shift[\"period\"] = period\n\n                # Setting the start time\n\n                goalie_shift[\"start_time\"] = \"0:00\"\n\n                # Setting the start time in seconds\n\n                goalie_shift[\"start_time_seconds\"] = 0\n\n                # If during regular time\n\n                if period &lt; 4:\n                    # Setting shift start value\n\n                    goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                    if max_seconds &lt; 1200:\n                        # Setting end time value\n\n                        goalie_shift[\"end_time\"] = \"20:00\"\n\n                        # Setting end time in seconds\n\n                        goalie_shift[\"end_time_seconds\"] = 1200\n\n                        # Setting the duration, assuming they were out there the whole time\n\n                        goalie_shift[\"duration\"] = \"20:00\"\n\n                        # Setting the duration in seconds, assuming they were out there the whole time\n\n                        goalie_shift[\"duration_seconds\"] = 1200\n\n                        # Setting the shift end value\n\n                        goalie_shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                # If the period is greater than 3\n\n                else:\n                    # Need to account for whether regular season or playoffs\n\n                    if game_session == \"P\":\n                        goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                        total_seconds = 1200\n\n                    else:\n                        goalie_shift[\"shift_start\"] = \"0:00 / 5:00\"\n\n                        total_seconds = 300\n\n                    if max_seconds &lt; total_seconds:\n                        # Getting end time\n\n                        end_time = str(timedelta(seconds=max_seconds)).split(\n                            \":\", 1\n                        )[1]\n\n                        # Getting remainder time\n\n                        remainder = str(\n                            timedelta(seconds=(total_seconds - max_seconds))\n                        ).split(\":\", 1)[1]\n\n                        # Setting values\n\n                        goalie_shift[\"end_time_seconds\"] = max_seconds\n\n                        goalie_shift[\"end_time\"] = end_time\n\n                        goalie_shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                # Appending the new goalie shift to the game list\n\n                self._shifts.append(goalie_shift)\n\n        # Iterating through the shifts\n\n        for shift in self._shifts:\n            # Fixing goalie errors\n\n            if (\n                shift[\"goalie\"] == 1\n                and shift[\"period\"] == period\n                and shift[\"shift_end\"] == \"0:00 / 0:00\"\n            ):\n                if period &lt; 4:\n                    shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    shift[\"end_time\"] = \"20:00\"\n\n                    shift[\"end_time_seconds\"] = 1200\n\n                else:\n                    if game_session == \"R\":\n                        total_seconds = 300\n\n                    else:\n                        total_seconds = 1200\n\n                    end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                    remainder = str(\n                        timedelta(seconds=(total_seconds - max_seconds))\n                    ).split(\":\", 1)[1]\n\n                    shift[\"end_time_seconds\"] = max_seconds\n\n                    shift[\"end_time\"] = end_time\n\n                    shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n    self._shifts = [\n        PlayerShift.model_validate(shift).model_dump() for shift in self._shifts\n    ]\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season","title":"Season","text":"<p>Class instance for scraping schedule and standings data. Helpful for pulling game IDs and scraping programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int or float or str</code> <p>4-digit year identifier, the first year in the season, e.g., 2023</p> required <p>Attributes:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit year identifier, the year entered, plus 1, e.g., 20232024</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Scrape schedule information</p> <pre><code>&gt;&gt;&gt; nsh_schedule = season.schedule('NSH') # Returns the schedule for the Nashville Predators\n</code></pre> <p>Scrape standings information</p> <pre><code>&gt;&gt;&gt; standings = season.standings # Returns the latest standings for that season\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Season:\n    \"\"\"\n    Class instance for scraping schedule and standings data. Helpful for pulling game IDs and\n    scraping programmatically.\n\n    Parameters:\n        year (int or float or str):\n            4-digit year identifier, the first year in the season, e.g., 2023\n\n    Attributes:\n        season (int):\n            8-digit year identifier, the year entered, plus 1, e.g., 20232024\n\n\n    Examples:\n        &gt;&gt;&gt; season = Season(2023)\n\n        Scrape schedule information\n        &gt;&gt;&gt; nsh_schedule = season.schedule('NSH') # Returns the schedule for the Nashville Predators\n\n        Scrape standings information\n        &gt;&gt;&gt; standings = season.standings # Returns the latest standings for that season\n\n    \"\"\"\n\n    def __init__(self, year: str | int | float):\n        if len(str(year)) == 8:\n            self.season = int(year)\n\n        elif len(str(year)) == 4:\n            self.season = int(f\"{year}{int(year) + 1}\")\n\n        first_year = int(str(self.season)[0:4])\n\n        teams_1917 = [\"MTL\", \"MWN\", \"SEN\", \"TAN\"]\n\n        teams_1918 = [\"MTL\", \"SEN\", \"TAN\"]\n\n        teams_1919 = [\"MTL\", \"QBD\", \"SEN\", \"TSP\"]\n\n        teams_1920 = [\"HAM\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1924 = [\"BOS\", \"HAM\", \"MMR\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1925 = [\"BOS\", \"MMR\", \"MTL\", \"NYA\", \"PIR\", \"SEN\", \"TSP\"]\n\n        teams_1926 = [\n            \"BOS\",\n            \"CHI\",\n            \"DCG\",\n            \"MMR\",\n            \"MTL\",\n            \"NYA\",\n            \"NYR\",\n            \"PIR\",\n            \"SEN\",\n            \"TSP\",\n        ]\n\n        teams_1927 = [\n            \"BOS\",\n            \"CHI\",\n            \"DCG\",\n            \"MMR\",\n            \"MTL\",\n            \"NYA\",\n            \"NYR\",\n            \"PIR\",\n            \"SEN\",\n            \"TOR\",\n        ]\n\n        teams_1930 = [\n            \"BOS\",\n            \"CHI\",\n            \"DFL\",\n            \"MMR\",\n            \"MTL\",\n            \"NYA\",\n            \"NYR\",\n            \"QUA\",\n            \"SEN\",\n            \"TOR\",\n        ]\n\n        teams_1931 = [\"BOS\", \"CHI\", \"DFL\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1932 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SEN\", \"TOR\"]\n\n        teams_1934 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SLE\", \"TOR\"]\n\n        teams_1935 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1938 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1941 = [\"BOS\", \"BRK\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1942 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1967 = [\n            \"BOS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYR\",\n            \"OAK\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n        ]\n\n        teams_1970 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n        ]\n\n        teams_1972 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n        ]\n\n        teams_1974 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"KCS\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1976 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLE\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1978 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1979 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1980 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1982 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1991 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1992 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1993 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1995 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1996 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1997 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1998 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1999 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2000 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2011 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2014 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2017 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2021 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SEA\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        self._teams_dict = {\n            1917: teams_1917,\n            1918: teams_1918,\n            1919: teams_1919,\n            1920: teams_1920,\n            1921: teams_1920,\n            1922: teams_1920,\n            1923: teams_1920,\n            1924: teams_1924,\n            1925: teams_1925,\n            1926: teams_1926,\n            1927: teams_1927,\n            1928: teams_1927,\n            1929: teams_1927,\n            1930: teams_1930,\n            1931: teams_1931,\n            1932: teams_1932,\n            1933: teams_1932,\n            1934: teams_1934,\n            1935: teams_1935,\n            1936: teams_1935,\n            1937: teams_1935,\n            1938: teams_1938,\n            1939: teams_1938,\n            1940: teams_1938,\n            1941: teams_1941,\n            1942: teams_1942,\n            1943: teams_1942,\n            1944: teams_1942,\n            1945: teams_1942,\n            1946: teams_1942,\n            1947: teams_1942,\n            1948: teams_1942,\n            1949: teams_1942,\n            1950: teams_1942,\n            1951: teams_1942,\n            1952: teams_1942,\n            1953: teams_1942,\n            1954: teams_1942,\n            1955: teams_1942,\n            1956: teams_1942,\n            1957: teams_1942,\n            1958: teams_1942,\n            1959: teams_1942,\n            1960: teams_1942,\n            1961: teams_1942,\n            1962: teams_1942,\n            1963: teams_1942,\n            1964: teams_1942,\n            1965: teams_1942,\n            1966: teams_1942,\n            1967: teams_1967,\n            1968: teams_1967,\n            1969: teams_1967,\n            1970: teams_1970,\n            1971: teams_1970,\n            1972: teams_1972,\n            1973: teams_1972,\n            1974: teams_1974,\n            1975: teams_1974,\n            1976: teams_1976,\n            1977: teams_1976,\n            1978: teams_1978,\n            1979: teams_1979,\n            1980: teams_1980,\n            1981: teams_1980,\n            1982: teams_1982,\n            1983: teams_1982,\n            1984: teams_1982,\n            1985: teams_1982,\n            1986: teams_1982,\n            1987: teams_1982,\n            1988: teams_1982,\n            1989: teams_1982,\n            1990: teams_1982,\n            1991: teams_1991,\n            1992: teams_1992,\n            1993: teams_1993,\n            1994: teams_1993,\n            1995: teams_1995,\n            1996: teams_1996,\n            1997: teams_1997,\n            1998: teams_1998,\n            1999: teams_1999,\n            2000: teams_2000,\n            2001: teams_2000,\n            2002: teams_2000,\n            2003: teams_2000,\n            2004: teams_2000,\n            2005: teams_2000,\n            2006: teams_2000,\n            2007: teams_2000,\n            2008: teams_2000,\n            2009: teams_2000,\n            2010: teams_2000,\n            2011: teams_2011,\n            2012: teams_2011,\n            2013: teams_2011,\n            2014: teams_2014,\n            2015: teams_2014,\n            2016: teams_2014,\n            2017: teams_2017,\n            2018: teams_2017,\n            2019: teams_2017,\n            2020: teams_2017,\n            2021: teams_2021,\n            2022: teams_2021,\n            2023: teams_2021,\n        }\n\n        self.teams = self._teams_dict.get(first_year)\n\n        if self._teams_dict.get(first_year) is None:\n            raise Exception(f\"{first_year} IS NOT SUPPORTED\")\n\n        self._scraped_schedule_teams = []\n\n        self._scraped_schedule = []\n\n        self._standings = []\n\n        self._requests_session = s_session()\n\n        self._season_str = str(self.season)[:4] + \"-\" + str(self.season)[6:8]\n\n    def _scrape_schedule(\n        self, team_schedule: str = \"all\", sessions: list | None | str | int = None\n    ) -&gt; None:\n        \"\"\"Method to scrape the schedule from NHL API endpoint\"\"\"\n        schedule_list = []\n\n        if team_schedule not in self._scraped_schedule_teams:\n            with self._requests_session as s:\n                with Progress(\n                    TextColumn(\"[progress.description]{task.description}\"),\n                    SpinnerColumn(),\n                    BarColumn(),\n                    TaskProgressColumn(),\n                    TextColumn(\"\u2022\"),\n                    TimeElapsedColumn(),\n                    TextColumn(\"\u2022\"),\n                    TimeRemainingColumn(),\n                    TextColumn(\"\u2022\"),\n                    ScrapeSpeedColumn(),\n                ) as progress:\n                    if team_schedule == \"all\":\n                        teams = self.teams\n\n                        pbar_stub = f\"{self._season_str} schedule information\"\n\n                        pbar_message = f\"Downloading {pbar_stub} for all teams...\"\n\n                        sched_task = progress.add_task(pbar_message, total=len(teams))\n\n                        for team in teams:\n                            if team in self._scraped_schedule_teams:\n                                if team != teams[-1]:\n                                    pbar_message = (\n                                        f\"Downloading {pbar_stub} for {team}...\"\n                                    )\n                                else:\n                                    pbar_message = f\"Finished downloading {pbar_stub}\"\n                                progress.update(\n                                    sched_task,\n                                    description=pbar_message,\n                                    advance=1,\n                                    refresh=True,\n                                )\n\n                                continue\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team}/{self.season}\"\n\n                            response = s.get(url).json()\n\n                            if response[\"games\"]:\n                                games = [\n                                    x\n                                    for x in response[\"games\"]\n                                    if x[\"id\"] not in self._scraped_schedule\n                                ]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule_teams.append(team)\n                                self._scraped_schedule.extend(\n                                    x[\"game_id\"] for x in games\n                                )\n\n                            if team != teams[-1]:\n                                pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                            else:\n                                pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(\n                                sched_task,\n                                description=pbar_message,\n                                advance=1,\n                                refresh=True,\n                            )\n                    else:\n                        if team_schedule not in self._scraped_schedule_teams:\n                            pbar_stub = f\"{self._season_str} schedule information for {team_schedule}\"\n                            pbar_message = f\"Downloading {pbar_stub}...\"\n                            sched_task = progress.add_task(pbar_message, total=1)\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team_schedule}/{self.season}\"\n                            response = s.get(url).json()\n\n                            if response[\"games\"]:\n                                games = [\n                                    x\n                                    for x in response[\"games\"]\n                                    if x[\"id\"] not in self._scraped_schedule\n                                ]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule.extend(\n                                    x[\"game_id\"] for x in games\n                                )\n                                self._scraped_schedule_teams.append(team_schedule)\n\n                            pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(\n                                sched_task,\n                                description=pbar_message,\n                                advance=1,\n                                refresh=True,\n                            )\n\n        schedule_list = sorted(\n            schedule_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"])\n        )\n\n        self._schedule = schedule_list\n\n    @staticmethod\n    def _munge_schedule(\n        games: list[dict], sessions: list | None | str | int\n    ) -&gt; list[dict]:\n        \"\"\"Method to munge the schedule from NHL API endpoint\"\"\"\n        returned_games = []\n\n        for game in games:\n            if sessions is None:\n                if game[\"gameType\"] not in [2, 3]:\n                    continue\n\n            elif isinstance(sessions, list):\n                if game[\"gameType\"] not in sessions:\n                    continue\n\n            else:\n                if int(game[\"gameType\"]) == sessions:\n                    continue\n\n            local_time = pytz.timezone(game[\"venueTimezone\"])\n\n            if \"Z\" in game[\"startTimeUTC\"]:\n                game[\"startTimeUTC\"] = game[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n            start_time_utc_dt: dt = dt.fromisoformat(game[\"startTimeUTC\"])\n            game_date_dt: dt = start_time_utc_dt.astimezone(local_time)\n\n            start_time = game_date_dt.strftime(\"%H:%M\")\n            game_date = game_date_dt.strftime(\"%Y-%m-%d\")\n\n            game_info = {\n                \"season\": game[\"season\"],\n                \"session\": game[\"gameType\"],\n                \"game_id\": game[\"id\"],\n                \"game_date\": game_date,\n                \"start_time\": start_time,\n                \"game_state\": game[\"gameState\"],\n                \"home_team\": game[\"homeTeam\"][\"abbrev\"],\n                \"home_team_id\": game[\"homeTeam\"][\"id\"],\n                \"home_score\": game[\"homeTeam\"].get(\"score\", 0),\n                \"away_team\": game[\"awayTeam\"][\"abbrev\"],\n                \"away_team_id\": game[\"awayTeam\"][\"id\"],\n                \"away_score\": game[\"awayTeam\"].get(\"score\", 0),\n                \"venue\": game[\"venue\"][\"default\"].upper(),\n                \"venue_timezone\": game[\"venueTimezone\"],\n                \"neutral_site\": int(game[\"neutralSite\"]),\n                \"game_date_dt\": game_date_dt,\n                \"tv_broadcasts\": game[\"tvBroadcasts\"],\n                \"home_logo\": game[\"homeTeam\"].get(\"logo\"),\n                \"home_logo_dark\": game[\"homeTeam\"].get(\"darkLogo\"),\n                \"away_logo\": game[\"awayTeam\"].get(\"logo\"),\n                \"away_logo_dark\": game[\"awayTeam\"].get(\"darkLogo\"),\n            }\n\n            returned_games.append(ScheduleGame.model_validate(game_info).model_dump())\n\n        return returned_games\n\n    @staticmethod\n    def _finalize_schedule(games: list[dict]) -&gt; pd.DataFrame:\n        \"\"\"Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame\"\"\"\n        df = pd.DataFrame(games)\n\n        return df\n\n    def schedule(\n        self,\n        team_schedule: str | None = \"all\",\n        sessions: list | None | str | int = None,\n    ) -&gt; pd.DataFrame:\n        \"\"\"Pandas DataFrame of the schedule from the NHL API. Returns either the whole schedule or a subset of teams'\n\n        Parameters:\n            team_schedule (str | None):\n                Three-letter team's schedule to scrape, e.g., NSH\n            sessions: (list | None | str | int, default=None):\n                Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank,\n                scrapes regular season and playoffs\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            session (int):\n                Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020015\n            start_time (str):\n                Start time for the game in the home time zone, in military time, e.g., 19:00\n            game_state (str):\n                Status of the game, whether official or future, e.g., OFF\n            home_team (str):\n                Three-letter code for the home team, e.g., NSH\n            home_team_id (int):\n                Two-digit code assigned to the home franchise by the NHL, e.g., 18\n            home_score (int):\n                Number of goals scored by the home team, e.g., 3\n            away_team (str):\n                Three-letter code for the away team, e.g., SEA\n            away_team_id (int):\n                Two-digit code assigned to the away franchise by the NHL, e.g., 55\n            away_score (int):\n                Number of goals scored by the away team, e.g., 0\n            venue (str):\n                Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA\n            venue_timezone (str):\n                Name of the venue timezone, e.g., US/Central\n            neutral_site (int):\n                Whether game is / was played at a neutral site location, e.g., 0\n            game_date_dt (dt.datetime):\n                Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00\n            tv_broadcasts (list):\n                Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A',\n                'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H',\n                'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]\n            home_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            home_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg\n            away_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg\n            away_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg\n\n        Examples:\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; schedule = season.schedule()\n\n            Get schedule for a single team\n            &gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n\n        \"\"\"\n        if team_schedule not in self._scraped_schedule_teams:\n            self._scrape_schedule(team_schedule=team_schedule, sessions=sessions)\n\n        if team_schedule != \"all\":\n            return_list = [\n                x\n                for x in self._schedule\n                if x[\"home_team\"] == team_schedule or x[\"away_team\"] == team_schedule\n            ]\n\n            return_list = sorted(\n                return_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"])\n            )\n\n            return self._finalize_schedule(return_list)\n\n        else:\n            return self._finalize_schedule(self._schedule)\n\n    def _scrape_standings(self):\n        \"\"\"Scrape standings from NHL API endpoint\"\"\"\n\n        url = \"https://api-web.nhle.com/v1/standings/now\"\n\n        with self._requests_session as s:\n            r = s.get(url).json()\n\n        self._standings = r[\"standings\"]\n\n    def _munge_standings(self):\n        \"\"\"Function to munge standings from NHL API endpoint\"\"\"\n\n        final_standings = []\n\n        for team in self._standings:\n            team_data = {\n                \"conference\": team[\"conferenceName\"],\n                \"date\": team[\"date\"],\n                \"division\": team[\"divisionName\"],\n                \"games_played\": team[\"gamesPlayed\"],\n                \"goal_differential\": team[\"goalDifferential\"],\n                \"goal_differential_pct\": team[\"goalDifferentialPctg\"],\n                \"goals_against\": team[\"goalAgainst\"],\n                \"goals_for\": team[\"goalFor\"],\n                \"goals_for_pct\": team[\"goalsForPctg\"],\n                \"home_games_played\": team[\"homeGamesPlayed\"],\n                \"home_goal_differential\": team[\"homeGoalDifferential\"],\n                \"home_goals_against\": team[\"homeGoalsAgainst\"],\n                \"home_goals_for\": team[\"homeGoalsFor\"],\n                \"home_losses\": team[\"homeLosses\"],\n                \"home_ot_losses\": team[\"homeOtLosses\"],\n                \"home_points\": team[\"homePoints\"],\n                \"home_wins\": team[\"homeWins\"],\n                \"home_regulation_wins\": team[\"homeRegulationWins\"],\n                \"home_ties\": team[\"homeTies\"],\n                \"l10_goal_differential\": team[\"l10GoalDifferential\"],\n                \"l10_goals_against\": team[\"l10GoalsAgainst\"],\n                \"l10_goals_for\": team[\"l10GoalsFor\"],\n                \"l10_losses\": team[\"l10Losses\"],\n                \"l10_ot_losses\": team[\"l10OtLosses\"],\n                \"l10_points\": team[\"l10Points\"],\n                \"l10_regulation_wins\": team[\"l10RegulationWins\"],\n                \"l10_ties\": team[\"l10Ties\"],\n                \"l10_wins\": team[\"l10Wins\"],\n                \"losses\": team[\"losses\"],\n                \"ot_losses\": team[\"otLosses\"],\n                \"points_pct\": team[\"pointPctg\"],\n                \"points\": team[\"points\"],\n                \"regulation_win_pct\": team[\"regulationWinPctg\"],\n                \"regulation_wins\": team[\"regulationWins\"],\n                \"road_games_played\": team[\"roadGamesPlayed\"],\n                \"road_goal_differential\": team[\"roadGoalDifferential\"],\n                \"road_goals_against\": team[\"roadGoalsAgainst\"],\n                \"road_goals_for\": team[\"roadGoalsFor\"],\n                \"road_losses\": team[\"roadLosses\"],\n                \"road_ot_losses\": team[\"roadOtLosses\"],\n                \"road_points\": team[\"roadPoints\"],\n                \"road_regulation_wins\": team[\"roadRegulationWins\"],\n                \"road_ties\": team[\"roadTies\"],\n                \"road_wins\": team[\"roadWins\"],\n                \"season\": team[\"seasonId\"],\n                \"shootoutLosses\": team[\"shootoutLosses\"],\n                \"shootout_wins\": team[\"shootoutWins\"],\n                \"streak_code\": team[\"streakCode\"],\n                \"streak_count\": team[\"streakCount\"],\n                \"team_name\": team[\"teamName\"][\"default\"],\n                \"team\": team[\"teamAbbrev\"][\"default\"],\n                \"team_logo\": team[\"teamLogo\"],\n                \"ties\": team[\"ties\"],\n                \"waivers_sequence\": team[\"waiversSequence\"],\n                \"wildcard_sequence\": team[\"wildcardSequence\"],\n                \"win_pct\": team[\"winPctg\"],\n                \"wins\": team[\"wins\"],\n            }\n\n            final_standings.append(StandingsTeam.model_validate(team_data).model_dump())\n\n        self._standings = final_standings\n\n    def _finalize_standings(self):\n        df = pd.DataFrame(self._standings).fillna(np.nan)\n\n        return df\n\n    @property\n    def standings(self):\n        \"\"\"Pandas DataFrame of the standings from the NHL API\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            date (str):\n                Date standings scraped, e.g., 2024-04-08\n            team (str):\n                Three-letter team code, e.g., NSH\n            team_name (str):\n                Full team name, e.g., Nashville Predators\n            conference (str):\n                Name of the conference in which the team plays, e.g., Western\n            division (str):\n                Name of the division in which the team plays, e.g., Central\n            games_played (int):\n                Number of games played, e.g., 78\n            points (int):\n                Number of points accumulated, e.g., 94\n            points_pct (float):\n                Points percentage, e.g., 0.602564\n            wins (int):\n                Number of wins, e.g., 45\n            regulation_wins (int):\n                Number of wins in regulation time, e.g., 36\n            shootout_wins (int):\n                Number of wins by shootout, e.g., 3\n            losses (int):\n                Number of losses, e.g., 29\n            ot_losses (int):\n                Number of losses in overtime play, e.g., 4\n            shootout_losses (int | np.nan):\n                Number of losses due during shootout, e.g., NaN\n            ties (int):\n                Number of ties, e.g., 0\n            win_pct (float):\n                Win percentage, e.g., 0.576923\n            regulation_win_pct (float):\n                Win percentage in regulation time, e.g., 0.461538\n            streak_code (str):\n                Whether streak is a winning or losing streak, e.g., W\n            streak_count (int):\n                Number of games won or lost, e.g., 1\n            goals_for (int):\n                Number of goals scored, e.g., 253\n            goals_against (int):\n                Number of goals against, e.g., 235\n            goals_for_pct (float):\n                Goals scored per game played, e.g., 3.24359\n            goal_differential (int):\n                Difference in goals scored and goals allowed, e.g., 18\n            goal_differential_pct (float):\n                Difference in goals scored and goals allowed as a percentage of...something, e.g., 0.230769\n            home_games_played (int):\n                Number of home games played, e.g., 39\n            home_points (int):\n                Number of home points accumulated, e.g., 45\n            home_goals_for (int):\n                Number of goals scored in home games, e.g., 126\n            home_goals_against (int):\n                Number of goals allowed in home games, e.g., 118\n            home_goal_differential (int):\n                Difference in home goals scored and home goals allowed, e.g., 8\n            home_wins (int):\n                Number of wins at home, e.g., 22\n            home_losses (int):\n                Number of losses at home, e.g., 16\n            home_ot_losses (int):\n                Number of home losses in overtime, e.g., 1\n            home_ties (int):\n                Number of ties at home, e.g., 0\n            home_regulation_wins (int):\n                Number of wins at home in regulation, e.g., 17\n            road_games_played (int):\n                Number of games played on the road, e.g., 39\n            road_points (int):\n                Number of points accumulated on the road, e.g., 49\n            road_goals_for (int):\n                Number of goals scored on the road, e.g., 127\n            road_goals_against (int):\n                Number of goals allowed on the road, e.g., 117\n            road_goal_differential (int):\n                Difference in goals scored and goals allowed on the road, e.g., 10\n            road_wins (int):\n                Number of wins on the road, e.g., 23\n            road_losses (int):\n                Number of losses on the road, e.g., 13\n            road_ot_losses (int):\n                Number of losses on the road in overtime, e.g., 3\n            road_ties (int):\n                Number of ties on the road, e.g., 0\n            road_regulation_wins (int):\n                Number of wins on the road in regulation, e.g., 19\n            l10_points (int):\n                Number of points accumulated in last ten games, e.g., 12\n            l10_goals_for (int):\n                Number of goals scored in last ten games, e.g., 34\n            l10_goals_against (int):\n                Number of goals allowed in last ten games, e.g., 31\n            l10_goal_differential (int):\n                Difference in goals scored and allowed in last ten games, e.g., 3\n            l10_wins (int):\n                Number of wins in last ten games, e.g., 6\n            l10_losses (int):\n                Number of losses in last ten games, e.g., 4\n            l10_ot_losses (int):\n                Number of losses in overtime in last ten games, e.g., 0\n            l10_ties (int):\n                Number of  ties in last ten games, e.g., 0\n            l10_regulation_wins (int):\n                Number of wins in regulation in last ten games, e.g., 4\n            team_logo (str):\n                URL for the team logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            wildcard_sequence (int):\n                Order for wildcard rankings, e.g., 1\n            waivers_sequence (int):\n                Order for waiver wire, e.g., 19\n\n        Examples:\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; standings = season.standings\n\n        \"\"\"\n\n        if not self._standings:\n            self._scrape_standings()\n            self._munge_standings()\n\n        return self._finalize_standings()\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season._scrape_schedule","title":"_scrape_schedule","text":"<pre><code>_scrape_schedule(team_schedule='all', sessions=None)\n</code></pre> <p>Method to scrape the schedule from NHL API endpoint</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_schedule(\n    self, team_schedule: str = \"all\", sessions: list | None | str | int = None\n) -&gt; None:\n    \"\"\"Method to scrape the schedule from NHL API endpoint\"\"\"\n    schedule_list = []\n\n    if team_schedule not in self._scraped_schedule_teams:\n        with self._requests_session as s:\n            with Progress(\n                TextColumn(\"[progress.description]{task.description}\"),\n                SpinnerColumn(),\n                BarColumn(),\n                TaskProgressColumn(),\n                TextColumn(\"\u2022\"),\n                TimeElapsedColumn(),\n                TextColumn(\"\u2022\"),\n                TimeRemainingColumn(),\n                TextColumn(\"\u2022\"),\n                ScrapeSpeedColumn(),\n            ) as progress:\n                if team_schedule == \"all\":\n                    teams = self.teams\n\n                    pbar_stub = f\"{self._season_str} schedule information\"\n\n                    pbar_message = f\"Downloading {pbar_stub} for all teams...\"\n\n                    sched_task = progress.add_task(pbar_message, total=len(teams))\n\n                    for team in teams:\n                        if team in self._scraped_schedule_teams:\n                            if team != teams[-1]:\n                                pbar_message = (\n                                    f\"Downloading {pbar_stub} for {team}...\"\n                                )\n                            else:\n                                pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(\n                                sched_task,\n                                description=pbar_message,\n                                advance=1,\n                                refresh=True,\n                            )\n\n                            continue\n\n                        url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team}/{self.season}\"\n\n                        response = s.get(url).json()\n\n                        if response[\"games\"]:\n                            games = [\n                                x\n                                for x in response[\"games\"]\n                                if x[\"id\"] not in self._scraped_schedule\n                            ]\n                            games = self._munge_schedule(games, sessions)\n                            schedule_list.extend(games)\n                            self._scraped_schedule_teams.append(team)\n                            self._scraped_schedule.extend(\n                                x[\"game_id\"] for x in games\n                            )\n\n                        if team != teams[-1]:\n                            pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                        else:\n                            pbar_message = f\"Finished downloading {pbar_stub}\"\n                        progress.update(\n                            sched_task,\n                            description=pbar_message,\n                            advance=1,\n                            refresh=True,\n                        )\n                else:\n                    if team_schedule not in self._scraped_schedule_teams:\n                        pbar_stub = f\"{self._season_str} schedule information for {team_schedule}\"\n                        pbar_message = f\"Downloading {pbar_stub}...\"\n                        sched_task = progress.add_task(pbar_message, total=1)\n\n                        url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team_schedule}/{self.season}\"\n                        response = s.get(url).json()\n\n                        if response[\"games\"]:\n                            games = [\n                                x\n                                for x in response[\"games\"]\n                                if x[\"id\"] not in self._scraped_schedule\n                            ]\n                            games = self._munge_schedule(games, sessions)\n                            schedule_list.extend(games)\n                            self._scraped_schedule.extend(\n                                x[\"game_id\"] for x in games\n                            )\n                            self._scraped_schedule_teams.append(team_schedule)\n\n                        pbar_message = f\"Finished downloading {pbar_stub}\"\n                        progress.update(\n                            sched_task,\n                            description=pbar_message,\n                            advance=1,\n                            refresh=True,\n                        )\n\n    schedule_list = sorted(\n        schedule_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"])\n    )\n\n    self._schedule = schedule_list\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season._munge_schedule","title":"_munge_schedule  <code>staticmethod</code>","text":"<pre><code>_munge_schedule(games, sessions)\n</code></pre> <p>Method to munge the schedule from NHL API endpoint</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>@staticmethod\ndef _munge_schedule(\n    games: list[dict], sessions: list | None | str | int\n) -&gt; list[dict]:\n    \"\"\"Method to munge the schedule from NHL API endpoint\"\"\"\n    returned_games = []\n\n    for game in games:\n        if sessions is None:\n            if game[\"gameType\"] not in [2, 3]:\n                continue\n\n        elif isinstance(sessions, list):\n            if game[\"gameType\"] not in sessions:\n                continue\n\n        else:\n            if int(game[\"gameType\"]) == sessions:\n                continue\n\n        local_time = pytz.timezone(game[\"venueTimezone\"])\n\n        if \"Z\" in game[\"startTimeUTC\"]:\n            game[\"startTimeUTC\"] = game[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n        start_time_utc_dt: dt = dt.fromisoformat(game[\"startTimeUTC\"])\n        game_date_dt: dt = start_time_utc_dt.astimezone(local_time)\n\n        start_time = game_date_dt.strftime(\"%H:%M\")\n        game_date = game_date_dt.strftime(\"%Y-%m-%d\")\n\n        game_info = {\n            \"season\": game[\"season\"],\n            \"session\": game[\"gameType\"],\n            \"game_id\": game[\"id\"],\n            \"game_date\": game_date,\n            \"start_time\": start_time,\n            \"game_state\": game[\"gameState\"],\n            \"home_team\": game[\"homeTeam\"][\"abbrev\"],\n            \"home_team_id\": game[\"homeTeam\"][\"id\"],\n            \"home_score\": game[\"homeTeam\"].get(\"score\", 0),\n            \"away_team\": game[\"awayTeam\"][\"abbrev\"],\n            \"away_team_id\": game[\"awayTeam\"][\"id\"],\n            \"away_score\": game[\"awayTeam\"].get(\"score\", 0),\n            \"venue\": game[\"venue\"][\"default\"].upper(),\n            \"venue_timezone\": game[\"venueTimezone\"],\n            \"neutral_site\": int(game[\"neutralSite\"]),\n            \"game_date_dt\": game_date_dt,\n            \"tv_broadcasts\": game[\"tvBroadcasts\"],\n            \"home_logo\": game[\"homeTeam\"].get(\"logo\"),\n            \"home_logo_dark\": game[\"homeTeam\"].get(\"darkLogo\"),\n            \"away_logo\": game[\"awayTeam\"].get(\"logo\"),\n            \"away_logo_dark\": game[\"awayTeam\"].get(\"darkLogo\"),\n        }\n\n        returned_games.append(ScheduleGame.model_validate(game_info).model_dump())\n\n    return returned_games\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season._finalize_schedule","title":"_finalize_schedule  <code>staticmethod</code>","text":"<pre><code>_finalize_schedule(games)\n</code></pre> <p>Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>@staticmethod\ndef _finalize_schedule(games: list[dict]) -&gt; pd.DataFrame:\n    \"\"\"Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame\"\"\"\n    df = pd.DataFrame(games)\n\n    return df\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season._scrape_standings","title":"_scrape_standings","text":"<pre><code>_scrape_standings()\n</code></pre> <p>Scrape standings from NHL API endpoint</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_standings(self):\n    \"\"\"Scrape standings from NHL API endpoint\"\"\"\n\n    url = \"https://api-web.nhle.com/v1/standings/now\"\n\n    with self._requests_session as s:\n        r = s.get(url).json()\n\n    self._standings = r[\"standings\"]\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season._munge_standings","title":"_munge_standings","text":"<pre><code>_munge_standings()\n</code></pre> <p>Function to munge standings from NHL API endpoint</p> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_standings(self):\n    \"\"\"Function to munge standings from NHL API endpoint\"\"\"\n\n    final_standings = []\n\n    for team in self._standings:\n        team_data = {\n            \"conference\": team[\"conferenceName\"],\n            \"date\": team[\"date\"],\n            \"division\": team[\"divisionName\"],\n            \"games_played\": team[\"gamesPlayed\"],\n            \"goal_differential\": team[\"goalDifferential\"],\n            \"goal_differential_pct\": team[\"goalDifferentialPctg\"],\n            \"goals_against\": team[\"goalAgainst\"],\n            \"goals_for\": team[\"goalFor\"],\n            \"goals_for_pct\": team[\"goalsForPctg\"],\n            \"home_games_played\": team[\"homeGamesPlayed\"],\n            \"home_goal_differential\": team[\"homeGoalDifferential\"],\n            \"home_goals_against\": team[\"homeGoalsAgainst\"],\n            \"home_goals_for\": team[\"homeGoalsFor\"],\n            \"home_losses\": team[\"homeLosses\"],\n            \"home_ot_losses\": team[\"homeOtLosses\"],\n            \"home_points\": team[\"homePoints\"],\n            \"home_wins\": team[\"homeWins\"],\n            \"home_regulation_wins\": team[\"homeRegulationWins\"],\n            \"home_ties\": team[\"homeTies\"],\n            \"l10_goal_differential\": team[\"l10GoalDifferential\"],\n            \"l10_goals_against\": team[\"l10GoalsAgainst\"],\n            \"l10_goals_for\": team[\"l10GoalsFor\"],\n            \"l10_losses\": team[\"l10Losses\"],\n            \"l10_ot_losses\": team[\"l10OtLosses\"],\n            \"l10_points\": team[\"l10Points\"],\n            \"l10_regulation_wins\": team[\"l10RegulationWins\"],\n            \"l10_ties\": team[\"l10Ties\"],\n            \"l10_wins\": team[\"l10Wins\"],\n            \"losses\": team[\"losses\"],\n            \"ot_losses\": team[\"otLosses\"],\n            \"points_pct\": team[\"pointPctg\"],\n            \"points\": team[\"points\"],\n            \"regulation_win_pct\": team[\"regulationWinPctg\"],\n            \"regulation_wins\": team[\"regulationWins\"],\n            \"road_games_played\": team[\"roadGamesPlayed\"],\n            \"road_goal_differential\": team[\"roadGoalDifferential\"],\n            \"road_goals_against\": team[\"roadGoalsAgainst\"],\n            \"road_goals_for\": team[\"roadGoalsFor\"],\n            \"road_losses\": team[\"roadLosses\"],\n            \"road_ot_losses\": team[\"roadOtLosses\"],\n            \"road_points\": team[\"roadPoints\"],\n            \"road_regulation_wins\": team[\"roadRegulationWins\"],\n            \"road_ties\": team[\"roadTies\"],\n            \"road_wins\": team[\"roadWins\"],\n            \"season\": team[\"seasonId\"],\n            \"shootoutLosses\": team[\"shootoutLosses\"],\n            \"shootout_wins\": team[\"shootoutWins\"],\n            \"streak_code\": team[\"streakCode\"],\n            \"streak_count\": team[\"streakCount\"],\n            \"team_name\": team[\"teamName\"][\"default\"],\n            \"team\": team[\"teamAbbrev\"][\"default\"],\n            \"team_logo\": team[\"teamLogo\"],\n            \"ties\": team[\"ties\"],\n            \"waivers_sequence\": team[\"waiversSequence\"],\n            \"wildcard_sequence\": team[\"wildcardSequence\"],\n            \"win_pct\": team[\"winPctg\"],\n            \"wins\": team[\"wins\"],\n        }\n\n        final_standings.append(StandingsTeam.model_validate(team_data).model_dump())\n\n    self._standings = final_standings\n</code></pre>"},{"location":"contribute/nonpublic/#chicken_nhl.scrape.Season._finalize_standings","title":"_finalize_standings","text":"<pre><code>_finalize_standings()\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _finalize_standings(self):\n    df = pd.DataFrame(self._standings).fillna(np.nan)\n\n    return df\n</code></pre>"},{"location":"contribute/roadmap/","title":"Roadmap","text":"<p>In production</p>"},{"location":"guide/guide/","title":"User Guide","text":"<p>Detailed walk-throughs and explanations</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/guide/#modules","title":"Modules","text":"<ul> <li> <p> chicken_nhl</p> <p>Overview of basic <code>chicken_nhl</code> usage &amp; functionalities</p> <p> Read more</p> </li> <li> <p> evolving_hockey</p> <p>Overview of basic <code>evolving_hockey</code> usage &amp; functionalities</p> <p> Read more</p> </li> </ul>"},{"location":"guide/guide/#tutorials","title":"Tutorials","text":"<ul> <li> <p> Shot Maps</p> <p>Plot shot locations for your favorite teams &amp; players using <code>chicken_nhl</code> and <code>hockey_rink</code> libraries</p> <p> Get started</p> </li> <li> <p> Faceoff win rate</p> <p>Analyze faceoff performance using <code>evolving_hockey</code> &amp; <code>matplotlib</code> libraries</p> <p> Get started</p> </li> <li> <p> Goals Saved Above Expected</p> <p>Analyze goalie performance using <code>evolving_hockey</code> &amp; <code>matplotlib</code> libraries</p> <p> Get started</p> </li> </ul>"},{"location":"guide/guide/#examples","title":"Examples","text":"<ul> <li> <p> Gallery</p> <p>Collection of charts produced using <code>chickenstats</code> &amp; accompanying source code </p> <p> Go to page</p> </li> <li> <p> Original Research</p> <p>Links to original research conducted &amp; other works published using <code>chickenstats</code></p> <p> Go to page</p> </li> </ul>"},{"location":"guide/chicken_nhl/chicken_nhl/","title":"chicken_nhl","text":"<p>Usage information about the <code>chicken_nhl</code> module.</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/chicken_nhl/chicken_nhl/#basic-usage","title":"Basic usage","text":""},{"location":"guide/chicken_nhl/chicken_nhl/#import-module","title":"Import module","text":"<p><code>chicken_nhl</code> scrapes data from various official NHL endpoints, combining them into a usable play-by-play dataframe. The module and the most relevant classes can be imported using the below snippet:</p> <pre><code>from chickenstats.chicken_nhl import Scraper, Season\n</code></pre>"},{"location":"guide/chicken_nhl/chicken_nhl/#season-and-game-ids","title":"<code>Season</code> and Game IDs","text":"<p>The module relies on game IDs, which can be found using the <code>schedule</code> method of <code>Season</code> class:</p> <pre><code>season = Season(2023)\nnsh_schedule = season.schedule('NSH') # (1)! \n\ngame_ids = nsh_schedule.game_id.tolist()[:10]\n</code></pre> <ol> <li>Provide three-letter code for subset of schedule</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#scraper","title":"<code>Scraper</code>","text":"<p>The <code>Scraper</code> object is used for scraping data from the API and HTML endpoints:</p> <pre><code>scraper = Scraper(game_ids) # (1)! \n\npbp = scraper.play_by_play # (2)!\n</code></pre> <ol> <li>The scraper object takes a list of game IDs</li> <li>Access play-by-play data as a Pandas DataFrame</li> </ol> <p>The <code>Scraper</code> object can also be used with individual game IDs:</p> <pre><code>scraper = Scraper(game_ids[0]) # (1)!\npbp = scraper.play_by_play\n</code></pre> <ol> <li>The scraper object takes a single game ID</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#other-data","title":"Other data","text":"<p>You can also access other data with the scraper object. The data will be scraped if it has not already been retrieved, which saves time and is friendlier to data sources:</p> <pre><code>scraper = Scraper(game_ids)\n\npbp = scraper.rosters # (1)! \n\nhtml_rosters = scraper.html_rosters # (2)! \n\nhtml_events = scraper.html_events # (3)! \n</code></pre> <ol> <li>Access roster data from both API and html endpoints</li> <li>HTML rosters are retrieved quickly because they have already been scraped</li> <li>HTML events are scraped, then combined with rosters already stored locally</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#standings","title":"Standings","text":"<p>You can also use a <code>Season</code> object to return that season's standings:</p> <pre><code>season = Season(2023)\nstandings = season.standings\n</code></pre>"},{"location":"guide/chicken_nhl/chicken_nhl/#advanced-usage","title":"Advanced usage","text":"<p>The <code>Scraper</code> object should be best for most of your scraping needs. However, there are additional  properties available with the <code>Game</code> object that can be helpful.</p>"},{"location":"guide/chicken_nhl/chicken_nhl/#game-object","title":"<code>Game</code> object","text":"<p>The <code>Game</code> object only works with a single game ID:</p> <pre><code>game = Game(2023020001)\n</code></pre>"},{"location":"guide/chicken_nhl/chicken_nhl/#lists-not-dataframes","title":"Lists, not DataFrames","text":"<p>The <code>Game</code> object's familiar functions return lists, instead of Pandas DataFrames:</p> <pre><code>game.play_by_play # (1)! \n\ngame.play_by_play_df # (2)! \n</code></pre> <ol> <li>Returns a list of play-by-play events</li> <li>Returns a Pandas DataFrame of play-by-play events</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#pre-processing","title":"Pre-processing","text":"<p>Data can be inspected at various processing stages through the <code>Game</code> object's non-public properties:</p> <pre><code>game._scrape_html_events # (1)! \n\ngame._munge_html_events # (2)!\n</code></pre> <ol> <li>Get the raw HTML events and store the without processing</li> <li>Process the raw HTML events and store them</li> </ol> <p>A list of the non-public properties can be found in  Contribute</p>"},{"location":"guide/evolving_hockey/evolving_hockey/","title":"evolving_hockey","text":"<p>Usage information about the <code>evolving_hockey</code> module.</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/evolving_hockey/evolving_hockey/#basic-usage","title":"Basic usage","text":""},{"location":"guide/evolving_hockey/evolving_hockey/#import-module","title":"Import module","text":"<p>The <code>evolving_hockey</code> module and relevant functions can be imported using the below snippet:</p> <pre><code>from chickenstats.evolving_hockey import prep_pbp, prep_stats, prep_lines, prep_team\n</code></pre>"},{"location":"guide/evolving_hockey/evolving_hockey/#play-by-play-data","title":"Play-by-play data","text":"<p>All functions will need a cleaned play-by-play dataframe in order to aggregate the statistics:</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv') # (1)! \npbp_raw = pd.read_csv('pbp_raw.csv') # (2)!\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <ol> <li>Get a Pandas DataFrame of shifts data from Evolving-Hockey.com</li> <li>Ditto for play-by-play data from Evolving-Hockey.com</li> </ol>"},{"location":"guide/evolving_hockey/evolving_hockey/#individual-stats","title":"Individual stats","text":"<p>You can use the cleaned play-by-play data to see individual stats, grouped at various levels. This example aggregates skaters' individual and on-ice statistics to the game level, grouped by teammates and opposition:</p> <pre><code>stats = prep_stats(pbp, level = \"game\", teammates = True, opposition = True)\n</code></pre> <p>This example groups individual and on-ice stats to the session level, grouping by score state:</p> <pre><code>stats = prep_stats(pbp, level = \"period\", score_state = True)\n</code></pre> <p>Basic game-level statistics can be viewed with the default keyword arguments:</p> <pre><code>stats = prep_stats(pbp)\n</code></pre>"},{"location":"guide/evolving_hockey/evolving_hockey/#line-stats","title":"Line stats","text":"<p>You can also aggregate the data for forward or defensive (or both) line stats. This first example aggregates line stats to the game level, grouped by opposition:</p> <pre><code>lines = prep_lines(pbp, positions = 'f', opposition = True)\n</code></pre> <p>Similarly to the <code>prep_stats</code> function, you can group by teammates and score state:</p> <pre><code>lines = prep_lines(pbp, positions = 'd', teammates = True, score_state = True)\n</code></pre>"},{"location":"guide/evolving_hockey/evolving_hockey/#team-stats","title":"Team stats","text":"<p>Aggregate team statistics in the same way as <code>prep_stats</code> and <code>prep_lines</code> functions. This examples aggregates team stats to game level:</p> <pre><code>teams = prep_teams(pbp, level = 'game')\n</code></pre> <p>You can also group by score state:</p> <pre><code>teams = prep_teams(pbp, level = 'period', score_state = True)\n</code></pre>"},{"location":"guide/examples/gallery/","title":"Gallery","text":"<p>In production</p>"},{"location":"guide/examples/original_research/","title":"Coming soon","text":"<p>In production</p>"},{"location":"guide/tutorials/faceoff_wins/","title":"Faceoff Win Rate","text":"<p>In production</p>"},{"location":"guide/tutorials/gsax/","title":"Goals Saved Above Expected","text":"<p>In production</p>"},{"location":"guide/tutorials/shot_maps/","title":"Shot Maps","text":"<p>In production</p>"},{"location":"home/getting_started/","title":"Getting started","text":"<p>Instructions for installing <code>chickenstats</code>, basic usage, and downloading example guides.</p> <p>For a more detailed walkthrough and additional examples, please consult the  User Guide</p>"},{"location":"home/getting_started/#requirements","title":"Requirements","text":"<p><code>chickenstats</code> requires Python 3.10 or later, preferably the most recent version (3.12).</p>"},{"location":"home/getting_started/#installation","title":"Installation","text":"<p><code>chickenstats</code> can be installed via PyPi:</p> <pre><code>pip install chickenstats\n</code></pre> <p>You can ensure the install was successful by checking that you have the latest version (1.7.8) installed:</p> <pre><code>pip show chickenstats\n</code></pre>"},{"location":"home/getting_started/#basic-usage","title":"Basic usage","text":"<code>chicken_nhl</code><code>evolving_hockey</code> <p>Once installed in your preferred environment, you can immediately begin using <code>chickenstats</code> in your preferred IDE. First, import the package and the relevant functions:</p> <pre><code>from chickenstats.chicken_nhl import Season, Scraper\n</code></pre> <p>Then, you're off. The <code>Season</code> object with the <code>schedule</code> property will return NHL game IDs, which can be used with the <code>Scraper</code> object to retrieve official NHL data and return a play-by-play dataframe.  <code>chicken_nhl</code> will return approximately one game every 3 seconds,  with no loss in performance when scraping hundreds (or thousands of games).</p> <p>The following snippet will scrape the first 100 games of the current season:</p> <pre><code>season = Season(2023)\n\nschedule = season.schedule() \n\ngame_ids = schedule.game_id.tolist()[:100]\n\nscraper = Scraper(game_ids)\n\npbp = scraper.play_by_play\n</code></pre> <p>If you wanted to only one team's schedule and game IDs:</p> <pre><code>season = Season(2023)\n\nnsh_schedule = season.schedule('NSH')\n\ngame_ids = nsh_schedule.game_id.tolist()\n</code></pre> <p>The <code>standings</code> property for the <code>Season</code> object will return the latest NHL standings:</p> <pre><code>season = Season(2023)\nstandings = season.standings\n</code></pre> <p>For a more detailed walkthrough and additional examples, please consult the  User Guide</p> <p>Once installed in your preferred environment, you can immediately begin using <code>chickenstats</code> in your preferred IDE. First, import the package and the relevant functions:</p> <pre><code>from chickenstats.evolving_hockey import prep_pbp, prep_stats, prep_lines, prep_team\n</code></pre> <p>The <code>evolving_hockey</code> functions require you to have a valid Evolving-Hockey subscription and access to the data  from the query portion of their site. </p> <p>The first step is prepare a processed play-by-play dataframe:</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Once you have the processed play-by-play dataframe, you can begin aggregating. </p> <p>For game-level individual and on-ice statistics, grouped by teammates:</p> <pre><code>stats = prep_stats(pbp, level = 'game', teammates = True)\n</code></pre> <p>For period-level forward line stats, grouped by score state:</p> <pre><code>lines = prep_lines(pbp, positions = 'f', level = 'period', score_state = True)\n</code></pre> <p>For game-level team stats:</p> <pre><code>teams = prep_team(pbp, level = \"game\")\n</code></pre> <p>For a more detailed walkthrough and additional examples, please consult the  User Guide</p>"},{"location":"home/getting_started/#tutorials-examples","title":"Tutorials &amp; examples","text":""},{"location":"home/help/","title":"Help","text":"<p>If you need help with any aspect of <code>chickenstats</code>, from installation to usage, please don't hesitate to reach out!</p>"},{"location":"home/help/#bugs-feature-requests","title":"Bugs &amp; feature requests","text":"<p>Please report any bugs or issues via the <code>chickenstats</code> issues page, where you can also post feature requests. Before doing so, please check the roadmap, there might already be plans to include your request. </p>"},{"location":"home/help/#contact-information","title":"Contact information","text":"<p>Have something to say? You can find me on  Twitter at @chickenandstats or   email me at chicken@chickenandstats.com.</p>"},{"location":"reference/reference/","title":"Reference","text":"<p>In-depth explanations and debugging assistance. See below for links to individual pages or sections.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/reference/#modules","title":"Modules","text":"<ul> <li> <p> <code>chicken_nhl</code></p> <p>Scrape data from official NHL endpoints</p> <p> Read more</p> </li> <li> <p> <code>evolving_hockey</code></p> <p>Munge data from Evolving Hockey</p> <p> Read more</p> </li> </ul>"},{"location":"reference/chicken_nhl/scrape/","title":"chicken_nhl.scrape","text":"<p>Reference materials for <code>chickenstats.chicken_nhl.scrape</code>. <code>Scraper</code>, <code>Season</code>, and <code>Game</code>  account for most of the functionality for <code>chickenstats.chicken_nhl</code>.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper","title":"Scraper","text":"<p>Class instance for scraping play-by-play and other data for NHL games.</p> <p>Parameters:</p> Name Type Description Default <code>game_ids</code> <code>list[str | float | int] | Series | str | float | int</code> <p>List of 10-digit game identifier, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> required <p>Attributes:</p> Name Type Description <code>game_ids</code> <code>list</code> <p>Game IDs that the Scraper will access, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = scraper.play_by_play\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = scraper.shifts\n&gt;&gt;&gt; rosters = scraper.rosters\n&gt;&gt;&gt; changes = scraper.changes\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = scraper.api_events\n&gt;&gt;&gt; api_rosters = scraper.api_rosters\n&gt;&gt;&gt; html_events = scraper.html_events\n&gt;&gt;&gt; html_rosters = scraper.html_rosters\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Scraper:\n    \"\"\"\n    Class instance for scraping play-by-play and other data for NHL games.\n\n    Parameters:\n        game_ids (list[str | float | int] | pd.Series | str | float | int):\n            List of 10-digit game identifier, e.g., `[2023020001, 2023020002, 2023020003]`\n\n    Attributes:\n        game_ids (list):\n            Game IDs that the Scraper will access, e.g., `[2023020001, 2023020002, 2023020003]`\n\n\n    Examples:\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = scraper.play_by_play\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = scraper.shifts\n        &gt;&gt;&gt; rosters = scraper.rosters\n        &gt;&gt;&gt; changes = scraper.changes\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = scraper.api_events\n        &gt;&gt;&gt; api_rosters = scraper.api_rosters\n        &gt;&gt;&gt; html_events = scraper.html_events\n        &gt;&gt;&gt; html_rosters = scraper.html_rosters\n\n    \"\"\"\n\n    def __init__(self, game_ids: list[str | float | int] | pd.Series | str | float | int):\n        game_ids = convert_to_list(game_ids, \"game ID\")\n\n        self.game_ids = game_ids\n        self._scraped_games = []\n        self._bad_games = []\n\n        self._requests_session = s_session()\n\n        self._api_events = []\n        self._scraped_api_events = []\n\n        self._api_rosters = []\n        self._scraped_api_rosters = []\n\n        self._changes = []\n        self._scraped_changes = []\n\n        self._html_events = []\n        self._scraped_html_events = []\n\n        self._html_rosters = []\n        self._scraped_html_rosters = []\n\n        self._rosters = []\n        self._scraped_rosters = []\n\n        self._shifts = []\n        self._scraped_shifts = []\n\n        self._play_by_play = []\n        self._scraped_play_by_play = []\n\n    def _scrape(self, scrape_type: str) -&gt; None:\n        scrape_types = [\n            \"api_events\",\n            \"api_rosters\",\n            \"changes\",\n            \"html_events\",\n            \"html_rosters\",\n            \"play_by_play\",\n            \"shifts\",\n            \"rosters\",\n        ]\n\n        pbar_stubs = {\n            \"api_events\": \"API events\",\n            \"api_rosters\": \"API rosters\",\n            \"changes\": \"changes\",\n            \"html_events\": \"HTML events\",\n            \"html_rosters\": \"HTML rosters\",\n            \"play_by_play\": \"play-by-play data\",\n            \"shifts\": \"shifts\",\n            \"rosters\": \"rosters\",\n        }\n\n        if scrape_type not in scrape_types:\n            raise Exception(\"Scrape type is not supported\")\n\n        if scrape_type == \"api_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_events]\n\n        if scrape_type == \"api_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_rosters]\n\n        if scrape_type == \"changes\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_changes]\n\n        if scrape_type == \"html_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_events]\n\n        if scrape_type == \"html_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_rosters]\n\n        if scrape_type == \"play_by_play\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_play_by_play]\n\n        if scrape_type == \"shifts\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        if scrape_type == \"rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        with self._requests_session as s:\n            with Progress(\n                TextColumn(\"[progress.description]{task.description}\"),\n                SpinnerColumn(),\n                BarColumn(),\n                TaskProgressColumn(),\n                TextColumn(\"\u2022\"),\n                TimeElapsedColumn(),\n                TextColumn(\"\u2022\"),\n                TimeRemainingColumn(),\n                TextColumn(\"\u2022\"),\n                MofNCompleteColumn(),\n                TextColumn(\"\u2022\"),\n                ScrapeSpeedColumn(),\n            ) as progress:\n                pbar_stub = pbar_stubs[scrape_type]\n\n                pbar_message = f\"Downloading {pbar_stub} for {game_ids[0]}...\"\n\n                game_task = progress.add_task(pbar_message, total=len(game_ids))\n\n                for idx, game_id in enumerate(game_ids):\n                    game = Game(game_id, s)\n\n                    if scrape_type == \"api_events\":\n                        if game_id in self._scraped_api_events:\n                            continue\n\n                        if game_id in self._scraped_api_rosters:\n                            game._api_rosters = [\n                                x for x in self._api_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_api_events:\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                        if game_id not in self._scraped_api_rosters:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"api_rosters\":\n                        if game_id in self._scraped_api_rosters:\n                            continue\n\n                        if game_id not in self._scraped_api_rosters:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"changes\":\n                        if game_id in self._scraped_changes:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id in self._scraped_shifts:\n                            game._shifts = [\n                                x for x in self._shifts if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_changes:\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        if game_id not in self._scraped_shifts:\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                    if scrape_type == \"html_events\":\n                        if game_id in self._scraped_html_events:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_html_events:\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if scrape_type == \"html_rosters\":\n                        if game_id in self._scraped_html_rosters:\n                            continue\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if scrape_type == \"play_by_play\":\n                        if game_id in self._scraped_play_by_play:\n                            continue\n\n                        if game_id in self._scraped_rosters:\n                            game._rosters = [\n                                x for x in self._rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            if game_id in self._scraped_html_rosters:\n                                game._html_rosters = [\n                                    x\n                                    for x in self._html_rosters\n                                    if x[\"game_id\"] == game_id\n                                ]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:\n                                game._api_rosters = [\n                                    x\n                                    for x in self._api_rosters\n                                    if x[\"game_id\"] == game_id\n                                ]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        if game_id in self._scraped_changes:\n                            game._changes = [\n                                x for x in self._changes if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            if game_id in self._scraped_shifts:\n                                game._shifts = [\n                                    x for x in self._shifts if x[\"game_id\"] == game_id\n                                ]\n\n                            else:\n                                self._shifts.extend(game.shifts)\n                                self._scraped_shifts.append(game_id)\n\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                        if game_id in self._scraped_html_events:\n                            game._html_events = [\n                                x for x in self._html_events if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                        if game_id in self._scraped_api_events:\n                            game._api_events = [\n                                x for x in self._api_events if x[\"game_id\"] == game_id\n                            ]\n\n                        else:\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                        if game_id not in self._scraped_play_by_play:\n                            self._play_by_play.extend(game.play_by_play)\n                            self._scraped_play_by_play.append(game_id)\n\n                    if scrape_type == \"rosters\":\n                        if game_id in self._scraped_rosters:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id in self._scraped_api_rosters:\n                            game._api_rosters = [\n                                x for x in self._api_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_rosters:\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        if game_id not in self._scraped_api_rosters:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"shifts\":\n                        if game_id in self._scraped_shifts:\n                            continue\n\n                        if game_id in self._scraped_html_rosters:\n                            game._html_rosters = [\n                                x for x in self._html_rosters if x[\"game_id\"] == game_id\n                            ]\n\n                        if game_id not in self._scraped_shifts:\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                        if game_id not in self._scraped_html_rosters:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if game_id != self.game_ids[-1]:\n                        pbar_message = (\n                            f\"Downloading {pbar_stub} for {self.game_ids[idx + 1]}...\"\n                        )\n\n                    else:\n                        pbar_message = f\"Finished downloading {pbar_stub}\"\n\n                    progress.update(\n                        game_task, description=pbar_message, advance=1, refresh=True\n                    )\n\n    def add_games(self, game_ids: list[int | str | float] | int) -&gt; None:\n        \"\"\"Method to add games to the Scraper\n\n        Parameters:\n            game_ids (list or int or float or str):\n                List-like object of or single 10-digit game identifier, e.g., 2023020001\n\n        Examples:\n            Instantiate Scraper\n            &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n            &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n            Scrape something\n            &gt;&gt;&gt; scraper.play_by_play\n\n            Add games\n            &gt;&gt;&gt; scraper.add_games(2023020011)\n\n            Scrape some more\n            &gt;&gt;&gt; scraper.play_by_play\n\n\n        \"\"\"\n        if isinstance(game_ids, str) or isinstance(game_ids, int):\n            game_ids = [game_ids]\n\n        game_ids = [int(x) for x in game_ids if x not in self.game_ids]\n\n        self.game_ids.extend(game_ids)\n\n    @property\n    def api_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas DataFrame of events scraped from API endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_events\n\n        \"\"\"\n\n        if not self._api_events:\n            self._scrape(\"api_events\")\n\n        return pd.DataFrame(self._api_events).fillna(np.nan)\n\n    @property\n    def api_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_rosters\n        \"\"\"\n        if not self._api_rosters:\n            self._scrape(\"api_rosters\")\n\n        return pd.DataFrame(self._api_rosters).fillna(np.nan)\n\n    @property\n    def changes(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.changes\n        \"\"\"\n        if not self._changes:\n            self._scrape(\"changes\")\n\n        return pd.DataFrame(self._changes).fillna(np.nan)\n\n    @property\n    def html_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_events\n\n        \"\"\"\n        if not self._html_events:\n            self._scrape(\"html_events\")\n\n        return pd.DataFrame(self._html_events).fillna(np.nan)\n\n    @property\n    def html_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_rosters\n\n        \"\"\"\n        if not self._html_rosters:\n            self._scrape(\"html_rosters\")\n\n        return pd.DataFrame(self._html_rosters).fillna(np.nan)\n\n    @property\n    def play_by_play(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.play_by_play\n\n        \"\"\"\n        if self.game_ids != self._scraped_play_by_play:\n            self._scrape(\"play_by_play\")\n\n        return pd.DataFrame(self._play_by_play).fillna(np.nan)\n\n    @property\n    def rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API &amp; HTML endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.rosters\n\n        \"\"\"\n        if not self._rosters:\n            self._scrape(\"rosters\")\n\n        return pd.DataFrame(self._rosters).fillna(np.nan)\n\n    @property\n    def shifts(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.shifts\n\n        \"\"\"\n        if not self._shifts:\n            self._scrape(\"shifts\")\n\n        return pd.DataFrame(self._shifts).fillna(np.nan)\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.play_by_play","title":"play_by_play  <code>property</code>","text":"<pre><code>play_by_play\n</code></pre> <p>Pandas Dataframe of play-by-play data</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 667</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5vE</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., CHI</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>danger</code> <code>int</code> <p>Whether shot event occurred from danger area, e.g., 0</p> <code>high_danger</code> <code>int</code> <p>Whether shot event occurred from high-danger area, e.g., 0</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_eh_id_api</code> <code>str</code> <p>Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None</p> <code>player_2_api_id</code> <code>int | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None</p> <code>player_3_api_id</code> <code>int | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>score_state</code> <code>str</code> <p>Score of the game from event team's perspective, e.g., 4v2</p> <code>score_diff</code> <code>int</code> <p>Score differential from event team's perspective, e.g., 2</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>event_length</code> <code>int</code> <p>Time elapsed since previous event, e.g., 5</p> <code>event_distance</code> <code>float | None</code> <p>Calculated distance of event from goal, e.g, 185.32673849177834</p> <code>pbp_distance</code> <code>int</code> <p>Distance of event from goal from description, e.g., 185</p> <code>event_angle</code> <code>float | None</code> <p>Angle of event towards goal, e.g., 57.52880770915151</p> <code>penalty</code> <code>str | None</code> <p>Name of penalty, e.g., None</p> <code>penalty_length</code> <code>int | None</code> <p>Duration of penalty, e.g., None</p> <code>home_score</code> <code>int</code> <p>Home team's score, e.g., 2</p> <code>home_score_diff</code> <code>int</code> <p>Home team's score differential, e.g., -2</p> <code>away_score</code> <code>int</code> <p>Away team's score, e.g., 4</p> <code>away_score_diff</code> <code>int</code> <p>Away team's score differential, e.g., 2</p> <code>is_home</code> <code>int</code> <p>Whether event team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether event is away, e.g., 1</p> <code>home_team</code> <code>str</code> <p>Home team, e.g., CHI</p> <code>away_team</code> <code>str</code> <p>Away team, e.g., NSH</p> <code>home_skaters</code> <code>int</code> <p>Number of home team skaters on-ice (excl. goalies), e.g., 6</p> <code>away_skaters</code> <code>int</code> <p>Number of away team skaters on-ice (excl. goalies), e.g., 5</p> <code>home_on</code> <code>list | str | None</code> <p>Name of home team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>home_on_positions</code> <code>list | str | None</code> <p>Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>away_on</code> <code>list | str | None</code> <p>Name of away team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>away_on_positions</code> <code>list | str | None</code> <p>Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>event_team_skaters</code> <code>int | None</code> <p>Number of event team skaters on-ice (excl. goalies), e.g., 5</p> <code>teammates</code> <code>list | str | None</code> <p>Name of event team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>teammates_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>teammates_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of event team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>teammates_positions</code> <code>list | str | None</code> <p>Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>own_goalie</code> <code>list | str | None</code> <p>Name of the event team's goalie, e.g., PEKKA RINNE</p> <code>own_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE</p> <code>own_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the event team's goalie, e.g., 8471469</p> <code>forwards</code> <code>list | str | None</code> <p>Name of event team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>defense</code> <code>list | str | None</code> <p>Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600</p> <code>opp_strength_state</code> <code>str | None</code> <p>Strength state from opposing team's perspective, e.g., Ev5</p> <code>opp_score_state</code> <code>str | None</code> <p>Score state from opposing team's perspective, e.g., 2v4</p> <code>opp_score_diff</code> <code>int | None</code> <p>Score differential from opposing team's perspective, e.g., -2</p> <code>opp_team_skaters</code> <code>int | None</code> <p>Number of opposing team skaters on-ice (excl. goalies), e.g., 6</p> <code>opp_team_on</code> <code>list | str | None</code> <p>Name of opposing team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_team_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_team_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>opp_team_on_positions</code> <code>list | str | None</code> <p>Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>opp_goalie</code> <code>list | str | None</code> <p>Name of the opposing team's goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the opposing team's goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the opposing team's goalie, e.g., None</p> <code>opp_forwards</code> <code>list | str | None</code> <p>Name of opposing team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>opp_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>opp_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>opp_defense</code> <code>list | str | None</code> <p>Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_forwards</code> <code>list | str | None</code> <p>Name of home team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>home_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>home_forwards_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of home team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>home_defense</code> <code>list | str | None</code> <p>Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_goalie</code> <code>list | str | None</code> <p>Name of the home team's goalie, e.g., None</p> <code>home_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the home team's goalie, e.g., None</p> <code>home_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the home team's goalie, e.g., None</p> <code>away_forwards</code> <code>list | str | None</code> <p>Name of away team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>away_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>away_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>away_defense</code> <code>list | str | None</code> <p>Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600</p> <code>away_goalie</code> <code>list | str | None</code> <p>Name of the away team's goalie, e.g., PEKKA RINNE</p> <code>away_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE</p> <code>away_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the away team's goalie, e.g., 8471469</p> <code>change_on_count</code> <code>int | None</code> <p>Number of players on, e.g., None</p> <code>change_off_count</code> <code>int | None</code> <p>Number of players off, e.g., None</p> <code>change_on</code> <code>list | str | None</code> <p>Names of the players on, e.g., None</p> <code>change_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players on, e.g., None</p> <code>change_on_positions</code> <code>list | str | None</code> <p>Postions of the players on, e.g., None</p> <code>change_off</code> <code>list | str | None</code> <p>Names of the players off, e.g., None</p> <code>change_off_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players off, e.g., None</p> <code>change_off_positions</code> <code>list | str | None</code> <p>Positions of the players off, e.g., None</p> <code>change_on_forwards_count</code> <code>int | None</code> <p>Number of forwards changing on, e.g., None</p> <code>change_off_forwards_count</code> <code>int | None</code> <p>Number of forwards off, e.g., None</p> <code>change_on_forwards</code> <code>list | str | None</code> <p>Names of the forwards on, e.g., None</p> <code>change_on_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards on, e.g., None</p> <code>change_off_forwards</code> <code>list | str | None</code> <p>Names of the forwards off, e.g., None</p> <code>change_off_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards off, e.g., None</p> <code>change_on_defense_count</code> <code>int | None</code> <p>Number of defense on, e.g., None</p> <code>change_off_defense_count</code> <code>int | None</code> <p>Number of defense off, e.g., None</p> <code>change_on_defense</code> <code>list | str | None</code> <p>Names of the defense on, e.g., None</p> <code>change_on_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense on, e.g., None</p> <code>change_off_defense</code> <code>list | str | None</code> <p>Names of the defense off, e.g., None</p> <code>change_off_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense off, e.g., None</p> <code>change_on_goalie_count</code> <code>int | None</code> <p>Number of goalies on, e.g., None</p> <code>change_off_goalie_count</code> <code>int | None</code> <p>Number of goalies off, e.g., None</p> <code>change_on_goalie</code> <code>list | str | None</code> <p>Name of goalie on, e.g., None</p> <code>change_on_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie on, e.g., None</p> <code>change_off_goalie</code> <code>list | str | None</code> <p>Name of the goalie off, e.g., None</p> <code>change_off_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie off, e.g., None</p> <code>goal</code> <code>int</code> <p>Dummy indicator whether event is a goal, e.g., 1</p> <code>shot</code> <code>int</code> <p>Dummy indicator whether event is a shot, e.g., 1</p> <code>miss</code> <code>int</code> <p>Dummy indicator whether event is a miss, e.g., 0</p> <code>fenwick</code> <code>int</code> <p>Dummy indicator whether event is a fenwick event, e.g., 1</p> <code>corsi</code> <code>int</code> <p>Dummy indicator whether event is a corsi event, e.g., 1</p> <code>block</code> <code>int</code> <p>Dummy indicator whether event is a block, e.g., 0</p> <code>hit</code> <code>int</code> <p>Dummy indicator whether event is a hit, e.g., 0</p> <code>give</code> <code>int</code> <p>Dummy indicator whether event is a give, e.g., 0</p> <code>take</code> <code>int</code> <p>Dummy indicator whether event is a take, e.g., 0</p> <code>fac</code> <code>int</code> <p>Dummy indicator whether event is a faceoff, e.g., 0</p> <code>penl</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>change</code> <code>int</code> <p>Dummy indicator whether event is a change, e.g., 0</p> <code>stop</code> <code>int</code> <p>Dummy indicator whether event is a stop, e.g., 0</p> <code>chl</code> <code>int</code> <p>Dummy indicator whether event is a challenge, e.g., 0</p> <code>ozf</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone faceoff, e.g., 0</p> <code>nzf</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone faceoff, e.g., 0</p> <code>dzf</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone faceoff, e.g., 0</p> <code>ozc</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone change, e.g., 0</p> <code>nzc</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone change, e.g., 0</p> <code>dzc</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone change, e.g., 0</p> <code>otf</code> <code>int</code> <p>Dummy indicator whether event is an on-the-fly change, e.g., 0</p> <code>pen0</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>pen2</code> <code>int</code> <p>Dummy indicator whether event is a minor penalty, e.g., 0</p> <code>pen4</code> <code>int</code> <p>Dummy indicator whether event is a double minor penalty, e.g., 0</p> <code>pen5</code> <code>int</code> <p>Dummy indicator whether event is a major penalty, e.g., 0</p> <code>pen10</code> <code>int</code> <p>Dummy indicator whether event is a game misconduct penalty, e.g., 0</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.play_by_play\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.rosters","title":"rosters  <code>property</code>","text":"<pre><code>rosters\n</code></pre> <p>Pandas Dataframe of players scraped from API &amp; HTML endpoints</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>api_id</code> <code>int | None</code> <p>Player's NHL API ID, e.g., 8476887</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <code>headshot_url</code> <code>str | None</code> <p>URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.changes","title":"changes  <code>property</code>","text":"<pre><code>changes\n</code></pre> <p>Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., CHANGE</p> <code>event_type</code> <code>str</code> <p>Type of change that occurred, e.g., AWAY CHANGE</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>change_on_count</code> <code>int</code> <p>Number of players on, e.g., 4</p> <code>change_off_count</code> <code>int</code> <p>Number of players off, e.g., 4</p> <code>change_on</code> <code>str</code> <p>Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95</p> <code>change_on_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players on, e.g., MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_on_positions</code> <code>str</code> <p>Positions of the players on, e.g., D, C, C, C</p> <code>change_off</code> <code>str</code> <p>Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92</p> <code>change_off_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players off, e.g., YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_off_positions</code> <code>str</code> <p>Positions of the players off, e.g., D, L, L, C</p> <code>change_on_forwards_count</code> <code>int</code> <p>Number of forwards on, e.g.,</p> <code>change_off_forwards_count</code> <code>int</code> <p>Number of forwards off, e.g., 3</p> <code>change_on_forwards</code> <code>str</code> <p>Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95</p> <code>change_on_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards on, e.g., CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_off_forwards</code> <code>str</code> <p>Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92</p> <code>change_off_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards off, e.g., FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_on_defense_count</code> <code>int</code> <p>Number of defense on, e.g., 1</p> <code>change_off_defense_count</code> <code>int</code> <p>Number of defense off, e.g., 1</p> <code>change_on_defense</code> <code>str</code> <p>Names of defense on, e.g., MATTIAS EKHOLM</p> <code>change_on_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense on, e.g., NSH14</p> <code>change_on_defense_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM</p> <code>change_off_defense</code> <code>str</code> <p>Names of defense off, e.g., YANNICK WEBER</p> <code>change_off_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense off, e.g., NSH7</p> <code>change_off_defebse_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER</p> <code>change_on_goalie_count</code> <code>int</code> <p>Number of goalies on, e.g., 0</p> <code>change_off_goalie_count</code> <code>int</code> <p>Number of goalies off, e.g., 0</p> <code>change_on_goalies</code> <code>str</code> <p>Names of goalies on, e.g., None</p> <code>change_on_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies on, e.g., None</p> <code>change_on_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies on, e.g., None</p> <code>change_off_goalies</code> <code>str</code> <p>Names of goalies off, e.g., None</p> <code>change_off_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies off, e.g., None</p> <code>change_off_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies off, e.g., None</p> <code>is_home</code> <code>int</code> <p>Dummy indicator whether change team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Dummy indicator whether change team is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.changes\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.shifts","title":"shifts  <code>property</code>","text":"<pre><code>shifts\n</code></pre> <p>Pandas Dataframe of shifts scraped from HTML endpoint</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>shift_count</code> <code>int</code> <p>Shift number for that player, e.g., 1</p> <code>period</code> <code>int</code> <p>Period number for the shift, e.g., 1</p> <code>start_time</code> <code>str</code> <p>Time shift started, e.g., 0:00</p> <code>end_time</code> <code>str</code> <p>Time shift ended, e.g., 0:18</p> <code>duration</code> <code>str</code> <p>Length of shift, e.g, 00:18</p> <code>start_time_seconds</code> <code>int</code> <p>Time shift started in seconds, e.g., 0</p> <code>end_time_seconds</code> <code>int</code> <p>Time shift ended in seconds, e.g., 18</p> <code>duration_seconds</code> <code>int</code> <p>Length of shift in seconds, e.g., 18</p> <code>shift_start</code> <code>str</code> <p>Time the shift started as the original string, e.g., 0:00 / 20:00</p> <code>shift_end</code> <code>str</code> <p>Time the shift ended as the original string, e.g., 0:18 / 19:42</p> <code>goalie</code> <code>int</code> <p>Whether player is a goalie, e.g., 0</p> <code>is_home</code> <code>int</code> <p>Whether player is home e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether player is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether player is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.shifts\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.api_events","title":"api_events  <code>property</code>","text":"<pre><code>api_events\n</code></pre> <p>Pandas DataFrame of events scraped from API endpoint</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 689</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>event_code</code> <code>str</code> <p>Code to indicate type of event that occured, e.g., 505</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., None</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., D</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_team_jersey</code> <code>str</code> <p>Combination of team and jersey used for player identification purposes, e.g, NSH35</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_2_api_id</code> <code>str | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3_api_id</code> <code>str | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>strength</code> <code>int</code> <p>Code to indication strength state, e.g., 1560</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>miss_reason</code> <code>str | None</code> <p>Reason shot missed, e.g., None</p> <code>opp_goalie</code> <code>str | None</code> <p>Opposing goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for opposing goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>str | None</code> <p>NHL API ID for opposing goalie, e.g., None</p> <code>opp_goalie_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>event_team_id</code> <code>int</code> <p>NHL ID for the event team, e.g., 18</p> <code>stoppage_reason</code> <code>str | None</code> <p>Reason the play was stopped, e.g., None</p> <code>stoppage_reason_secondary</code> <code>str | None</code> <p>Secondary reason play was stopped, e.g., None</p> <code>penalty_type</code> <code>str | None</code> <p>Type of penalty taken, e.g., None</p> <code>penalty_reason</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>penalty_duration</code> <code>int | None</code> <p>Duration of the penalty, e.g., None</p> <code>home_team_defending_side</code> <code>str</code> <p>Side of the ice the home team is defending, e.g., right</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.api_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.api_rosters","title":"api_rosters  <code>property</code>","text":"<pre><code>api_rosters\n</code></pre> <p>Pandas Dataframe of players scraped from API endpoint</p> <p>Returns:</p> Name Type Description <code>Returns</code> <code>DataFrame</code> <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>first_name</code> <code>str</code> <p>Player's first name, e.g., FILIP</p> <code>last_name</code> <code>str</code> <p>Player's last name, e.g., FORSBERG</p> <code>headshot_url</code> <code>str</code> <p>URL to retreive player's headshot</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.api_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.html_events","title":"html_events  <code>property</code>","text":"<pre><code>html_events\n</code></pre> <p>Pandas Dataframe of events scraped from HTML endpoint</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 331</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_time</code> <code>str</code> <p>Time elapsed in the period, e.g., 19:38</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>penalty_length</code> <code>str | None</code> <p>Duration of the penalty, e.g., None</p> <code>penalty</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>strength</code> <code>str | None</code> <p>Code to indication strength state, e.g., EV</p> <code>away_skaters</code> <code>str</code> <p>Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G</p> <code>home_skaters</code> <code>str</code> <p>Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.html_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.html_rosters","title":"html_rosters  <code>property</code>","text":"<pre><code>html_rosters\n</code></pre> <p>Pandas Dataframe of players scraped from HTML endpoint</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.html_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.add_games","title":"add_games","text":"<pre><code>add_games(game_ids)\n</code></pre> <p>Method to add games to the Scraper</p> <p>Parameters:</p> Name Type Description Default <code>game_ids</code> <code>list or int or float or str</code> <p>List-like object of or single 10-digit game identifier, e.g., 2023020001</p> required <p>Examples:</p> <p>Instantiate Scraper</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Scrape something</p> <pre><code>&gt;&gt;&gt; scraper.play_by_play\n</code></pre> <p>Add games</p> <pre><code>&gt;&gt;&gt; scraper.add_games(2023020011)\n</code></pre> <p>Scrape some more</p> <pre><code>&gt;&gt;&gt; scraper.play_by_play\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def add_games(self, game_ids: list[int | str | float] | int) -&gt; None:\n    \"\"\"Method to add games to the Scraper\n\n    Parameters:\n        game_ids (list or int or float or str):\n            List-like object of or single 10-digit game identifier, e.g., 2023020001\n\n    Examples:\n        Instantiate Scraper\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Scrape something\n        &gt;&gt;&gt; scraper.play_by_play\n\n        Add games\n        &gt;&gt;&gt; scraper.add_games(2023020011)\n\n        Scrape some more\n        &gt;&gt;&gt; scraper.play_by_play\n\n\n    \"\"\"\n    if isinstance(game_ids, str) or isinstance(game_ids, int):\n        game_ids = [game_ids]\n\n    game_ids = [int(x) for x in game_ids if x not in self.game_ids]\n\n    self.game_ids.extend(game_ids)\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game","title":"Game","text":"<p>Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>int or float or str</code> <p>10-digit game identifier, e.g., 2023020001</p> required <code>requests_session</code> <code>Session</code> <p>If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2019020684</p> <code>game_state</code> <code>str</code> <p>Whether game is scheduled, started, finished, or official, e.g., OFF</p> <code>game_schedule_state</code> <code>str</code> <p>Whether the game has been scheduled, e.g., OK</p> <code>current_period</code> <code>int</code> <p>Current period, or if game has finished, then latest period, e.g., 3</p> <code>current_period_type</code> <code>str</code> <p>Whether period is regular or overtime, e.g., REG</p> <code>time_remaining</code> <code>str</code> <p>Amount of time remaining in the game, e.g., '00:00'</p> <code>seconds_remaining</code> <code>int</code> <p>Amounting of time remaining in the game in seconds, e.g., 0</p> <code>running</code> <code>bool</code> <p>Whether the game is currently running, e.g., False</p> <code>in_intermission</code> <code>bool</code> <p>Whether the game is currently in intermission, e.g., False</p> <code>season</code> <code>int</code> <p>Season in which the game was played, e.g., 20192020</p> <code>session</code> <code>str</code> <p>Whether the game is regular season, playoffs, or pre-season, e.g., R</p> <code>html_id</code> <code>str</code> <p>Game ID used for scraping HTML endpoints, e.g., 020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>start_time_et</code> <code>str</code> <p>Start time in Eastern timezone, regardless of venue, e.g., 20:30</p> <code>venue</code> <code>str</code> <p>Venue name, e.g., UNITED CENTER</p> <code>tv_broadcasts</code> <code>dict</code> <p>TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}</p> <code>home_team</code> <code>dict</code> <p>Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}</p> <code>away_team</code> <code>dict</code> <p>Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}</p> <code>api_endpoint</code> <code>str</code> <p>URL for accessing play-by-play and API rosters, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'</p> <code>api_endpoint_other</code> <code>str</code> <p>URL for accessing other game information, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'</p> <code>html_rosters_endpoint</code> <code>str</code> <p>URL for accessing rosters from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'</p> <code>home_shifts_endpoint</code> <code>str</code> <p>URL for accessing home shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'</p> <code>away_shifts_endpoint</code> <code>str</code> <p>URL for accessing away shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'</p> <code>html_events_endpoint</code> <code>str</code> <p>URL for accessing events from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = game.play_by_play # Returns the data as a list\n</code></pre> <p>Get play-by-play as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; pbp_df = game.play_by_play_df   # Returns the data as a Pandas DataFrame\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = game.shifts    # Returns a list of shifts\n&gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n&gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n</code></pre> <p>Data can also be returned as a Pandas DataFrame, rather than a list</p> <pre><code>&gt;&gt;&gt; shifts_df = game.shifts_df # Same as above, but as Pandas DataFrame\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = game.api_events\n&gt;&gt;&gt; api_rosters = game.api_rosters\n&gt;&gt;&gt; html_events = game.html_events\n&gt;&gt;&gt; html_rosters = game.html_rosters\n</code></pre> <p>The Game object is fairly rich with information</p> <pre><code>&gt;&gt;&gt; game_date = game.game_date\n&gt;&gt;&gt; home_team = game.home_team\n&gt;&gt;&gt; game_state = game.game_state\n&gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Game:\n    \"\"\"\n    Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.\n\n    Parameters:\n        game_id (int or float or str):\n            10-digit game identifier, e.g., 2023020001\n        requests_session (requests.Session, optional):\n            If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints\n\n    Attributes:\n        game_id (int):\n            10-digit game identifier, e.g., 2019020684\n        game_state (str):\n            Whether game is scheduled, started, finished, or official, e.g., OFF\n        game_schedule_state (str):\n            Whether the game has been scheduled, e.g., OK\n        current_period (int):\n            Current period, or if game has finished, then latest period, e.g., 3\n        current_period_type (str):\n            Whether period is regular or overtime, e.g., REG\n        time_remaining (str):\n            Amount of time remaining in the game, e.g., '00:00'\n        seconds_remaining (int):\n            Amounting of time remaining in the game in seconds, e.g., 0\n        running (bool):\n            Whether the game is currently running, e.g., False\n        in_intermission (bool):\n            Whether the game is currently in intermission, e.g., False\n        season (int):\n            Season in which the game was played, e.g., 20192020\n        session (str):\n            Whether the game is regular season, playoffs, or pre-season, e.g., R\n        html_id (str):\n            Game ID used for scraping HTML endpoints, e.g., 020684\n        game_date (str):\n            Date game was played, e.g., 2020-01-09\n        start_time_et (str):\n            Start time in Eastern timezone, regardless of venue, e.g., 20:30\n        venue (str):\n            Venue name, e.g., UNITED CENTER\n        tv_broadcasts (dict):\n            TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}\n        home_team (dict):\n            Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}\n        away_team (dict):\n            Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}\n        api_endpoint (str):\n            URL for accessing play-by-play and API rosters, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'\n        api_endpoint_other (str):\n            URL for accessing other game information, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'\n        html_rosters_endpoint (str):\n            URL for accessing rosters from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'\n        home_shifts_endpoint (str):\n            URL for accessing home shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'\n        away_shifts_endpoint (str):\n            URL for accessing away shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'\n        html_events_endpoint (str):\n            URL for accessing events from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'\n\n    Note:\n        You can return any of the properties as a Pandas DataFrame by appending '_df' to the property\n\n    Examples:\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = game.play_by_play # Returns the data as a list\n\n        Get play-by-play as a Pandas DataFrame\n        &gt;&gt;&gt; pbp_df = game.play_by_play_df   # Returns the data as a Pandas DataFrame\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = game.shifts    # Returns a list of shifts\n        &gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n        &gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n\n        Data can also be returned as a Pandas DataFrame, rather than a list\n        &gt;&gt;&gt; shifts_df = game.shifts_df # Same as above, but as Pandas DataFrame\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = game.api_events\n        &gt;&gt;&gt; api_rosters = game.api_rosters\n        &gt;&gt;&gt; html_events = game.html_events\n        &gt;&gt;&gt; html_rosters = game.html_rosters\n\n        The Game object is fairly rich with information\n        &gt;&gt;&gt; game_date = game.game_date\n        &gt;&gt;&gt; home_team = game.home_team\n        &gt;&gt;&gt; game_state = game.game_state\n        &gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n\n    \"\"\"\n\n    def __init__(\n        self,\n        game_id: str | int | float,\n        requests_session: requests.Session | None = None,\n    ):\n        if str(game_id).isdigit() is False or len(str(game_id)) != 10:\n            raise Exception(f\"{game_id} IS NOT A VALID GAME ID\")\n\n        # Game ID\n        self.game_id: int = int(game_id)\n\n        # season\n        year = int(str(self.game_id)[0:4])\n        self.season: int = int(f\"{year}{year + 1}\")\n\n        # game session\n        game_sessions = {\"O1\": \"PR\", \"02\": \"R\", \"03\": \"P\"}\n        game_session = str(self.game_id)[4:6]\n        self.session: str = game_sessions[game_session]\n\n        # HTML game ID\n        self.html_id: str = str(game_id)[4:]\n\n        # Live endpoint for many things\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/play-by-play\"\n        self.api_endpoint: str = url\n\n        # Alternative live endpoint\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/landing\"\n        self.api_endpoint_other = url\n\n        # HTML rosters endpoint\n        url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/RO{self.html_id}.HTM\"\n        )\n        self.html_rosters_endpoint: str = url\n\n        # shifts endpoints\n        home_url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/TH{self.html_id}.HTM\"\n        )\n        self.home_shifts_endpoint: str = home_url\n\n        away_url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/TV{self.html_id}.HTM\"\n        )\n        self.away_shifts_endpoint: str = away_url\n\n        # HTML events endpoint\n        url = (\n            f\"https://www.nhl.com/scores/htmlreports/{self.season}/PL{self.html_id}.HTM\"\n        )\n        self.html_events_endpoint: str = url\n\n        # requests session\n        if requests_session is None:\n            self._requests_session = s_session()\n        else:\n            self._requests_session = requests_session\n\n        # Downloading information from NHL api\n        response: dict = self._requests_session.get(self.api_endpoint).json()\n        self.api_response: dict = response\n\n        # Away team information\n        away_team = response[\"awayTeam\"]\n\n        if away_team[\"abbrev\"] == \"PHX\":\n            away_team[\"abbrev\"] = \"ARI\"\n\n        self.away_team = {\n            \"id\": away_team[\"id\"],\n            \"name\": away_team[\"name\"][\"default\"].upper(),\n            \"abbrev\": away_team[\"abbrev\"],\n            \"logo\": away_team[\"logo\"],\n        }\n\n        # Home team information\n        home_team = response[\"homeTeam\"]\n\n        if home_team[\"abbrev\"] == \"PHX\":\n            home_team[\"abbrev\"] = \"ARI\"\n\n        self.home_team = {\n            \"id\": home_team[\"id\"],\n            \"name\": home_team[\"name\"][\"default\"].upper(),\n            \"abbrev\": home_team[\"abbrev\"],\n            \"logo\": home_team[\"logo\"],\n        }\n\n        # Venue information\n        self.venue: str = response[\"venue\"][\"default\"].upper()\n\n        est = pytz.timezone(\"US/Eastern\")\n\n        if \"Z\" in response[\"startTimeUTC\"]:\n            response[\"startTimeUTC\"] = response[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n        self._start_time_utc_dt: dt = dt.fromisoformat(\n            response[\"startTimeUTC\"]\n        ).astimezone(timezone.utc)\n        self._start_time_et_dt: dt = self._start_time_utc_dt.astimezone(est)\n\n        # Game date and start time as strings\n        self.game_date = self._start_time_et_dt.strftime(\"%Y-%m-%d\")\n        self.start_time_et = self._start_time_et_dt.strftime(\n            \"%H:%M\"\n        )  # Consider start time local?\n\n        # Broadcast information\n        broadcasts = {\n            x[\"id\"]: {k: v for k, v in x.items() if k != \"id\"}\n            for x in response[\"tvBroadcasts\"]\n        }\n        self.tv_broadcasts = broadcasts\n\n        # Game status\n        self.game_state = response[\"gameState\"]\n\n        # Whether game is finalized in the schedule or not\n        self.game_schedule_state = response[\"gameScheduleState\"]\n\n        # Clock information\n        clock = response[\"clock\"]\n\n        self.time_remaining = clock.get(\"timeRemaining\")\n        self.seconds_remaining = clock.get(\"secondsRemaining\")\n        self.running = clock[\"running\"]\n        self.in_intermission = clock[\"inIntermission\"]\n\n        # Period information\n        if response[\"gameState\"] != \"FUT\":\n            self.current_period = response[\"periodDescriptor\"][\"number\"]\n            self.current_period_type = response[\"periodDescriptor\"][\"periodType\"]\n\n        # Setting up placeholders for data storage\n        self._api_events = None\n        self._api_rosters = None\n        self._changes = None\n        self._html_events = None\n        self._html_rosters = None\n        self._play_by_play = None\n        self._rosters = None\n        self._shifts = None\n\n    def _munge_api_events(self) -&gt; None:\n        \"\"\"Method to munge events from API endpoint. Updates self._api_events\"\"\"\n\n        self._api_events = [x for x in self.api_response[\"plays\"]]\n\n        rosters = {x[\"api_id\"]: x for x in self._api_rosters}\n\n        teams_dict = {\n            self.home_team[\"id\"]: self.home_team[\"abbrev\"],\n            self.away_team[\"id\"]: self.away_team[\"abbrev\"],\n        }\n\n        event_list = []\n\n        for event in self._api_events:\n            time_split = event[\"timeInPeriod\"].split(\":\")\n\n            period = int(event[\"periodDescriptor\"][\"number\"])\n            period_type = event[\"periodDescriptor\"][\"periodType\"]\n            period_seconds = (int(time_split[0]) * 60) + int(time_split[1])\n\n            if self.session == \"R\" and period == 5:\n                game_seconds = 3900\n\n            else:\n                game_seconds = ((period - 1) * 1200) + period_seconds\n\n            event_info = {}\n\n            new_values = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"event_idx\": event[\"sortOrder\"],\n                \"period\": period,\n                \"period_type\": period_type,\n                \"period_seconds\": period_seconds,\n                \"game_seconds\": game_seconds,\n                \"event\": event[\"typeDescKey\"],\n                \"event_code\": event[\"typeCode\"],\n                \"strength\": event.get(\"situationCode\"),\n                \"home_team_defending_side\": event.get(\"homeTeamDefendingSide\"),\n            }\n\n            event_info.update(new_values)\n\n            if event_info[\"event\"] == \"period-start\":\n                event_info[\"event\"] = \"PSTR\"\n\n            if event_info[\"event\"] == \"period-end\":\n                event_info[\"event\"] = \"PEND\"\n\n            if event_info[\"event\"] == \"game-end\":\n                event_info[\"event\"] = \"GEND\"\n\n            if event_info[\"event\"] == \"shootout-complete\":\n                event_info[\"event\"] = \"SOC\"\n\n            if event.get(\"details\"):\n                new_values = {\n                    \"event_team\": teams_dict.get(\n                        event[\"details\"].get(\"eventOwnerTeamId\")\n                    ),\n                    \"coords_x\": event[\"details\"].get(\"xCoord\"),\n                    \"coords_y\": event[\"details\"].get(\"yCoord\"),\n                    \"zone\": event[\"details\"].get(\"zoneCode\"),\n                    \"event_team_id\": event[\"details\"].get(\"eventOwnerTeamId\"),\n                }\n\n                event_info.update(new_values)\n\n                if event_info[\"event\"] == \"faceoff\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"winningPlayerId\"]\n                    event_info[\"player_1_type\"] = \"WINNER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"losingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"LOSER\"\n\n                    event_info[\"event\"] = \"FAC\"\n\n                if event_info[\"event\"] == \"stoppage\":\n                    event_info[\"stoppage_reason\"] = (\n                        event[\"details\"][\"reason\"].replace(\"-\", \" \").upper()\n                    )\n                    event_info[\"stoppage_reason_secondary\"] = (\n                        event[\"details\"]\n                        .get(\"secondaryReason\", \"\")\n                        .replace(\"-\", \" \")\n                        .upper()\n                    )\n\n                    event_info[\"event\"] = \"STOP\"\n\n                if event_info[\"event\"] == \"hit\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"hittingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"HITTER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"hitteePlayerId\"]\n                    event_info[\"player_2_type\"] = \"HITTEE\"\n\n                    event_info[\"event\"] = \"HIT\"\n\n                if event_info[\"event\"] == \"giveaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"GIVER\"\n\n                    event_info[\"event\"] = \"GIVE\"\n\n                if event_info[\"event\"] == \"shot-on-goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                        \"goalieInNetId\", \"EMPTY NET\"\n                    )\n                    event_info[\"shot_type\"] = (\n                        event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    )\n\n                    event_info[\"event\"] = \"SHOT\"\n\n                if event_info[\"event\"] == \"takeaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"TAKER\"\n\n                    event_info[\"event\"] = \"TAKE\"\n\n                if event_info[\"event\"] == \"missed-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                        \"goalieInNetId\", \"EMPTY NET\"\n                    )\n                    event_info[\"shot_type\"] = (\n                        event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    )\n                    event_info[\"miss_reason\"] = (\n                        event[\"details\"].get(\"reason\", \"\").replace(\"-\", \" \").upper()\n                    )\n\n                    event_info[\"event\"] = \"MISS\"\n\n                if event_info[\"event\"] == \"blocked-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"].get(\n                        \"blockingPlayerId\"\n                    )\n                    event_info[\"player_1_type\"] = \"BLOCKER\"\n\n                    if event_info[\"player_1_api_id\"] is None:\n                        event_info[\"event_team\"] = \"OTHER\"\n                        event_info[\"player_1\"] = \"REFEREE\"\n                        event_info[\"player_1_api_id\"] = \"REFEREE\"\n                        event_info[\"player_1_eh_id\"] = \"REFEREE\"\n\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"SHOOTER\"\n\n                    event_info[\"event\"] = \"BLOCK\"\n\n                if event_info[\"event\"] == \"goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"scoringPlayerId\"]\n                    event_info[\"player_1_type\"] = \"GOAL SCORER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                        \"assist1PlayerId\"\n                    )\n\n                    if event_info[\"player_2_api_id\"] is not None:\n                        event_info[\"player_2_type\"] = \"PRIMARY ASSIST\"\n\n                    event_info[\"player_3_api_id\"] = event[\"details\"].get(\n                        \"assist2PlayerId\"\n                    )\n\n                    if event_info[\"player_3_api_id\"] is not None:\n                        event_info[\"player_3_type\"] = \"SECONDARY ASSIST\"\n\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\n                        \"goalieInNetId\", \"EMPTY NET\"\n                    )\n                    event_info[\"shot_type\"] = (\n                        event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    )\n\n                    event_info[\"event\"] = \"GOAL\"\n\n                if event_info[\"event\"] == \"penalty\":\n                    event_info[\"penalty_type\"] = event[\"details\"][\"typeCode\"]\n                    event_info[\"penalty_reason\"] = event[\"details\"][\"descKey\"].upper()\n                    event_info[\"penalty_duration\"] = event[\"details\"].get(\"duration\")\n\n                    if (\n                        event_info[\"penalty_type\"] == \"BEN\"\n                        and event[\"details\"].get(\"committedByPlayerId\") is None\n                    ):\n                        event_info[\"player_1\"] = \"BENCH\"\n                        event_info[\"player_1_api_id\"] = \"BENCH\"\n                        event_info[\"player_1_eh_id\"] = \"BENCH\"\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"servedByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    elif (\n                        \"HEAD-COACH\" in event_info[\"penalty_reason\"]\n                        or \"TEAM-STAFF\" in event_info[\"penalty_reason\"]\n                    ) and event[\"details\"].get(\"committedByPlayerId\") is None:\n                        event_info[\"player_1\"] = \"BENCH\"\n                        event_info[\"player_1_api_id\"] = \"BENCH\"\n                        event_info[\"player_1_eh_id\"] = \"BENCH\"\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"servedByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    else:\n                        event_info[\"player_1_api_id\"] = event[\"details\"].get(\n                            \"committedByPlayerId\"\n                        )\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                            \"drawnByPlayerId\"\n                        )\n                        event_info[\"player_2_type\"] = \"DRAWN BY\"\n\n                        if event_info[\"player_2_api_id\"] is None:\n                            event_info[\"player_2_api_id\"] = event[\"details\"].get(\n                                \"servedByPlayerId\"\n                            )\n                            event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                        else:\n                            event_info[\"player_3_api_id\"] = event[\"details\"].get(\n                                \"servedByPlayerId\"\n                            )\n                            event_info[\"player_3_type\"] = \"SERVED BY\"\n\n                    event_info[\"event\"] = \"PENL\"\n\n                if event_info[\"event\"] == \"delayed-penalty\":\n                    event_info[\"event\"] = \"DELPEN\"\n\n                if event_info[\"event\"] == \"failed-shot-attempt\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"][\"goalieInNetId\"]\n\n                    event_info[\"event\"] = \"MISS\"\n\n            event_info = api_events_fixes(self.game_id, event_info)\n\n            player_cols = [\n                \"player_1_api_id\",\n                \"player_2_api_id\",\n                \"player_3_api_id\",\n                \"opp_goalie_api_id\",\n            ]\n\n            for player_col in player_cols:\n                if player_col not in event_info.keys():\n                    continue\n\n                elif event_info[player_col] is None:\n                    continue\n\n                elif event_info[player_col] == \"BENCH\":\n                    continue\n\n                elif event_info[player_col] == \"REFEREE\":\n                    continue\n\n                else:\n                    player_info = rosters.get(event_info[player_col], {})\n\n                    new_cols = {\n                        player_col.replace(\"_api_id\", \"\"): player_info.get(\n                            \"player_name\"\n                        ),\n                        player_col.replace(\"_api_id\", \"_eh_id\"): player_info.get(\n                            \"eh_id\"\n                        ),\n                        player_col.replace(\"_api_id\", \"_team_jersey\"): player_info.get(\n                            \"team_jersey\"\n                        ),\n                        player_col.replace(\"_api_id\", \"_position\"): player_info.get(\n                            \"position\"\n                        ),\n                    }\n\n                    event_info.update(new_cols)\n\n            event_list.append(event_info)\n\n        final_events = []\n\n        for event in event_list:\n            if \"version\" in event.keys():\n                continue\n\n            other_events = [\n                x\n                for x in event_list\n                if x != event\n                and x[\"event\"] == event[\"event\"]\n                and x[\"game_seconds\"] == event[\"game_seconds\"]\n                and x.get(\"player_1\") is not None\n                and x[\"period\"] == event[\"period\"]\n                and x.get(\"player_1_api_id\") == event.get(\"player_1_api_id\")\n            ]\n\n            version = 1\n\n            event[\"version\"] = 1\n\n            if len(other_events) &gt; 0:\n                for idx, other_event in enumerate(other_events):\n                    if \"version\" not in other_event.keys():\n                        version += 1\n\n                        other_event[\"version\"] = version\n\n            final_events.append(APIEvent.model_validate(event).model_dump())\n\n        self._api_events = final_events\n\n    @property\n    def api_events(self) -&gt; list:\n        \"\"\"List of events scraped from API endpoint. Each event is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_events\n\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        return self._api_events\n\n    @property\n    def api_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from API endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_events_df\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        return pd.DataFrame(self._api_events)\n\n    def _munge_api_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from API  endpoint. Updates self._api_rosters\"\"\"\n\n        players = []\n\n        team_info = {\n            self.home_team[\"id\"]: {\"venue\": \"HOME\", \"team\": self.home_team[\"abbrev\"]},\n            self.away_team[\"id\"]: {\"venue\": \"AWAY\", \"team\": self.away_team[\"abbrev\"]},\n        }\n\n        for player in self.api_response[\"rosterSpots\"]:\n            first_name = (\n                unidecode(player[\"firstName\"][\"default\"])\n                .encode(\"latin\")\n                .decode(\"utf=8\")\n                .upper()\n                .strip()\n            )\n\n            last_name = (\n                unidecode(player[\"lastName\"][\"default\"])\n                .encode(\"latin\")\n                .decode(\"utf=8\")\n                .upper()\n                .strip()\n            )\n\n            player_name = first_name + \" \" + last_name\n\n            player_name = (\n                player_name.replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player_name = correct_names_dict.get(player_name, player_name)\n\n            eh_id = (\n                player_name.split(\" \", 1)[0] + \".\" + player_name.split(\" \", 1)[1]\n            ).replace(\"..\", \".\")\n\n            eh_id = correct_api_names_dict.get(player[\"playerId\"], eh_id)\n\n            team = team_info[player[\"teamId\"]]\n\n            player_info = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": team[\"team\"],\n                \"team_venue\": team[\"venue\"],\n                \"player_name\": player_name,\n                \"first_name\": first_name,\n                \"last_name\": last_name,\n                \"api_id\": player[\"playerId\"],\n                \"eh_id\": correct_api_names_dict.get(player[\"playerId\"], eh_id),\n                \"team_jersey\": team[\"team\"] + str(player[\"sweaterNumber\"]),\n                \"jersey\": player[\"sweaterNumber\"],\n                \"position\": player[\"positionCode\"],\n                \"headshot_url\": player.get(\"headshot\", \"\"),\n            }\n\n            players.append(APIRosterPlayer.model_validate(player_info).model_dump())\n\n        if self.game_id == 2013020971:\n            new_player = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": \"CBJ\",\n                \"team_venue\": \"AWAY\",\n                \"player_name\": \"NATHAN HORTON\",\n                \"first_name\": \"NATHAN\",\n                \"last_name\": \"HORTON\",\n                \"api_id\": 8470596,\n                \"eh_id\": \"NATHAN.HORTON\",\n                \"team_jersey\": \"CBJ8\",\n                \"jersey\": 8,\n                \"position\": \"R\",\n                \"headshot_url\": \"\",\n            }\n\n            players.append(APIRosterPlayer.model_validate(new_player).model_dump())\n\n        players = sorted(players, key=lambda k: (k[\"team_venue\"], k[\"player_name\"]))\n\n        self._api_rosters = players\n\n    @property\n    def api_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API endpoint. Returns a dictionary of players with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_rosters\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return self._api_rosters\n\n    @property\n    def api_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_rosters_df\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return pd.DataFrame(self._api_rosters).fillna(np.nan)\n\n    def _munge_changes(self) -&gt; None:\n        \"\"\"Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes\"\"\"\n\n        game_id = self.game_id\n        season = self.season\n        game_session = self.session\n        shifts = self._shifts\n\n        game_list = []\n\n        periods = np.unique([x[\"period\"] for x in shifts]).tolist()\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            max([x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period])\n\n            for team in teams:\n                changes_dict = {}\n\n                changes_on = np.unique(\n                    [\n                        x[\"start_time_seconds\"]\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"team_venue\"] == team\n                    ]\n                ).tolist()\n\n                for change_on in changes_on:\n                    players_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                    ]\n\n                    players_on = sorted(players_on, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_on = sorted(forwards_on, key=lambda k: (k[\"jersey\"]))\n\n                    defense_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_on = sorted(defense_on, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_on = sorted(goalies_on, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_on[0][\"team\"],\n                        \"is_home\": players_on[0][\"is_home\"],\n                        \"is_away\": players_on[0][\"is_away\"],\n                        \"team_venue\": team,\n                        \"period\": period,\n                        \"period_time\": players_on[0][\"start_time\"],\n                        \"period_seconds\": players_on[0][\"start_time_seconds\"],\n                        \"change_on_count\": len(players_on),\n                        \"change_off_count\": 0,\n                        \"change_on_jersey\": [x[\"team_jersey\"] for x in players_on],\n                        \"change_on\": [x[\"player_name\"] for x in players_on],\n                        \"change_on_eh_id\": [x[\"eh_id\"] for x in players_on],\n                        \"change_on_positions\": [x[\"position\"] for x in players_on],\n                        \"change_off_jersey\": \"\",\n                        \"change_off\": \"\",\n                        \"change_off_eh_id\": \"\",\n                        \"change_off_positions\": \"\",\n                        \"change_on_forwards_count\": len(forwards_on),\n                        \"change_off_forwards_count\": 0,\n                        \"change_on_forwards_jersey\": [\n                            x[\"team_jersey\"] for x in forwards_on\n                        ],\n                        \"change_on_forwards\": [x[\"player_name\"] for x in forwards_on],\n                        \"change_on_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_on],\n                        \"change_off_forwards_jersey\": \"\",\n                        \"change_off_forwards\": \"\",\n                        \"change_off_forwards_eh_id\": \"\",\n                        \"change_on_defense_count\": len(defense_on),\n                        \"change_off_defense_count\": 0,\n                        \"change_on_defense_jersey\": [\n                            x[\"team_jersey\"] for x in defense_on\n                        ],\n                        \"change_on_defense\": [x[\"player_name\"] for x in defense_on],\n                        \"change_on_defense_eh_id\": [x[\"eh_id\"] for x in defense_on],\n                        \"change_off_defense_jersey\": \"\",\n                        \"change_off_defense\": \"\",\n                        \"change_off_defense_eh_id\": \"\",\n                        \"change_on_goalie_count\": len(goalies_on),\n                        \"change_off_goalie_count\": 0,\n                        \"change_on_goalie_jersey\": [\n                            x[\"team_jersey\"] for x in goalies_on\n                        ],\n                        \"change_on_goalie\": [x[\"player_name\"] for x in goalies_on],\n                        \"change_on_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_on],\n                        \"change_off_goalie_jersey\": \"\",\n                        \"change_off_goalie\": \"\",\n                        \"change_off_goalie_eh_id\": \"\",\n                    }\n\n                    changes_dict.update({change_on: new_values})\n\n                changes_off = np.unique(\n                    [\n                        x[\"end_time_seconds\"]\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"team_venue\"] == team\n                    ]\n                ).tolist()\n\n                for change_off in changes_off:\n                    players_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                    ]\n\n                    players_off = sorted(players_off, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_off = sorted(forwards_off, key=lambda k: (k[\"jersey\"]))\n\n                    defense_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_off = sorted(defense_off, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_off = sorted(goalies_off, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_off[0][\"team\"],\n                        \"team_venue\": team,\n                        \"is_home\": players_off[0][\"is_home\"],\n                        \"is_away\": players_off[0][\"is_away\"],\n                        \"period\": period,\n                        \"period_time\": players_off[0][\"end_time\"],\n                        \"period_seconds\": players_off[0][\"end_time_seconds\"],\n                        \"change_off_count\": len(players_off),\n                        \"change_off_jersey\": [x[\"team_jersey\"] for x in players_off],\n                        \"change_off\": [x[\"player_name\"] for x in players_off],\n                        \"change_off_eh_id\": [x[\"eh_id\"] for x in players_off],\n                        \"change_off_positions\": [x[\"position\"] for x in players_off],\n                        \"change_off_forwards_count\": len(forwards_off),\n                        \"change_off_forwards_jersey\": [\n                            x[\"team_jersey\"] for x in forwards_off\n                        ],\n                        \"change_off_forwards\": [x[\"player_name\"] for x in forwards_off],\n                        \"change_off_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_off],\n                        \"change_off_defense_count\": len(defense_off),\n                        \"change_off_defense_jersey\": [\n                            x[\"team_jersey\"] for x in defense_off\n                        ],\n                        \"change_off_defense\": [x[\"player_name\"] for x in defense_off],\n                        \"change_off_defense_eh_id\": [x[\"eh_id\"] for x in defense_off],\n                        \"change_off_goalie_count\": len(goalies_off),\n                        \"change_off_goalie_jersey\": [\n                            x[\"team_jersey\"] for x in goalies_off\n                        ],\n                        \"change_off_goalie\": [x[\"player_name\"] for x in goalies_off],\n                        \"change_off_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_off],\n                    }\n\n                    if change_off in changes_on:\n                        changes_dict[change_off].update(new_values)\n\n                    else:\n                        new_values.update(\n                            {\n                                \"change_on_count\": 0,\n                                \"change_on_forwards_count\": 0,\n                                \"change_on_defense_count\": 0,\n                                \"change_on_goalie_count\": 0,\n                            }\n                        )\n\n                        changes_dict[change_off] = new_values\n\n                game_list.extend(list(changes_dict.values()))\n\n        game_list = sorted(\n            game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"is_away\"])\n        )\n\n        final_changes = []\n\n        for change in game_list:\n            players_on = \", \".join(change.get(\"change_on\", []))\n\n            players_off = \", \".join(change.get(\"change_off\", []))\n\n            on_num = len(change.get(\"change_on\", []))\n\n            off_num = len(change.get(\"change_off\", []))\n\n            if on_num &gt; 0 and off_num &gt; 0:\n                change[\n                    \"description\"\n                ] = f\"PLAYERS ON: {players_on} / PLAYERS OFF: {players_off}\"\n\n            if on_num &gt; 0 and off_num == 0:\n                change[\"description\"] = f\"PLAYERS ON: {players_on}\"\n\n            if off_num &gt; 0 and on_num == 0:\n                change[\"description\"] = f\"PLAYERS OFF: {players_off}\"\n\n            if change[\"period\"] == 5 and game_session == \"R\":\n                change[\"game_seconds\"] = 3900 + change[\"period_seconds\"]\n\n            else:\n                change[\"game_seconds\"] = (int(change[\"period\"]) - 1) * 1200 + change[\n                    \"period_seconds\"\n                ]\n\n            if change[\"is_home\"] == 1:\n                change[\"event_type\"] = \"HOME CHANGE\"\n\n            else:\n                change[\"event_type\"] = \"AWAY CHANGE\"\n\n            final_changes.append(ChangeEvent.model_validate(change).model_dump())\n\n        self._changes = final_changes\n\n    @property\n    def changes(self) -&gt; list:\n        \"\"\"List of changes scraped from API endpoint. Each change is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).changes_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.changes\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._shifts is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        if self._changes is None:\n            self._munge_changes()\n\n        return self._changes\n\n    @property\n    def changes_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.changes_df\n\n        \"\"\"\n\n        if self._changes is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            if self._shifts is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n            self._munge_changes()\n\n        return pd.DataFrame(self._changes).fillna(np.nan)\n\n    def _scrape_html_events(self) -&gt; None:\n        \"\"\"Method for scraping events from HTML endpoint. Updates self._html_events\"\"\"\n\n        url = self.html_events_endpoint\n\n        s = self._requests_session\n\n        try:\n            response = s.get(url)\n        except RetryError:\n            return None\n\n        soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\")\n\n        events = []\n\n        if soup.find(\"html\") is None:\n            return None\n\n        tds = soup.find_all(\"td\", {\"class\": re.compile(\".*bborder.*\")})\n\n        events_data = hs_strip_html(tds)\n\n        events_data = [\n            unidecode(x).replace(\"\\n \", \", \").replace(\"\\n\", \"\") for x in events_data\n        ]\n\n        length = int(len(events_data) / 8)\n\n        events_data = np.array(events_data).reshape(length, 8)\n\n        for idx, event in enumerate(events_data):\n            column_names = [\n                \"event_idx\",\n                \"period\",\n                \"strength\",\n                \"time\",\n                \"event\",\n                \"description\",\n                \"away_skaters\",\n                \"home_skaters\",\n            ]\n\n            if \"#\" in event:\n                continue\n\n            else:\n                event = dict(zip(column_names, event))\n\n                new_values = {\n                    \"season\": self.season,\n                    \"session\": self.session,\n                    \"game_id\": self.game_id,\n                    \"event_idx\": int(event[\"event_idx\"]),\n                    \"description\": unidecode(event[\"description\"]).upper(),\n                    \"period\": event[\"period\"],\n                }\n\n                event.update(new_values)\n\n                # This event is missing from the API and doesn't have a player in the HTML endpoint\n\n                if self.game_id == 2022020194 and event[\"event_idx\"] == 134:\n                    continue\n\n                if self.game_id == 2022020673 and event[\"event_idx\"] == 208:\n                    continue\n\n                events.append(event)\n\n        self._html_events = events\n\n    def _munge_html_events(self) -&gt; None:\n        \"\"\"Method to munge list of events from HTML endpoint. Updates self._html_events\"\"\"\n\n        game_session = self.session\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        roster = self._html_rosters\n\n        # Compiling regex expressions to save time later\n\n        event_team_re = re.compile(r\"^([A-Z]{3}|[A-Z]\\.[A-Z])\")\n        numbers_re = re.compile(r\"#([0-9]{1,2})\")\n        event_players_re = re.compile(r\"([A-Z]{3}\\s+#[0-9]{1,2})\")\n        re.compile(r\"([A-Z]{1,2})\")\n        fo_team_re = re.compile(r\"([A-Z]{3}) WON\")\n        block_team_re = re.compile(r\"BLOCKED BY\\s+([A-Z]{3})\")\n        re.compile(r\"(\\d+)\")\n        zone_re = re.compile(r\"([A-Za-z]{3}). ZONE\")\n        penalty_re = re.compile(\n            r\"([A-Za-z]*|[A-Za-z]*-[A-Za-z]*|[A-Za-z]*\\s+\\(.*\\))\\s*\\(\"\n        )\n        penalty_length_re = re.compile(r\"(\\d+) MIN\")\n        shot_re = re.compile(r\",\\s+([A-Za-z]*|[A-Za-z]*-[A-Za-z]*)\\s+,\")\n        distance_re = re.compile(r\"(\\d+) FT\")\n        served_re = re.compile(r\"([A-Z]{3})\\s.+SERVED BY: #([0-9]+)\")\n        # served_drawn_re = re.compile('([A-Z]{3})\\s#.*\\sSERVED BY: #([0-9]+)')\n        drawn_re = re.compile(r\"DRAWN BY: ([A-Z]{3}) #([0-9]+)\")\n\n        actives = {\n            player[\"team_jersey\"]: player\n            for player in roster\n            if player[\"status\"] == \"ACTIVE\"\n        }\n\n        scratches = {\n            player[\"team_jersey\"]: player\n            for player in roster\n            if player[\"status\"] == \"SCRATCH\"\n        }\n\n        for event in self._html_events:\n            non_descripts = {\n                \"PGSTR\": \"PRE-GAME START\",\n                \"PGEND\": \"PRE-GAME END\",\n                \"ANTHEM\": \"NATIONAL ANTHEM\",\n                \"EISTR\": \"EARLY INTERMISSION START\",\n                \"EIEND\": \"EARLY INTERMISSION END\",\n            }\n\n            if event[\"event\"] in list(non_descripts.keys()):\n                event[\"description\"] = non_descripts[event[\"event\"]]\n\n            # Replacing the team names with three-letter codes from API endpoint\n\n            new_team_names = {\n                \"L.A\": \"LAK\",\n                \"N.J\": \"NJD\",\n                \"S.J\": \"SJS\",\n                \"T.B\": \"TBL\",\n                \"PHX\": \"ARI\",\n            }\n\n            for old_name, new_name in new_team_names.items():\n                event[\"description\"] = (\n                    event[\"description\"].replace(old_name, new_name).upper()\n                )\n\n            event = html_events_fixes(self.game_id, event)\n\n            if event[\"event\"] == \"PEND\" and event[\"time\"] == \"-16:0-120:00\":\n                goals = [\n                    x\n                    for x in self._html_events\n                    if x[\"period\"] == event[\"period\"] and x[\"event\"] == \"GOAL\"\n                ]\n\n                if len(goals) == 0:\n                    if int(event[\"period\"]) == 4 and event[\"session\"] == \"R\":\n                        event[\"time\"] = event[\"time\"].replace(\n                            \"-16:0-120:00\", \"5:000:00\"\n                        )\n\n                    else:\n                        event[\"time\"] = event[\"time\"].replace(\n                            \"-16:0-120:00\", \"20:000:00\"\n                        )\n\n                elif len(goals) &gt; 0:\n                    goal = goals[-1]\n\n                    event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", goal[\"time\"])\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"PBOX\",\n            ]\n\n            if event[\"event\"] not in non_team_events:\n                try:\n                    event[\"event_team\"] = re.search(\n                        event_team_re, event[\"description\"]\n                    ).group(1)\n\n                    if event[\"event_team\"] == \"LEA\":\n                        event[\"event_team\"] = \"\"\n\n                except AttributeError:\n                    continue\n\n            if event[\"event\"] == \"FAC\":\n                event[\"event_team\"] = re.search(fo_team_re, event[\"description\"]).group(\n                    1\n                )\n\n            if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY\" in event[\"description\"]:\n                event[\"event_team\"] = re.search(\n                    block_team_re, event[\"description\"]\n                ).group(1)\n\n            event[\"period\"] = int(event[\"period\"])\n\n            time_split = event[\"time\"].split(\":\")\n\n            event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n            event[\"period_seconds\"] = (\n                60 * int(event[\"period_time\"].split(\":\")[0])\n            ) + int(event[\"period_time\"].split(\":\")[1])\n\n            event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\n                \"period_seconds\"\n            ]\n\n            if event[\"period\"] == 5 and game_session == \"R\":\n                event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            event_list = [\"GOAL\", \"SHOT\", \"TAKE\", \"GIVE\"]\n\n            if event[\"event\"] in event_list:\n                event_players = [\n                    event[\"event_team\"] + num\n                    for num in re.findall(numbers_re, event[\"description\"])\n                ]\n\n            else:\n                event_players = re.findall(event_players_re, event[\"description\"])\n\n            if event[\"event\"] == \"FAC\" and event[\"event_team\"] not in event_players[0]:\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            if event[\"event\"] == \"BLOCK\" and \"TEAMMATE\" in event[\"description\"]:\n                event[\"event_team\"] = event[\"description\"][:3]\n\n                event_players.insert(0, \"TEAMMATE\")\n\n            elif (\n                event[\"event\"] == \"BLOCK\" and \"BLOCKED BY OTHER\" in event[\"description\"]\n            ):\n                event[\"event_team\"] = \"OTHER\"\n\n                event_players.insert(0, \"REFEREE\")\n\n            elif (\n                event[\"event\"] == \"BLOCK\"\n                and event[\"event_team\"] not in event_players[0]\n            ):\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            for idx, event_player in enumerate(event_players):\n                num = idx + 1\n\n                event_player = event_player.replace(\" #\", \"\")\n\n                if event_player == \"TEAMMATE\":\n                    player_name = \"TEAMMATE\"\n                    eh_id = \"TEAMMATE\"\n                    position = None\n\n                elif event_player == \"REFEREE\":\n                    player_name = \"REFEREE\"\n                    eh_id = \"REFEREE\"\n                    position = None\n\n                else:\n                    try:\n                        player_name = actives[event_player][\"player_name\"]\n                        eh_id = actives[event_player][\"eh_id\"]\n                        position = actives[event_player][\"position\"]\n\n                    except KeyError:\n                        player_name = scratches[event_player][\"player_name\"]\n                        eh_id = scratches[event_player][\"eh_id\"]\n                        position = scratches[event_player][\"position\"]\n\n                new_values = {\n                    f\"player_{num}\": player_name,\n                    f\"player_{num}_eh_id\": eh_id,\n                    f\"player_{num}_position\": position,\n                }\n\n                event.update(new_values)\n\n            try:\n                event[\"zone\"] = (\n                    re.search(zone_re, event[\"description\"]).group(1).upper()\n                )\n\n                if \"BLOCK\" in event[\"event\"] and event[\"zone\"] == \"DEF\":\n                    event[\"zone\"] = \"OFF\"\n\n            except AttributeError:\n                pass\n\n            if event[\"event\"] == \"PENL\":\n                if (\n                    \"TEAM\" in event[\"description\"]\n                    and \"SERVED BY\" in event[\"description\"]\n                ) or (\"HEAD COACH\" in event[\"description\"]):\n                    event[\"player_1\"] = \"BENCH\"\n\n                    event[\"player_1_eh_id\"] = \"BENCH\"\n\n                    event[\"player_1_position\"] = None\n\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        name = served_by.group(1) + str(served_by.group(2))\n\n                    except AttributeError:\n                        try:\n                            drawn_by = re.search(drawn_re, event[\"description\"])\n\n                            name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        except AttributeError:\n                            continue\n\n                    event[\"player_2\"] = actives[name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[name][\"position\"]\n\n                if (\n                    \"SERVED BY\" in event[\"description\"]\n                    and \"DRAWN BY\" in event[\"description\"]\n                ):\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                        if event[\"player_1_eh_id\"] == event[\"player_2_eh_id\"]:\n                            event[\"player_1\"] = \"BENCH\"\n                            event[\"player_1_eh_id\"] = \"BENCH\"\n                            event[\"player_1_position\"] = None\n\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_3\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_3_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_3_position\"] = actives[served_name][\"position\"]\n\n                        if (\n                            \"TEAM\" in event[\"description\"]\n                            or \"HEAD COACH\" in event[\"description\"]\n                        ):\n                            event[\"player_2\"], event[\"player_3\"] = (\n                                event[\"player_3\"],\n                                event[\"player_2\"],\n                            )\n\n                            event[\"player_2_eh_id\"], event[\"player_3_eh_id\"] = (\n                                event[\"player_3_eh_id\"],\n                                event[\"player_2_eh_id\"],\n                            )\n\n                            event[\"player_2_position\"], event[\"player_3_position\"] = (\n                                event[\"player_3_position\"],\n                                event[\"player_2_position\"],\n                            )\n\n                    except AttributeError:\n                        pass\n\n                elif \"SERVED BY\" in event[\"description\"]:\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_2\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[served_name][\"position\"]\n\n                    except AttributeError:\n                        pass\n\n                elif \"DRAWN BY\" in event[\"description\"]:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                    except AttributeError:\n                        pass\n\n                if \"player_1\" not in event.keys():\n                    new_values = {\n                        \"player_1\": \"BENCH\",\n                        \"player_1_eh_id\": \"BENCH\",\n                        \"player_1_position\": \"\",\n                    }\n\n                    event.update(new_values)\n\n                try:\n                    event[\"penalty_length\"] = int(\n                        re.search(penalty_length_re, event[\"description\"]).group(1)\n                    )\n\n                except TypeError:\n                    pass\n\n                try:\n                    event[\"penalty\"] = (\n                        re.search(penalty_re, event[\"description\"]).group(1).upper()\n                    )\n\n                except AttributeError:\n                    continue\n\n                if (\n                    \"INTERFERENCE\" in event[\"description\"]\n                    and \"GOALKEEPER\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"GOALKEEPER INTERFERENCE\"\n\n                elif (\n                    \"CROSS\" in event[\"description\"]\n                    and \"CHECKING\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"CROSS-CHECKING\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"PUCK OVER\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - PUCK OVER GLASS\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"FO VIOL\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - FACEOFF VIOLATION\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"EQUIPMENT\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - EQUIPMENT\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"UNSUCC\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - UNSUCCESSFUL CHALLENGE\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"SMOTHERING\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - SMOTHERING THE PUCK\"\n\n                elif (\n                    \"ILLEGAL\" in event[\"description\"]\n                    and \"CHECK\" in event[\"description\"]\n                    and \"HEAD\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"ILLEGAL CHECK TO HEAD\"\n\n                elif (\n                    \"HIGH-STICKING\" in event[\"description\"]\n                    and \"- DOUBLE\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HIGH-STICKING - DOUBLE MINOR\"\n\n                elif \"GAME MISCONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n                elif \"MATCH PENALTY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"MATCH PENALTY\"\n\n                elif (\n                    \"NET\" in event[\"description\"]\n                    and \"DISPLACED\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DISPLACED NET\"\n\n                elif (\n                    \"THROW\" in event[\"description\"]\n                    and \"OBJECT\" in event[\"description\"]\n                    and \"AT PUCK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"THROWING OBJECT AT PUCK\"\n\n                elif (\n                    \"INSTIGATOR\" in event[\"description\"]\n                    and \"FACE SHIELD\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"INSTIGATOR - FACE SHIELD\"\n\n                elif \"GOALIE LEAVE CREASE\" in event[\"description\"]:\n                    event[\"penalty\"] = \"LEAVING THE CREASE\"\n\n                elif (\n                    \"REMOVING\" in event[\"description\"]\n                    and \"HELMET\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"REMOVING OPPONENT HELMET\"\n\n                elif (\n                    \"BROKEN\" in event[\"description\"] and \"STICK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOLDING BROKEN STICK\"\n\n                elif (\n                    \"HOOKING\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOOKING - BREAKAWAY\"\n\n                elif (\n                    \"HOLDING\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOLDING - BREAKAWAY\"\n\n                elif (\n                    \"TRIPPING\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"TRIPPING - BREAKAWAY\"\n\n                elif (\n                    \"SLASH\" in event[\"description\"]\n                    and \"BREAKAWAY\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"SLASHING - BREAKAWAY\"\n\n                elif \"TEAM TOO MANY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"TOO MANY MEN ON THE ICE\"\n\n                elif (\n                    \"HOLDING\" in event[\"description\"]\n                    and \"STICK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"HOLDING THE STICK\"\n\n                elif (\n                    \"THROWING\" in event[\"description\"]\n                    and \"STICK\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"THROWING STICK\"\n\n                elif (\n                    \"CLOSING\" in event[\"description\"] and \"HAND\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"CLOSING HAND ON PUCK\"\n\n                elif (\n                    \"ABUSE\" in event[\"description\"]\n                    and \"OFFICIALS\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"ABUSE OF OFFICIALS\"\n\n                elif \"UNSPORTSMANLIKE CONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"UNSPORTSMANLIKE CONDUCT\"\n\n                elif (\n                    \"PUCK\" in event[\"description\"]\n                    and \"THROWN\" in event[\"description\"]\n                    and \"FWD\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"PUCK THROWN FORWARD - GOALKEEPER\"\n\n                elif \"DELAY\" in event[\"description\"] and \"GAME\" in event[\"description\"]:\n                    event[\"penalty\"] = \"DELAY OF GAME\"\n\n                elif event[\"penalty\"] == \"MISCONDUCT\":\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n            shot_events = [\"GOAL\", \"SHOT\", \"MISS\", \"BLOCK\"]\n\n            if event[\"event\"] in shot_events:\n                try:\n                    event[\"shot_type\"] = (\n                        re.search(shot_re, event[\"description\"]).group(1).upper()\n                    )\n\n                except AttributeError:\n                    event[\"shot_type\"] = \"WRIST\"\n\n                    pass\n\n                if \"BETWEEN LEGS\" in event[\"description\"]:\n                    event[\"shot_type\"] = \"BETWEEN LEGS\"\n\n            try:\n                event[\"pbp_distance\"] = int(\n                    re.search(distance_re, event[\"description\"]).group(1)\n                )\n\n            except AttributeError:\n                if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                    event[\"pbp_distance\"] = 0\n\n                pass\n\n        self._html_events = sorted(self._html_events, key=lambda k: (k[\"event_idx\"]))\n\n        final_events = []\n\n        for event in self._html_events:\n            if \"period_seconds\" not in event.keys():\n                if \"time\" in event.keys():\n                    event[\"period\"] = int(event[\"period\"])\n\n                    time_split = event[\"time\"].split(\":\")\n\n                    event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n                    event[\"period_seconds\"] = (\n                        60 * int(event[\"period_time\"].split(\":\")[0])\n                    ) + int(event[\"period_time\"].split(\":\")[1])\n\n            if \"game_seconds\" not in event.keys():\n                event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\n                    \"period_seconds\"\n                ]\n\n                if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                    event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            if \"version\" not in event.keys():\n                other_events = [\n                    x\n                    for x in self._html_events\n                    if x != event\n                    and x[\"event\"] == event[\"event\"]\n                    and x.get(\"game_seconds\") == event[\"game_seconds\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                ]\n\n                version = 1\n\n                event[\"version\"] = version\n\n                if len(other_events) &gt; 0:\n                    for idx, other_event in enumerate(other_events):\n                        if \"version\" not in other_event.keys():\n                            version += 1\n\n                            other_event[\"version\"] = version\n\n            final_events.append(HTMLEvent.model_validate(event).model_dump())\n\n        self._html_events = final_events\n\n    @property\n    def html_events(self) -&gt; list:\n        \"\"\"List of events scraped from HTML endpoint. Each event is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_events\n\n        \"\"\"\n\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return self._html_events\n\n    @property\n    def html_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_events_df\n\n        \"\"\"\n\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return pd.DataFrame(self._html_events).fillna(np.nan)\n\n    def _scrape_html_rosters(self) -&gt; None:\n        \"\"\"Method for scraping players from HTML endpoint. Updates self._html_rosters\"\"\"\n\n        # URL and scraping url\n\n        url = self.html_rosters_endpoint\n\n        s = self._requests_session\n\n        try:\n            page = s.get(url)\n        except RetryError:\n            return None\n\n        # Continue if status code is bad\n\n        if page.status_code == 404:\n            return None\n\n        # Reading the HTML file using beautiful soup package\n\n        soup = BeautifulSoup(\n            page.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None\n        )\n\n        # Information for reading the HTML data\n\n        td_dict = {\n            \"align\": \"center\",\n            \"class\": [\"teamHeading + border\", \"teamHeading + border \"],\n            \"width\": \"50%\",\n        }\n\n        # Finding all active players in the html file\n\n        teamsoup = soup.find_all(\"td\", td_dict)\n\n        # Dictionary for finding each team's table in the HTML file\n\n        table_dict = {\n            \"align\": \"center\",\n            \"border\": \"0\",\n            \"cellpadding\": \"0\",\n            \"cellspacing\": \"0\",\n            \"width\": \"100%\",\n            \"xmlns:ext\": \"\",\n        }\n\n        # Dictionary to collect the team names\n\n        team_names = {}\n\n        # Dictionary to collect the team tables from the HTML data for iterating\n\n        team_soup_list = []\n\n        # List of teams for iterating\n\n        team_list = [\"away\", \"home\"]\n\n        # List to collect the player dictionaries during iteration\n\n        player_list = []\n\n        # Iterating through the home and away teams to collect names and tables\n\n        for idx, team in enumerate(team_list):\n            # Collecting team names\n\n            team_name = unidecode(\n                teamsoup[idx].get_text().encode(\"latin-1\").decode(\"utf-8\")\n            ).upper()\n\n            # Correcting the Coyotes team name\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            team_names.update({team: team_name})\n\n            # Collecting tables of active players\n\n            team_soup_list.append(\n                (soup.find_all(\"table\", table_dict))[idx].find_all(\"td\")\n            )\n\n        # Iterating through the team's tables of active players\n\n        for idx, team_soup in enumerate(team_soup_list):\n            table_dict = {\n                \"align\": \"center\",\n                \"border\": \"0\",\n                \"cellpadding\": \"0\",\n                \"cellspacing\": \"0\",\n                \"width\": \"100%\",\n                \"xmlns:ext\": \"\",\n            }\n\n            stuff = soup.find_all(\"table\", table_dict)[idx].find_all(\n                \"td\", {\"class\": \"bold\"}\n            )\n\n            starters = list(np.reshape(stuff, (int(len(stuff) / 3), 3))[:, 2])\n\n            # Getting length to create numpy array\n\n            length = int(len(team_soup) / 3)\n\n            # Creating a numpy array from the data, chopping off the headers to create my own\n\n            active_array = np.array(team_soup).reshape(length, 3)\n\n            # Getting original headers\n\n            og_headers = active_array[0]\n\n            if \"Name\" not in og_headers and \"Nom/Name\" not in og_headers:\n                continue\n\n            # Chop off the headers to create my own\n\n            actives = active_array[1:]\n\n            # Iterating through each player, or row in the array\n\n            for player in actives:\n                # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                if len(player) == 3:\n                    headers = [\"jersey\", \"position\", \"player_name\"]\n\n                # Sometimes headers are missing\n\n                else:\n                    headers = [\"jersey\", \"player_name\"]\n\n                # Creating dictionary with headers as keys from the player data\n\n                player = dict(zip(headers, player))\n\n                # Adding new values to the player dictionary\n\n                new_values = {\n                    \"team_name\": team_names.get(team_list[idx]),\n                    \"team_venue\": team_list[idx].upper(),\n                    \"status\": \"ACTIVE\",\n                }\n\n                if player[\"player_name\"] in starters:\n                    player[\"starter\"] = 1\n\n                else:\n                    player[\"starter\"] = 0\n\n                player[\"player_name\"] = (\n                    re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                    .strip()\n                    .encode(\"latin-1\")\n                    .decode(\"utf-8\")\n                    .upper()\n                )\n\n                player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                if \"position\" not in headers:\n                    player[\"position\"] = None\n\n                # Update the player's dictionary with new values\n\n                player.update(new_values)\n\n                # Append player dictionary to list of players\n\n                player_list.append(player)\n\n        # Check if scratches are present\n\n        if len(soup.find_all(\"table\", table_dict)) &gt; 2:\n            # If scratches are present, iterate through the team's scratch tables\n\n            for idx, team in enumerate(team_list):\n                # Getting team's scratches from HTML\n\n                scratch_soup = (soup.find_all(\"table\", table_dict))[idx + 2].find_all(\n                    \"td\"\n                )\n\n                # Checking to see if there is at least one set of scratches (first row are headers)\n\n                if len(scratch_soup) &gt; 1:\n                    # Getting the number of scratches\n\n                    length = int(len(scratch_soup) / 3)\n\n                    # Creating numpy array of scratches, removing headers\n\n                    scratches = np.array(scratch_soup).reshape(length, 3)[1:]\n\n                    # Iterating through the array\n\n                    for player in scratches:\n                        # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                        if len(player) == 3:\n                            headers = [\"jersey\", \"position\", \"player_name\"]\n\n                        # Sometimes headers are missing\n\n                        else:\n                            headers = [\"jersey\", \"player_name\"]\n\n                        # Creating dictionary with headers as keys from the player data\n\n                        player = dict(zip(headers, player))\n\n                        # Adding new values to the player dictionary\n\n                        new_values = {\n                            \"team_name\": team_names.get(team_list[idx]),\n                            \"team_venue\": team_list[idx].upper(),\n                            \"starter\": 0,\n                            \"status\": \"SCRATCH\",\n                        }\n\n                        if \"position\" not in headers:\n                            player[\"position\"] = None\n\n                        player[\"player_name\"] = (\n                            re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                            .strip()\n                            .encode(\"latin-1\")\n                            .decode(\"utf-8\")\n                            .upper()\n                        )\n\n                        player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                        # Updating player dictionary\n\n                        player.update(new_values)\n\n                        # Appending the player dictionary to the player list\n\n                        player_list.append(player)\n\n        self._html_rosters = player_list\n\n    def _munge_html_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from HTML endpoint. Updates self._html_rosters\"\"\"\n\n        season = self.season\n        game_session = self.session\n\n        # Iterating through each player to change information\n\n        final_rosters = []\n\n        for player in self._html_rosters:\n            # Fixing jersey data type\n\n            player = html_rosters_fixes(self.game_id, player)\n\n            player[\"jersey\"] = int(player[\"jersey\"])\n\n            # Adding new values in a batch\n\n            new_values = {\n                \"season\": int(season),\n                \"session\": game_session,\n                \"game_id\": self.game_id,\n            }\n\n            player.update(new_values)\n\n            player[\"player_name\"] = (\n                player[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player[\"player_name\"] = correct_names_dict.get(\n                player[\"player_name\"], player[\"player_name\"]\n            )\n\n            # Creating Evolving Hockey ID\n\n            player[\"eh_id\"] = unidecode(player[\"player_name\"])\n\n            name_split = player[\"eh_id\"].split(\" \", maxsplit=1)\n\n            player[\"eh_id\"] = f\"{name_split[0]}.{name_split[1]}\"\n\n            player[\"eh_id\"] = player[\"eh_id\"].replace(\"..\", \".\")\n\n            # Correcting Evolving Hockey IDs for duplicates\n\n            duplicates = {\n                \"SEBASTIAN.AHO\": player[\"position\"] == \"D\",\n                \"COLIN.WHITE\": player[\"season\"] &gt;= 20162017,\n                \"SEAN.COLLINS\": player[\"position\"] != \"D\",\n                \"ALEX.PICARD\": player[\"position\"] != \"D\",\n                \"ERIK.GUSTAFSSON\": player[\"season\"] &gt;= 20152016,\n                \"MIKKO.LEHTONEN\": player[\"season\"] &gt;= 20202021,\n                \"NATHAN.SMITH\": player[\"season\"] &gt;= 20212022,\n                \"DANIIL.TARASOV\": player[\"position\"] == \"G\",\n            }\n\n            # Iterating through the duplicate names and conditions\n\n            for duplicate_name, condition in duplicates.items():\n                if player[\"eh_id\"] == duplicate_name and condition:\n                    player[\"eh_id\"] = f\"{duplicate_name}2\"\n\n            # Something weird with Colin White\n\n            if player[\"eh_id\"] == \"COLIN.\":\n                player[\"eh_id\"] = \"COLIN.WHITE2\"\n\n            player[\"team\"] = team_codes.get(player[\"team_name\"])\n\n            player[\"team_jersey\"] = f\"{player['team']}{player['jersey']}\"\n\n            final_rosters.append(HTMLRosterPlayer.model_validate(player).model_dump())\n\n        self._html_rosters = final_rosters\n\n        self._html_rosters = sorted(\n            self._html_rosters,\n            key=lambda k: (k[\"team_venue\"], k[\"status\"], k[\"player_name\"]),\n        )\n\n    @property\n    def html_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from HTML endpoint. Returns a dictionary of players with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_rosters\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return self._html_rosters\n\n    @property\n    def html_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_rosters_df\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return pd.DataFrame(self._html_rosters).fillna(np.nan)\n\n    def _combine_events(self) -&gt; None:\n        \"\"\"Method to combine API and HTML events. Updates self._play_by_play\"\"\"\n\n        html_events = self._html_events\n        api_events = self._api_events\n\n        game_list = []\n\n        for event in html_events:\n            if event[\"event\"] == \"EGPID\":\n                continue\n\n            event_data = {}\n\n            event_data.update(event)\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"EGT\",\n                \"PBOX\",\n                \"PRDY\",\n                \"POFF\",\n                \"GOFF\",\n            ]\n\n            if event[\"event\"] in non_team_events:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is None:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is not None:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"PENL\":\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x.get(\"player_2_eh_id\") == event.get(\"player_2_eh_id\")\n                    and x.get(\"player_3_eh_id\") == event.get(\"player_3_eh_id\")\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                ]\n\n            elif event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            else:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if event[\"event\"] == \"FAC\" and len(api_matches) == 0:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if len(api_matches) == 0:\n                game_list.append(event_data)\n\n                continue\n\n            elif len(api_matches) == 1:\n                api_match = api_matches[0]\n\n                new_values = {\n                    \"event_idx_api\": api_match.get(\"event_idx\"),\n                    \"coords_x\": api_match.get(\"coords_x\"),\n                    \"coords_y\": api_match.get(\"coords_y\"),\n                    \"player_1_eh_id_api\": api_match.get(\"player_1_eh_id\"),\n                    \"player_1_api_id\": api_match.get(\"player_1_api_id\"),\n                    \"player_1_type\": api_match.get(\"player_1_type\"),\n                    \"player_2_eh_id_api\": api_match.get(\"player_2_eh_id\"),\n                    \"player_2_api_id\": api_match.get(\"player_2_api_id\"),\n                    \"player_2_type\": api_match.get(\"player_2_type\"),\n                    \"player_3_eh_id_api\": api_match.get(\"player_3_eh_id\"),\n                    \"player_3_api_id\": api_match.get(\"player_3_api_id\"),\n                    \"player_3_type\": api_match.get(\"player_3_type\"),\n                    \"version_api\": api_match.get(\"version\", 1),\n                }\n\n                event_data.update(new_values)\n\n                if event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":\n                    new_values = {\n                        \"player_1\": api_match.get(\"player_1\", event[\"player_1\"]),\n                        \"player_1_eh_id\": api_match.get(\n                            \"player_1_eh_id\", event[\"player_1_eh_id\"]\n                        ),\n                        \"player_1_position\": api_match.get(\n                            \"player_1_position\", event[\"player_1_position\"]\n                        ),\n                    }\n\n                    event_data.update(new_values)\n\n                game_list.append(event_data)\n\n        game_list.extend(self._changes)\n\n        for event in game_list:\n            new_values = {\n                \"game_date\": self.game_date,\n                \"home_team\": self.home_team[\"abbrev\"],\n                \"away_team\": self.away_team[\"abbrev\"],\n            }\n\n            event.update(new_values)\n\n            if \"version\" not in event.keys():\n                event[\"version\"] = 1\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                event[\"sort_value\"] = event[\"event_idx\"]\n\n            else:\n                sort_dict = {\n                    \"PGSTR\": 1,\n                    \"PGEND\": 2,\n                    \"ANTHEM\": 3,\n                    \"EGT\": 3,\n                    \"CHL\": 3,\n                    \"DELPEN\": 3,\n                    \"BLOCK\": 3,\n                    \"GIVE\": 3,\n                    \"HIT\": 3,\n                    \"MISS\": 3,\n                    \"SHOT\": 3,\n                    \"TAKE\": 3,\n                    \"GOAL\": 5,\n                    \"STOP\": 6,\n                    \"PENL\": 7,\n                    \"PBOX\": 7,\n                    \"PSTR\": 7,\n                    \"CHANGE\": 8,\n                    \"EISTR\": 9,\n                    \"EIEND\": 10,\n                    \"FAC\": 12,\n                    \"PEND\": 13,\n                    \"SOC\": 14,\n                    \"GEND\": 15,\n                    \"GOFF\": 16,\n                }\n\n                event[\"sort_value\"] = sort_dict[event[\"event\"]]\n\n        game_list = sorted(\n            game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"sort_value\"])\n        )  # , k['version']\n\n        self._play_by_play = game_list\n\n    def _munge_play_by_play(self) -&gt; None:\n        \"\"\"Method to munge list of events and changes for play-by-play. Updates self._play_by_play\"\"\"\n\n        game_session = self.session\n\n        home_score = 0\n\n        away_score = 0\n\n        for idx, event in enumerate(self._play_by_play):\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"opp_team\"] = event[\"away_team\"]\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"opp_team\"] = event[\"home_team\"]\n\n            event[\"home_forwards_eh_id\"] = []\n            event[\"home_forwards_api_id\"] = []\n            event[\"home_forwards\"] = []\n            event[\"home_forwards_positions\"] = []\n\n            event[\"home_defense_eh_id\"] = []\n            event[\"home_defense_api_id\"] = []\n            event[\"home_defense\"] = []\n            event[\"home_defense_positions\"] = []\n\n            event[\"home_goalie_eh_id\"] = []\n            event[\"home_goalie_api_id\"] = []\n            event[\"home_goalie\"] = []\n\n            event[\"away_forwards_eh_id\"] = []\n            event[\"away_forwards_api_id\"] = []\n            event[\"away_forwards\"] = []\n            event[\"away_forwards_positions\"] = []\n\n            event[\"away_defense_eh_id\"] = []\n            event[\"away_defense_api_id\"] = []\n            event[\"away_defense\"] = []\n            event[\"away_defense_positions\"] = []\n\n            event[\"away_goalie_eh_id\"] = []\n            event[\"away_goalie_api_id\"] = []\n            event[\"away_goalie\"] = []\n\n            if (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"home_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    home_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:\n                    ot_events = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(home_goals) &gt; len(away_goals):\n                        home_score += 1\n\n                else:\n                    home_score += 1\n\n            elif (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"away_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    away_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:\n                    ot_events = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\"\n                        and x[\"period\"] == 5\n                        and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(away_goals) &gt; len(home_goals):\n                        away_score += 1\n\n                else:\n                    away_score += 1\n\n            event[\"home_score\"] = home_score\n            event[\"home_score_diff\"] = home_score - away_score\n\n            event[\"away_score\"] = away_score\n            event[\"away_score_diff\"] = away_score - home_score\n\n            event[\"score_state\"] = f\"{home_score}v{away_score}\"\n            event[\"score_diff\"] = home_score - away_score\n\n        roster = [x for x in self._rosters if x[\"status\"] == \"ACTIVE\"]\n\n        roster = sorted(roster, key=lambda k: (k[\"team_venue\"], k[\"jersey\"]))\n\n        for player in roster:\n            counter = 0\n\n            for event in self._play_by_play:\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_on\") is not None\n                ):\n                    players_on = [\n                        x\n                        for x in event[\"change_on_jersey\"].split(\", \")\n                        if x == player[\"team_jersey\"]\n                    ]\n\n                    if len(players_on) &gt; 0:\n                        counter += 1\n\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_off\") is not None\n                ):\n                    players_off = [\n                        x\n                        for x in event[\"change_off_jersey\"].split(\", \")\n                        if x == player[\"team_jersey\"]\n                    ]\n\n                    if len(players_off) &gt; 0:\n                        counter -= 1\n\n                if counter &gt; 0:\n                    forwards = [\"L\", \"C\", \"R\"]\n\n                    if player[\"team_venue\"] == \"HOME\":\n                        if player[\"position\"] in forwards:\n                            event[\"home_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_forwards\"].append(player[\"player_name\"])\n                            event[\"home_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"home_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_defense\"].append(player[\"player_name\"])\n                            event[\"home_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"home_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_goalie\"].append(player[\"player_name\"])\n\n                    else:\n                        if player[\"position\"] in forwards:\n                            event[\"away_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_forwards\"].append(player[\"player_name\"])\n                            event[\"away_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"away_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_defense\"].append(player[\"player_name\"])\n                            event[\"away_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"away_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_goalie\"].append(player[\"player_name\"])\n\n        # Instantiating shapely objects for high-danger and danger area computations\n\n        high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n        high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n        danger1 = Polygon(\n            np.array(\n                [\n                    [89, 9],\n                    [89, -9],\n                    [69, -22],\n                    [54, -22],\n                    [54, -9],\n                    [44, -9],\n                    [44, 9],\n                    [54, 9],\n                    [54, 22],\n                    [69, 22],\n                ]\n            )\n        )\n        danger2 = Polygon(\n            np.array(\n                [\n                    [-89, 9],\n                    [-89, -9],\n                    [-69, -22],\n                    [-54, -22],\n                    [-54, -9],\n                    [-44, -9],\n                    [-44, 9],\n                    [-54, 9],\n                    [-54, 22],\n                    [-69, 22],\n                ]\n            )\n        )\n\n        final_events = []\n\n        for idx, event in enumerate(self._play_by_play):\n            if idx == 0:\n                event_length_idx = 0\n\n            else:\n                event_length_idx = idx - 1\n\n            new_values = {\n                \"event_idx\": idx + 1,\n                \"event_length\": event[\"game_seconds\"]\n                - self._play_by_play[event_length_idx][\"game_seconds\"],\n                \"home_on_eh_id\": event[\"home_forwards_eh_id\"]\n                + event[\"home_defense_eh_id\"],\n                \"home_on_api_id\": event[\"home_forwards_api_id\"]\n                + event[\"home_defense_api_id\"],\n                \"home_on\": event[\"home_forwards\"] + event[\"home_defense\"],\n                \"home_on_positions\": event[\"home_forwards_positions\"]\n                + event[\"home_defense_positions\"],\n                \"away_on_eh_id\": event[\"away_forwards_eh_id\"]\n                + event[\"away_defense_eh_id\"],\n                \"away_on_api_id\": event[\"away_forwards_api_id\"]\n                + event[\"away_defense_api_id\"],\n                \"away_on\": event[\"away_forwards\"] + event[\"away_defense\"],\n                \"away_on_positions\": event[\"away_forwards_positions\"]\n                + event[\"away_defense_positions\"],\n            }\n\n            event.update(new_values)\n\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"is_home\"] = 1\n\n            else:\n                event[\"is_home\"] = 0\n\n            if event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"is_away\"] = 1\n\n            else:\n                event[\"is_away\"] = 0\n\n            if (\n                event.get(\"coords_x\") is not None\n                and event.get(\"coords_x\") != \"\"\n                and event.get(\"coords_y\") is not None\n                and event.get(\"coords_y\") != \"\"\n            ):\n                # Fixing event angle and distance for errors\n\n                is_fenwick = event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                is_long_distance = (\n                    event[\"pbp_distance\"] is not None\n                    and event.get(\"pbp_distance\", 0) &gt; 89\n                )\n                x_is_neg = event.get(\"coords_x\", 0) &lt; 0\n                x_is_pos = event.get(\"coords_x\", 0) &gt; 0\n                bad_shots = event.get(\"shot_type\", \"WRIST\") not in [\n                    \"TIP-IN\",\n                    \"WRAP-AROUND\",\n                    \"WRAP\",\n                    \"DEFLECTED\",\n                    \"BAT\",\n                    \"BETWEEN LEGS\",\n                    \"POKE\",\n                ]\n\n                zone_cond = event.get(\"zone\") != \"OFF\"\n\n                x_is_neg_conds = (\n                    is_fenwick &amp; is_long_distance &amp; x_is_neg &amp; bad_shots &amp; zone_cond\n                )\n\n                x_is_pos_conds = (\n                    is_fenwick &amp; is_long_distance &amp; x_is_pos &amp; bad_shots &amp; zone_cond\n                )\n\n                if x_is_neg_conds is True:\n                    event[\"event_distance\"] = (\n                        (abs(event[\"coords_x\"]) + 89) ** 2 + event[\"coords_y\"] ** 2\n                    ) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(\n                                np.arctan(\n                                    event[\"coords_y\"] / (abs(event[\"coords_x\"] + 89))\n                                )\n                            )\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                elif x_is_pos_conds is True:\n                    event[\"event_distance\"] = (\n                        (event[\"coords_x\"] + 89) ** 2 + event[\"coords_y\"] ** 2\n                    ) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(np.arctan(event[\"coords_y\"] / (event[\"coords_x\"] + 89)))\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                else:\n                    event[\"event_distance\"] = (\n                        (89 - abs(event[\"coords_x\"])) ** 2 + event[\"coords_y\"] ** 2\n                    ) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(\n                                np.arctan(\n                                    event[\"coords_y\"] / (89 - abs(event[\"coords_x\"]))\n                                )\n                            )\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            if (\n                event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                and event.get(\"zone\") == \"DEF\"\n                and event.get(\"event_distance\", 0) &lt;= 64\n            ):\n                event[\"zone\"] = \"OFF\"\n\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                if event.get(\"zone\") == \"OFF\":\n                    if (\n                        event.get(\"coords_x\") is not None\n                        and event.get(\"coords_y\") is not None\n                    ):\n                        shot_coords = Point(event[\"coords_x\"], event[\"coords_y\"])\n\n                        if danger1.contains(shot_coords) or danger2.contains(\n                            shot_coords\n                        ):\n                            event[\"danger\"] = 1\n\n                        else:\n                            event[\"danger\"] = 0\n\n                        if high_danger1.contains(shot_coords) or high_danger2.contains(\n                            shot_coords\n                        ):\n                            event[\"high_danger\"] = 1\n\n                            event[\"danger\"] = 0\n\n                        else:\n                            event[\"high_danger\"] = 0\n\n                    else:\n                        event[\"high_danger\"] = 0\n\n                        event[\"danger\"] = 0\n\n                else:\n                    event[\"high_danger\"] = 0\n\n                    event[\"danger\"] = 0\n\n            event[\"home_skaters\"] = len(event[\"home_on_eh_id\"])\n\n            event[\"away_skaters\"] = len(event[\"away_on_eh_id\"])\n\n            if not event[\"home_goalie\"]:\n                home_on = \"E\"\n\n            else:\n                home_on = event[\"home_skaters\"]\n\n            if not event[\"away_goalie\"]:\n                away_on = \"E\"\n\n            else:\n                away_on = event[\"away_skaters\"]\n\n            event[\"strength_state\"] = f\"{home_on}v{away_on}\"\n\n            if \"PENALTY SHOT\" in event[\"description\"]:\n                event[\"strength_state\"] = \"1v0\"\n\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                new_values = {\n                    \"strength_state\": f\"{home_on}v{away_on}\",\n                    \"score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"score_diff\": event[\"home_score_diff\"],\n                    \"event_team_skaters\": event[\"home_skaters\"],\n                    \"teammates_eh_id\": event[\"home_on_eh_id\"],\n                    \"teammates_api_id\": event[\"home_on_api_id\"],\n                    \"teammates\": event[\"home_on\"],\n                    \"teammates_positions\": event[\"home_on_positions\"],\n                    \"forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"forwards\": event[\"home_forwards\"],\n                    \"defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"defense_api_id\": event[\"home_defense_api_id\"],\n                    \"defense\": event[\"home_defense\"],\n                    \"own_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"own_goalie\": event[\"home_goalie\"],\n                    \"opp_strength_state\": f\"{away_on}v{home_on}\",\n                    \"opp_score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"opp_score_diff\": event[\"away_score_diff\"],\n                    \"opp_team_skaters\": event[\"away_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"away_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"away_on_api_id\"],\n                    \"opp_team_on\": event[\"away_on\"],\n                    \"opp_forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"opp_forwards\": event[\"away_forwards\"],\n                    \"opp_defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"away_defense_api_id\"],\n                    \"opp_defense\": event[\"away_defense\"],\n                    \"opp_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"opp_goalie\": event[\"away_goalie\"],\n                }\n\n                event.update(new_values)\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                new_values = {\n                    \"strength_state\": f\"{away_on}v{home_on}\",\n                    \"score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"score_diff\": event[\"away_score_diff\"],\n                    \"event_team_skaters\": event[\"away_skaters\"],\n                    \"teammates_eh_id\": event[\"away_on_eh_id\"],\n                    \"teammates_api_id\": event[\"away_on_api_id\"],\n                    \"teammates\": event[\"away_on\"],\n                    \"teammates_positions\": event[\"away_on_positions\"],\n                    \"forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"forwards\": event[\"away_forwards\"],\n                    \"defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"defense_api_id\": event[\"away_defense_api_id\"],\n                    \"defense\": event[\"away_defense\"],\n                    \"own_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"own_goalie\": event[\"away_goalie\"],\n                    \"opp_strength_state\": f\"{home_on}v{away_on}\",\n                    \"opp_score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"opp_score_diff\": event[\"home_score_diff\"],\n                    \"opp_team_skaters\": event[\"home_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"home_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"home_on_api_id\"],\n                    \"opp_team_on\": event[\"home_on\"],\n                    \"opp_team_on_positions\": event[\"home_on_positions\"],\n                    \"opp_forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"opp_forwards\": event[\"home_forwards\"],\n                    \"opp_defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"home_defense_api_id\"],\n                    \"opp_defense\": event[\"home_defense\"],\n                    \"opp_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"opp_goalie\": event[\"home_goalie\"],\n                }\n\n                event.update(new_values)\n\n            if (event[\"home_skaters\"] &gt; 5 and event[\"home_goalie\"] != []) or (\n                event[\"away_skaters\"] &gt; 5 and event[\"away_goalie\"] != []\n            ):\n                event[\"strength_state\"] = \"ILLEGAL\"\n\n                event[\"opp_strength_state\"] = \"ILLEGAL\"\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                event[\"strength_state\"] = \"1v0\"\n\n            if event[\"event\"] == \"CHANGE\":\n                faceoffs = [\n                    x\n                    for x in self._play_by_play\n                    if (\n                        x[\"event\"] == \"FAC\"\n                        and x[\"game_seconds\"] == event[\"game_seconds\"]\n                        and x[\"period\"] == event[\"period\"]\n                    )\n                ]\n\n                if len(faceoffs) &gt; 0:\n                    game_seconds_list = [x[\"game_seconds\"] for x in self._play_by_play]\n\n                    max_seconds = max(game_seconds_list)\n\n                    bad_seconds = [0, 1200, 2400, 3600, 3900, max_seconds]\n\n                    if event[\"game_seconds\"] not in bad_seconds:\n                        event[\"coords_x\"] = faceoffs[0].get(\"coords_x\", \"\")\n\n                        event[\"coords_y\"] = faceoffs[0].get(\"coords_y\", \"\")\n\n                        if event[\"event_team\"] == faceoffs[0][\"event_team\"]:\n                            event[\"zone_start\"] = faceoffs[0][\"zone\"]\n\n                        else:\n                            zones = {\"OFF\": \"DEF\", \"DEF\": \"OFF\", \"NEU\": \"NEU\"}\n\n                            event[\"zone_start\"] = zones[faceoffs[0][\"zone\"]]\n\n                else:\n                    event[\"zone_start\"] = \"OTF\"\n\n            event_dummies = [\n                \"block\",\n                \"change\",\n                \"chl\",\n                \"fac\",\n                \"give\",\n                \"goal\",\n                \"hit\",\n                \"miss\",\n                \"penl\",\n                \"shot\",\n                \"stop\",\n                \"take\",\n            ]\n\n            for event_dummy in event_dummies:\n                if event[\"event\"].lower() == event_dummy:\n                    event[event_dummy] = 1\n\n                else:\n                    event[event_dummy] = 0\n\n            if event[\"event\"] == \"GOAL\" or event[\"event\"] == \"SHOT\":\n                event[\"shot\"] = 1\n\n            fenwick_events = [\"SHOT\", \"GOAL\", \"MISS\"]\n\n            if event[\"event\"] in fenwick_events:\n                event[\"fenwick\"] = 1\n\n            else:\n                event[\"fenwick\"] = 0\n\n            corsi_events = fenwick_events + [\"BLOCK\"]\n\n            if event[\"event\"] in corsi_events:\n                event[\"corsi\"] = 1\n\n            else:\n                event[\"corsi\"] = 0\n\n            if event[\"event\"] == \"FAC\":\n                if event[\"zone\"] == \"OFF\":\n                    event[\"ozf\"] = 1\n\n                else:\n                    event[\"ozf\"] = 0\n\n                if event[\"zone\"] == \"DEF\":\n                    event[\"dzf\"] = 1\n\n                else:\n                    event[\"dzf\"] = 0\n\n                if event[\"zone\"] == \"NEU\":\n                    event[\"nzf\"] = 1\n\n                else:\n                    event[\"nzf\"] = 0\n\n            else:\n                event[\"ozf\"] = 0\n                event[\"nzf\"] = 0\n                event[\"dzf\"] = 0\n\n            if event[\"event\"] == \"CHANGE\" and event.get(\"zone_start\") is not None:\n                if event[\"zone_start\"] == \"OFF\":\n                    event[\"ozc\"] = 1\n\n                else:\n                    event[\"ozc\"] = 0\n\n                if event[\"zone_start\"] == \"DEF\":\n                    event[\"dzc\"] = 1\n\n                else:\n                    event[\"dzc\"] = 0\n\n                if event[\"zone_start\"] == \"NEU\":\n                    event[\"nzc\"] = 1\n\n                else:\n                    event[\"nzc\"] = 0\n\n                if event[\"zone_start\"] == \"OTF\":\n                    event[\"otf\"] = 1\n\n                else:\n                    event[\"otf\"] = 0\n\n            else:\n                event[\"ozc\"] = 0\n                event[\"nzc\"] = 0\n                event[\"dzc\"] = 0\n                event[\"otf\"] = 0\n\n            if event[\"event\"] == \"PENL\":\n                penalty_lengths = [0, 2, 4, 5, 10]\n\n                for penalty_length in penalty_lengths:\n                    if event.get(\"penalty_length\") == penalty_length:\n                        event[f\"pen{penalty_length}\"] = 1\n\n                    else:\n                        event[f\"pen{penalty_length}\"] = 0\n\n            else:\n                event[\"pen0\"] = 0\n                event[\"pen2\"] = 0\n                event[\"pen4\"] = 0\n                event[\"pen5\"] = 0\n                event[\"pen10\"] = 0\n\n            final_events.append(PBPEvent.model_validate(event).model_dump())\n\n        self._play_by_play = final_events\n\n    @property\n    def play_by_play(self) -&gt; list:\n        \"\"\"List of events in play-by-play. Each event is a dictionary with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).play_by_play_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.play_by_play\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._html_events is None:\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        if self._changes is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n            self._munge_changes()\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._rosters is None:\n            self._combine_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        if self._play_by_play is None:\n            self._combine_events()\n            self._munge_play_by_play()\n\n        return self._play_by_play\n\n    @property\n    def play_by_play_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.play_by_play_df\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._html_events is None:\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        if self._changes is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n            self._munge_changes()\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._rosters is None:\n            self._combine_rosters()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        if self._play_by_play is None:\n            self._combine_events()\n            self._munge_play_by_play()\n\n        return pd.DataFrame(self._play_by_play).fillna(np.nan)\n\n    def _combine_rosters(self) -&gt; None:\n        \"\"\"Method to combine API and HTML rosters. Updates self._rosters\"\"\"\n\n        html_rosters = self._html_rosters\n        api_rosters = self._api_rosters\n\n        api_rosters_dict = {x[\"team_jersey\"]: x for x in api_rosters}\n\n        players = []\n\n        for player in html_rosters:\n            if player[\"status\"] == \"ACTIVE\":\n                api_info = api_rosters_dict[player[\"team_jersey\"]]\n\n            else:\n                api_info = {\n                    \"api_id\": None,\n                    \"headshot_url\": None,\n                }\n\n            player_info = {}\n\n            player_info.update(player)\n\n            new_values = {\n                \"api_id\": api_info[\"api_id\"],\n                \"headshot_url\": api_info[\"headshot_url\"],\n            }\n\n            player_info.update(new_values)\n\n            players.append(RosterPlayer.model_validate(player_info).model_dump())\n\n        self._rosters = players\n\n    @property\n    def rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API &amp; HTML endpoints. Returns a dictionary of players with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.rosters\n\n        \"\"\"\n\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._rosters is None:\n            self._combine_rosters()\n\n        return self._rosters\n\n    @property\n    def rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"\n        Pandas Dataframe of players scraped from API &amp; HTML endpoints\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.rosters_df\n\n        \"\"\"\n\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._combine_rosters()\n\n        return pd.DataFrame(self._rosters).fillna(np.nan)\n\n    def _scrape_shifts(self) -&gt; None:\n        \"\"\"Method for scraping shifts from HTML endpoint. Updates self._shifts\"\"\"\n\n        # Creating basic information from game ID\n        season = self.season\n        game_session = self.session\n        game_id = self.game_id\n\n        # This is the list for collecting all the game information for the end\n\n        game_list = []\n\n        # Dictionary of urls for scraping\n\n        urls_dict = {\n            \"HOME\": self.home_shifts_endpoint,\n            \"AWAY\": self.away_shifts_endpoint,\n        }\n\n        # Iterating through the url dictionary\n\n        for team_venue, url in urls_dict.items():\n            response = requests.get(url)\n\n            soup = BeautifulSoup(\n                response.content.decode(\"ISO-8859-1\"),\n                \"lxml\",\n                multi_valued_attributes=None,\n            )\n\n            # Getting team names from the HTML Data\n\n            team_name = soup.find(\n                \"td\", {\"align\": \"center\", \"class\": \"teamHeading + border\"}\n            )\n\n            # Converting team names to proper format\n\n            if team_name is None:\n                continue\n\n            team_name = unidecode(team_name.get_text())\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            elif \"CANADIENS\" in team_name:\n                team_name = \"MONTREAL CANADIENS\"\n\n            # Getting players from the HTML data\n\n            players = soup.find_all(\n                \"td\", {\"class\": [\"playerHeading + border\", \"lborder + bborder\"]}\n            )\n\n            # Creating a dictionary to collect the players' information\n\n            players_dict = {}\n\n            # Iterating through the players\n\n            for player in players:\n                # Getting player's data\n\n                data = player.get_text()\n\n                # If there is a name in the data, get the information\n\n                if \", \" in data:\n                    name = data.split(\",\", 1)\n\n                    jersey = name[0].split(\" \")[0].strip()\n\n                    last_name = name[0].split(\" \", 1)[1].strip()\n\n                    first_name = re.sub(r\"\\(\\s?(.+)\\)\", \"\", name[1]).strip()\n\n                    full_name = f\"{first_name} {last_name}\"\n\n                    if full_name == \" \":\n                        continue\n\n                    new_values = {\n                        full_name: {\n                            \"player_name\": full_name,\n                            \"jersey\": jersey,\n                            \"shifts\": [],\n                        }\n                    }\n\n                    players_dict.update(new_values)\n\n                # If there is not a name it is likely because these are shift information, not player information\n\n                else:\n                    if full_name == \" \":\n                        continue\n\n                    # Extend the player's shift information with the shift data\n\n                    players_dict[full_name][\"shifts\"].extend([data])\n\n            # Iterating through the player's dictionary,\n            # which has a key of the player's name and an array of shift-arrays\n\n            for player, shifts in players_dict.items():\n                # Getting the number of shifts\n\n                length = int(len(np.array(shifts[\"shifts\"])) / 5)\n\n                # Reshaping the shift data into fields and values\n\n                for number, shift in enumerate(\n                    np.array(shifts[\"shifts\"]).reshape(length, 5)\n                ):\n                    # Adding header values to the shift data\n\n                    headers = [\n                        \"shift_count\",\n                        \"period\",\n                        \"shift_start\",\n                        \"shift_end\",\n                        \"duration\",\n                    ]\n\n                    # Creating a dictionary from the headers and the shift data\n\n                    shift_dict = dict(zip(headers, shift.flatten()))\n\n                    # Adding other data to the shift dictionary\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"team_name\": team_name,\n                        \"team\": team_codes[team_name],\n                        \"team_venue\": team_venue.upper(),\n                        \"player_name\": unidecode(shifts[\"player_name\"]).upper(),\n                        \"team_jersey\": f\"{team_codes[team_name]}{shifts['jersey']}\",\n                        \"jersey\": int(shifts[\"jersey\"]),\n                        \"period\": int(\n                            shift_dict[\"period\"].replace(\"OT\", \"4\").replace(\"SO\", \"5\")\n                        ),\n                        \"shift_count\": int(shift_dict[\"shift_count\"]),\n                        \"shift_start\": unidecode(shift_dict[\"shift_start\"]).strip(),\n                        \"start_time\": unidecode(shift_dict[\"shift_start\"])\n                        .strip()\n                        .split(\"/\", 1)[0]\n                        .strip(),\n                        \"shift_end\": unidecode(shift_dict[\"shift_end\"]).strip(),\n                        \"end_time\": unidecode(shift_dict[\"shift_end\"])\n                        .strip()\n                        .split(\"/\", 1)[0]\n                        .strip(),\n                    }\n\n                    shift_dict.update(new_values)\n\n                    # Appending the shift dictionary to the list of shift dictionaries\n\n                    if shift_dict[\"start_time\"] != \"31:23\":\n                        game_list.append(shift_dict)\n\n        self._shifts = game_list\n\n    def _munge_shifts(self) -&gt; None:\n        \"\"\"Method to munge list of shifts from HTML endpoint. Updates self._shifts\"\"\"\n\n        season = self.season\n        game_session = self.session\n\n        # Iterating through the lists of shifts\n\n        roster = self._html_rosters\n\n        actives = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"ACTIVE\"}\n        scratches = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"SCRATCH\"}\n\n        if self.game_id == 2020020860:\n            new_shifts = {\n                \"DAL29\": 5,\n                \"CHI60\": 4,\n                \"DAL14\": 27,\n                \"DAL21\": 22,\n                \"DAL3\": 28,\n                \"CHI5\": 27,\n                \"CHI88\": 26,\n                \"CHI12\": 26,\n            }\n\n            for new_player, shift_count in new_shifts.items():\n                new_player_info = actives[new_player]\n\n                new_goalies = [\"DAL29\", \"CHI60\"]\n\n                if new_player in new_goalies:\n                    shift_start = \"0:00 / 5:00\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"4:30\"\n                    start_time = \"0:00\"\n                    end_time = \"4:30\"\n\n                new_players = [\"DAL14\", \"DAL21\", \"DAL3\", \"CHI5\"]\n\n                if new_player in new_players:\n                    shift_start = \"3:47 / 1:13\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:43\"\n                    start_time = \"3:47\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI88\":\n                    shift_start = \"3:51 / 1:09\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:39\"\n                    start_time = \"3:51\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI12\":\n                    shift_start = \"4:14 / 0:46\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:16\"\n                    start_time = \"4:14\"\n                    end_time = \"4:30\"\n\n                new_shift = {\n                    \"shift_count\": shift_count,\n                    \"period\": 4,\n                    \"shift_start\": shift_start,\n                    \"shift_end\": shift_end,\n                    \"duration\": duration,\n                    \"season\": 20202021,\n                    \"session\": \"R\",\n                    \"game_id\": self.game_id,\n                    \"team_name\": new_player_info[\"team_name\"],\n                    \"team\": new_player_info[\"team\"],\n                    \"team_venue\": new_player_info[\"team_venue\"],\n                    \"player_name\": new_player_info[\"player_name\"],\n                    \"team_jersey\": new_player_info[\"team_jersey\"],\n                    \"jersey\": new_player_info[\"jersey\"],\n                    \"start_time\": start_time,\n                    \"end_time\": end_time,\n                }\n\n                self._shifts.append(new_shift)\n\n        for shift in self._shifts:\n            # Get active players and store them in a new dictionary with team jersey as key\n            # and other info as a value-dictionary\n\n            shift[\"eh_id\"] = actives.get(\n                shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"])\n            )[\"eh_id\"]\n\n            shift[\"position\"] = actives.get(\n                shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"])\n            )[\"position\"]\n\n            # Replacing some player names\n\n            shift[\"player_name\"] = (\n                shift[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            shift[\"player_name\"] = correct_names_dict.get(\n                shift[\"player_name\"], shift[\"player_name\"]\n            )\n\n            # Adding seconds columns\n\n            cols = [\"start_time\", \"end_time\", \"duration\"]\n\n            for col in cols:\n                time_split = shift[col].split(\":\", 1)\n\n                # Sometimes the shift value can be blank, if it is, we'll skip the field and fix later\n\n                try:\n                    shift[f\"{col}_seconds\"] = 60 * int(time_split[0]) + int(\n                        time_split[1]\n                    )\n\n                except ValueError:\n                    continue\n\n            # Fixing end time if it is blank or empty\n\n            if shift[\"end_time\"] == \" \" or shift[\"end_time\"] == \"\":\n                # Calculating end time based on duration seconds\n\n                shift[\"end_time_seconds\"] = (\n                    shift[\"start_time_seconds\"] + shift[\"duration_seconds\"]\n                )\n\n                # Creating end time based on time delta\n\n                shift[\"end_time\"] = str(\n                    timedelta(seconds=shift[\"end_time_seconds\"])\n                ).split(\":\", 1)[1]\n\n            # If the shift start is after the shift end, we need to fix the error\n\n            if shift[\"start_time_seconds\"] &gt; shift[\"end_time_seconds\"]:\n                # Creating new values based on game session and period\n\n                if shift[\"period\"] &lt; 4:\n                    # Setting the end time\n\n                    shift[\"end_time\"] = \"20:00\"\n\n                    # Setting the end time in seconds\n\n                    shift[\"end_time_seconds\"] = 1200\n\n                    # Setting the shift end\n\n                    shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # Setting duration and duration in seconds\n\n                    shift[\"duration_seconds\"] = (\n                        shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n                    )\n\n                    shift[\"duration\"] = str(\n                        timedelta(seconds=shift[\"duration_seconds\"])\n                    ).split(\":\", 1)[1]\n\n                else:\n                    if game_session == \"P\":\n                        total_seconds = 1200\n\n                    else:\n                        total_seconds = 300\n\n                    # Need to get the end period to get the end time in seconds\n\n                    max_period = max(\n                        [\n                            int(shift[\"period\"])\n                            for shift in self._shifts\n                            if shift[\"period\"] != \" \"\n                        ]\n                    )\n\n                    # Getting the end time in seconds for the final period\n\n                    max_seconds = max(\n                        [\n                            shift[\"end_time_seconds\"]\n                            for shift in self._shifts\n                            if \"end_time_seconds\" in shift.keys()\n                            and shift[\"period\"] == max_period\n                        ]\n                    )\n\n                    shift[\"end_time_seconds\"] = max_seconds\n\n                    # Setting end time\n\n                    end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                    # Setting remainder time\n\n                    remainder = str(\n                        timedelta(seconds=(total_seconds - max_seconds))\n                    ).split(\":\", 1)[1]\n\n                    shift[\"end_time\"] = end_time\n\n                    shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n            # Setting goalie values\n\n            if shift[\"position\"] == \"G\":\n                shift[\"goalie\"] = 1\n\n            else:\n                shift[\"goalie\"] = 0\n\n            # Setting home and away values\n\n            if shift[\"team_venue\"] == \"HOME\":\n                shift[\"is_home\"] = 1\n\n                shift[\"is_away\"] = 0\n\n            else:\n                shift[\"is_home\"] = 0\n\n                shift[\"is_away\"] = 1\n\n        periods = np.unique([x[\"period\"] for x in self._shifts]).tolist()\n\n        # Setting list of teams to iterate through while iterating through the periods\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            # Getting max seconds for the period\n\n            max_seconds = max(\n                [\n                    int(x[\"end_time_seconds\"])\n                    for x in self._shifts\n                    if x[\"period\"] == period\n                ]\n            )\n\n            # Iterating through home and away teams\n\n            for team in teams:\n                # Getting the team's goalies for the game\n\n                team_goalies = [\n                    x\n                    for x in self._shifts\n                    if x[\"goalie\"] == 1 and x[\"team_venue\"] == team\n                ]\n\n                # Getting the goalies for the period\n\n                goalies = [\n                    x\n                    for x in self._shifts\n                    if x[\"goalie\"] == 1\n                    and x[\"team_venue\"] == team\n                    and x[\"period\"] == period\n                ]\n\n                # If there are no goalies changing during the period, we need to add them\n\n                if len(goalies) &lt; 1:\n                    if period == 1:\n                        if len(team_goalies) &lt; 1:\n                            first_goalie = {}\n\n                            starter = [\n                                x\n                                for x in actives.values()\n                                if x[\"position\"] == \"G\"\n                                and x[\"team_venue\"] == team\n                                and x[\"starter\"] == 1\n                            ][0]\n\n                            new_values = {\n                                \"season\": season,\n                                \"session\": game_session,\n                                \"game_id\": self.game_id,\n                                \"period\": period,\n                                \"team_venue\": team,\n                                \"goalie\": 1,\n                                \"shift_count\": 1,\n                            }\n\n                            new_values.update(starter)\n\n                            if team == \"HOME\":\n                                new_values.update({\"is_home\": 1, \"is_away\": 0})\n\n                            else:\n                                new_values.update({\"is_away\": 1, \"is_home\": 0})\n\n                            first_goalie.update(new_values)\n\n                        else:\n                            first_goalie = team_goalies[0]\n\n                        # Initial dictionary is set using data from the first goalie to appear\n\n                        goalie_shift = dict(first_goalie)\n\n                    else:\n                        # Initial dictionary is set using data from the pervious goalie to appear\n\n                        prev_goalie = [\n                            x for x in team_goalies if x[\"period\"] == (period - 1)\n                        ][-1]\n\n                        goalie_shift = dict(prev_goalie)\n\n                    # Setting goalie shift number so we can identify later\n\n                    goalie_shift[\"number\"] = 0\n\n                    # Setting the period for the current period\n\n                    goalie_shift[\"period\"] = period\n\n                    # Setting the start time\n\n                    goalie_shift[\"start_time\"] = \"0:00\"\n\n                    # Setting the start time in seconds\n\n                    goalie_shift[\"start_time_seconds\"] = 0\n\n                    # If during regular time\n\n                    if period &lt; 4:\n                        # Setting shift start value\n\n                        goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                        if max_seconds &lt; 1200:\n                            # Setting end time value\n\n                            goalie_shift[\"end_time\"] = \"20:00\"\n\n                            # Setting end time in seconds\n\n                            goalie_shift[\"end_time_seconds\"] = 1200\n\n                            # Setting the duration, assuming they were out there the whole time\n\n                            goalie_shift[\"duration\"] = \"20:00\"\n\n                            # Setting the duration in seconds, assuming they were out there the whole time\n\n                            goalie_shift[\"duration_seconds\"] = 1200\n\n                            # Setting the shift end value\n\n                            goalie_shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # If the period is greater than 3\n\n                    else:\n                        # Need to account for whether regular season or playoffs\n\n                        if game_session == \"P\":\n                            goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                            total_seconds = 1200\n\n                        else:\n                            goalie_shift[\"shift_start\"] = \"0:00 / 5:00\"\n\n                            total_seconds = 300\n\n                        if max_seconds &lt; total_seconds:\n                            # Getting end time\n\n                            end_time = str(timedelta(seconds=max_seconds)).split(\n                                \":\", 1\n                            )[1]\n\n                            # Getting remainder time\n\n                            remainder = str(\n                                timedelta(seconds=(total_seconds - max_seconds))\n                            ).split(\":\", 1)[1]\n\n                            # Setting values\n\n                            goalie_shift[\"end_time_seconds\"] = max_seconds\n\n                            goalie_shift[\"end_time\"] = end_time\n\n                            goalie_shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                    # Appending the new goalie shift to the game list\n\n                    self._shifts.append(goalie_shift)\n\n            # Iterating through the shifts\n\n            for shift in self._shifts:\n                # Fixing goalie errors\n\n                if (\n                    shift[\"goalie\"] == 1\n                    and shift[\"period\"] == period\n                    and shift[\"shift_end\"] == \"0:00 / 0:00\"\n                ):\n                    if period &lt; 4:\n                        shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                        shift[\"end_time\"] = \"20:00\"\n\n                        shift[\"end_time_seconds\"] = 1200\n\n                    else:\n                        if game_session == \"R\":\n                            total_seconds = 300\n\n                        else:\n                            total_seconds = 1200\n\n                        end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                        remainder = str(\n                            timedelta(seconds=(total_seconds - max_seconds))\n                        ).split(\":\", 1)[1]\n\n                        shift[\"end_time_seconds\"] = max_seconds\n\n                        shift[\"end_time\"] = end_time\n\n                        shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n        self._shifts = [\n            PlayerShift.model_validate(shift).model_dump() for shift in self._shifts\n        ]\n\n    @property\n    def shifts(self) -&gt; list:\n        \"\"\"List of shifts scraped from HTML endpoint. Returns a dictionary of player - shifts with the below keys\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).shifts_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.shifts\n\n        \"\"\"\n\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        if self._shifts is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return self._shifts\n\n    @property\n    def shifts_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.shifts_df\n\n        \"\"\"\n\n        if self._shifts is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return pd.DataFrame(self._shifts).fillna(np.nan)\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.play_by_play","title":"play_by_play  <code>property</code>","text":"<pre><code>play_by_play\n</code></pre> <p>List of events in play-by-play. Each event is a dictionary with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).play_by_play_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 667</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5vE</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., CHI</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>danger</code> <code>int</code> <p>Whether shot event occurred from danger area, e.g., 0</p> <code>high_danger</code> <code>int</code> <p>Whether shot event occurred from high-danger area, e.g., 0</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_eh_id_api</code> <code>str</code> <p>Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None</p> <code>player_2_api_id</code> <code>int | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None</p> <code>player_3_api_id</code> <code>int | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>score_state</code> <code>str</code> <p>Score of the game from event team's perspective, e.g., 4v2</p> <code>score_diff</code> <code>int</code> <p>Score differential from event team's perspective, e.g., 2</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>event_length</code> <code>int</code> <p>Time elapsed since previous event, e.g., 5</p> <code>event_distance</code> <code>float | None</code> <p>Calculated distance of event from goal, e.g, 185.32673849177834</p> <code>pbp_distance</code> <code>int</code> <p>Distance of event from goal from description, e.g., 185</p> <code>event_angle</code> <code>float | None</code> <p>Angle of event towards goal, e.g., 57.52880770915151</p> <code>penalty</code> <code>str | None</code> <p>Name of penalty, e.g., None</p> <code>penalty_length</code> <code>int | None</code> <p>Duration of penalty, e.g., None</p> <code>home_score</code> <code>int</code> <p>Home team's score, e.g., 2</p> <code>home_score_diff</code> <code>int</code> <p>Home team's score differential, e.g., -2</p> <code>away_score</code> <code>int</code> <p>Away team's score, e.g., 4</p> <code>away_score_diff</code> <code>int</code> <p>Away team's score differential, e.g., 2</p> <code>is_home</code> <code>int</code> <p>Whether event team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether event is away, e.g., 1</p> <code>home_team</code> <code>str</code> <p>Home team, e.g., CHI</p> <code>away_team</code> <code>str</code> <p>Away team, e.g., NSH</p> <code>home_skaters</code> <code>int</code> <p>Number of home team skaters on-ice (excl. goalies), e.g., 6</p> <code>away_skaters</code> <code>int</code> <p>Number of away team skaters on-ice (excl. goalies), e.g., 5</p> <code>home_on</code> <code>list | str | None</code> <p>Name of home team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>home_on_positions</code> <code>list | str | None</code> <p>Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>away_on</code> <code>list | str | None</code> <p>Name of away team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>away_on_positions</code> <code>list | str | None</code> <p>Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>event_team_skaters</code> <code>int | None</code> <p>Number of event team skaters on-ice (excl. goalies), e.g., 5</p> <code>teammates</code> <code>list | str | None</code> <p>Name of event team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>teammates_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>teammates_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of event team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>teammates_positions</code> <code>list | str | None</code> <p>Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>own_goalie</code> <code>list | str | None</code> <p>Name of the event team's goalie, e.g., PEKKA RINNE</p> <code>own_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE</p> <code>own_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the event team's goalie, e.g., 8471469</p> <code>forwards</code> <code>list | str | None</code> <p>Name of event team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>defense</code> <code>list | str | None</code> <p>Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600</p> <code>opp_strength_state</code> <code>str | None</code> <p>Strength state from opposing team's perspective, e.g., Ev5</p> <code>opp_score_state</code> <code>str | None</code> <p>Score state from opposing team's perspective, e.g., 2v4</p> <code>opp_score_diff</code> <code>int | None</code> <p>Score differential from opposing team's perspective, e.g., -2</p> <code>opp_team_skaters</code> <code>int | None</code> <p>Number of opposing team skaters on-ice (excl. goalies), e.g., 6</p> <code>opp_team_on</code> <code>list | str | None</code> <p>Name of opposing team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_team_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_team_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>opp_team_on_positions</code> <code>list | str | None</code> <p>Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>opp_goalie</code> <code>list | str | None</code> <p>Name of the opposing team's goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the opposing team's goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the opposing team's goalie, e.g., None</p> <code>opp_forwards</code> <code>list | str | None</code> <p>Name of opposing team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>opp_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>opp_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>opp_defense</code> <code>list | str | None</code> <p>Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_forwards</code> <code>list | str | None</code> <p>Name of home team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>home_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>home_forwards_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of home team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>home_defense</code> <code>list | str | None</code> <p>Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_goalie</code> <code>list | str | None</code> <p>Name of the home team's goalie, e.g., None</p> <code>home_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the home team's goalie, e.g., None</p> <code>home_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the home team's goalie, e.g., None</p> <code>away_forwards</code> <code>list | str | None</code> <p>Name of away team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>away_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>away_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>away_defense</code> <code>list | str | None</code> <p>Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600</p> <code>away_goalie</code> <code>list | str | None</code> <p>Name of the away team's goalie, e.g., PEKKA RINNE</p> <code>away_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE</p> <code>away_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the away team's goalie, e.g., 8471469</p> <code>change_on_count</code> <code>int | None</code> <p>Number of players on, e.g., None</p> <code>change_off_count</code> <code>int | None</code> <p>Number of players off, e.g., None</p> <code>change_on</code> <code>list | str | None</code> <p>Names of the players on, e.g., None</p> <code>change_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players on, e.g., None</p> <code>change_on_positions</code> <code>list | str | None</code> <p>Postions of the players on, e.g., None</p> <code>change_off</code> <code>list | str | None</code> <p>Names of the players off, e.g., None</p> <code>change_off_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players off, e.g., None</p> <code>change_off_positions</code> <code>list | str | None</code> <p>Positions of the players off, e.g., None</p> <code>change_on_forwards_count</code> <code>int | None</code> <p>Number of forwards changing on, e.g., None</p> <code>change_off_forwards_count</code> <code>int | None</code> <p>Number of forwards off, e.g., None</p> <code>change_on_forwards</code> <code>list | str | None</code> <p>Names of the forwards on, e.g., None</p> <code>change_on_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards on, e.g., None</p> <code>change_off_forwards</code> <code>list | str | None</code> <p>Names of the forwards off, e.g., None</p> <code>change_off_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards off, e.g., None</p> <code>change_on_defense_count</code> <code>int | None</code> <p>Number of defense on, e.g., None</p> <code>change_off_defense_count</code> <code>int | None</code> <p>Number of defense off, e.g., None</p> <code>change_on_defense</code> <code>list | str | None</code> <p>Names of the defense on, e.g., None</p> <code>change_on_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense on, e.g., None</p> <code>change_off_defense</code> <code>list | str | None</code> <p>Names of the defense off, e.g., None</p> <code>change_off_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense off, e.g., None</p> <code>change_on_goalie_count</code> <code>int | None</code> <p>Number of goalies on, e.g., None</p> <code>change_off_goalie_count</code> <code>int | None</code> <p>Number of goalies off, e.g., None</p> <code>change_on_goalie</code> <code>list | str | None</code> <p>Name of goalie on, e.g., None</p> <code>change_on_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie on, e.g., None</p> <code>change_off_goalie</code> <code>list | str | None</code> <p>Name of the goalie off, e.g., None</p> <code>change_off_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie off, e.g., None</p> <code>goal</code> <code>int</code> <p>Dummy indicator whether event is a goal, e.g., 1</p> <code>shot</code> <code>int</code> <p>Dummy indicator whether event is a shot, e.g., 1</p> <code>miss</code> <code>int</code> <p>Dummy indicator whether event is a miss, e.g., 0</p> <code>fenwick</code> <code>int</code> <p>Dummy indicator whether event is a fenwick event, e.g., 1</p> <code>corsi</code> <code>int</code> <p>Dummy indicator whether event is a corsi event, e.g., 1</p> <code>block</code> <code>int</code> <p>Dummy indicator whether event is a block, e.g., 0</p> <code>hit</code> <code>int</code> <p>Dummy indicator whether event is a hit, e.g., 0</p> <code>give</code> <code>int</code> <p>Dummy indicator whether event is a give, e.g., 0</p> <code>take</code> <code>int</code> <p>Dummy indicator whether event is a take, e.g., 0</p> <code>fac</code> <code>int</code> <p>Dummy indicator whether event is a faceoff, e.g., 0</p> <code>penl</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>change</code> <code>int</code> <p>Dummy indicator whether event is a change, e.g., 0</p> <code>stop</code> <code>int</code> <p>Dummy indicator whether event is a stop, e.g., 0</p> <code>chl</code> <code>int</code> <p>Dummy indicator whether event is a challenge, e.g., 0</p> <code>ozf</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone faceoff, e.g., 0</p> <code>nzf</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone faceoff, e.g., 0</p> <code>dzf</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone faceoff, e.g., 0</p> <code>ozc</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone change, e.g., 0</p> <code>nzc</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone change, e.g., 0</p> <code>dzc</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone change, e.g., 0</p> <code>otf</code> <code>int</code> <p>Dummy indicator whether event is an on-the-fly change, e.g., 0</p> <code>pen0</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>pen2</code> <code>int</code> <p>Dummy indicator whether event is a minor penalty, e.g., 0</p> <code>pen4</code> <code>int</code> <p>Dummy indicator whether event is a double minor penalty, e.g., 0</p> <code>pen5</code> <code>int</code> <p>Dummy indicator whether event is a major penalty, e.g., 0</p> <code>pen10</code> <code>int</code> <p>Dummy indicator whether event is a game misconduct penalty, e.g., 0</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.play_by_play\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.rosters","title":"rosters  <code>property</code>","text":"<pre><code>rosters\n</code></pre> <p>List of players scraped from API &amp; HTML endpoints. Returns a dictionary of players with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).rosters_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>api_id</code> <code>int | None</code> <p>Player's NHL API ID, e.g., 8476887</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <code>headshot_url</code> <code>str | None</code> <p>URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.changes","title":"changes  <code>property</code>","text":"<pre><code>changes\n</code></pre> <p>List of changes scraped from API endpoint. Each change is a dictionary with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).changes_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., CHANGE</p> <code>event_type</code> <code>str</code> <p>Type of change that occurred, e.g., AWAY CHANGE</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>change_on_count</code> <code>int</code> <p>Number of players on, e.g., 4</p> <code>change_off_count</code> <code>int</code> <p>Number of players off, e.g., 4</p> <code>change_on</code> <code>str</code> <p>Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95</p> <code>change_on_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players on, e.g., MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_on_positions</code> <code>str</code> <p>Positions of the players on, e.g., D, C, C, C</p> <code>change_off</code> <code>str</code> <p>Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92</p> <code>change_off_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players off, e.g., YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_off_positions</code> <code>str</code> <p>Positions of the players off, e.g., D, L, L, C</p> <code>change_on_forwards_count</code> <code>int</code> <p>Number of forwards on, e.g.,</p> <code>change_off_forwards_count</code> <code>int</code> <p>Number of forwards off, e.g., 3</p> <code>change_on_forwards</code> <code>str</code> <p>Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95</p> <code>change_on_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards on, e.g., CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_off_forwards</code> <code>str</code> <p>Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92</p> <code>change_off_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards off, e.g., FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_on_defense_count</code> <code>int</code> <p>Number of defense on, e.g., 1</p> <code>change_off_defense_count</code> <code>int</code> <p>Number of defense off, e.g., 1</p> <code>change_on_defense</code> <code>str</code> <p>Names of defense on, e.g., MATTIAS EKHOLM</p> <code>change_on_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense on, e.g., NSH14</p> <code>change_on_defense_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM</p> <code>change_off_defense</code> <code>str</code> <p>Names of defense off, e.g., YANNICK WEBER</p> <code>change_off_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense off, e.g., NSH7</p> <code>change_off_defebse_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER</p> <code>change_on_goalie_count</code> <code>int</code> <p>Number of goalies on, e.g., 0</p> <code>change_off_goalie_count</code> <code>int</code> <p>Number of goalies off, e.g., 0</p> <code>change_on_goalies</code> <code>str</code> <p>Names of goalies on, e.g., None</p> <code>change_on_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies on, e.g., None</p> <code>change_on_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies on, e.g., None</p> <code>change_off_goalies</code> <code>str</code> <p>Names of goalies off, e.g., None</p> <code>change_off_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies off, e.g., None</p> <code>change_off_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies off, e.g., None</p> <code>is_home</code> <code>int</code> <p>Dummy indicator whether change team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Dummy indicator whether change team is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.changes\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.shifts","title":"shifts  <code>property</code>","text":"<pre><code>shifts\n</code></pre> <p>List of shifts scraped from HTML endpoint. Returns a dictionary of player - shifts with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).shifts_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>shift_count</code> <code>int</code> <p>Shift number for that player, e.g., 1</p> <code>period</code> <code>int</code> <p>Period number for the shift, e.g., 1</p> <code>start_time</code> <code>str</code> <p>Time shift started, e.g., 0:00</p> <code>end_time</code> <code>str</code> <p>Time shift ended, e.g., 0:18</p> <code>duration</code> <code>str</code> <p>Length of shift, e.g, 00:18</p> <code>start_time_seconds</code> <code>int</code> <p>Time shift started in seconds, e.g., 0</p> <code>end_time_seconds</code> <code>int</code> <p>Time shift ended in seconds, e.g., 18</p> <code>duration_seconds</code> <code>int</code> <p>Length of shift in seconds, e.g., 18</p> <code>shift_start</code> <code>str</code> <p>Time the shift started as the original string, e.g., 0:00 / 20:00</p> <code>shift_end</code> <code>str</code> <p>Time the shift ended as the original string, e.g., 0:18 / 19:42</p> <code>goalie</code> <code>int</code> <p>Whether player is a goalie, e.g., 0</p> <code>is_home</code> <code>int</code> <p>Whether player is home e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether player is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether player is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.shifts\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.api_events","title":"api_events  <code>property</code>","text":"<pre><code>api_events\n</code></pre> <p>List of events scraped from API endpoint. Each event is a dictionary with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).api_events_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 689</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>event_code</code> <code>str</code> <p>Code to indicate type of event that occured, e.g., 505</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., None</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., D</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_team_jersey</code> <code>str</code> <p>Combination of team and jersey used for player identification purposes, e.g, NSH35</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_2_api_id</code> <code>str | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3_api_id</code> <code>str | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>strength</code> <code>int</code> <p>Code to indication strength state, e.g., 1560</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>miss_reason</code> <code>str | None</code> <p>Reason shot missed, e.g., None</p> <code>opp_goalie</code> <code>str | None</code> <p>Opposing goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for opposing goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>str | None</code> <p>NHL API ID for opposing goalie, e.g., None</p> <code>opp_goalie_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>event_team_id</code> <code>int</code> <p>NHL ID for the event team, e.g., 18</p> <code>stoppage_reason</code> <code>str | None</code> <p>Reason the play was stopped, e.g., None</p> <code>stoppage_reason_secondary</code> <code>str | None</code> <p>Secondary reason play was stopped, e.g., None</p> <code>penalty_type</code> <code>str | None</code> <p>Type of penalty taken, e.g., None</p> <code>penalty_reason</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>penalty_duration</code> <code>int | None</code> <p>Duration of the penalty, e.g., None</p> <code>home_team_defending_side</code> <code>str</code> <p>Side of the ice the home team is defending, e.g., right</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.api_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.api_rosters","title":"api_rosters  <code>property</code>","text":"<pre><code>api_rosters\n</code></pre> <p>List of players scraped from API endpoint. Returns a dictionary of players with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).api_rosters_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>first_name</code> <code>str</code> <p>Player's first name, e.g., FILIP</p> <code>last_name</code> <code>str</code> <p>Player's last name, e.g., FORSBERG</p> <code>headshot_url</code> <code>str</code> <p>URL to retreive player's headshot</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.api_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.html_events","title":"html_events  <code>property</code>","text":"<pre><code>html_events\n</code></pre> <p>List of events scraped from HTML endpoint. Each event is a dictionary with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).html_events_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 331</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_time</code> <code>str</code> <p>Time elapsed in the period, e.g., 19:38</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>penalty_length</code> <code>str | None</code> <p>Duration of the penalty, e.g., None</p> <code>penalty</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>strength</code> <code>str | None</code> <p>Code to indication strength state, e.g., EV</p> <code>away_skaters</code> <code>str</code> <p>Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G</p> <code>home_skaters</code> <code>str</code> <p>Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.html_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.html_rosters","title":"html_rosters  <code>property</code>","text":"<pre><code>html_rosters\n</code></pre> <p>List of players scraped from HTML endpoint. Returns a dictionary of players with the below keys</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).html_rosters_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <p>Examples:</p> <p>First instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.html_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Season","title":"Season","text":"<p>Class instance for scraping schedule and standings data. Helpful for pulling game IDs and scraping programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int or float or str</code> <p>4-digit year identifier, the first year in the season, e.g., 2023</p> required <p>Attributes:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit year identifier, the year entered, plus 1, e.g., 20232024</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Scrape schedule information</p> <pre><code>&gt;&gt;&gt; nsh_schedule = season.schedule('NSH') # Returns the schedule for the Nashville Predators\n</code></pre> <p>Scrape standings information</p> <pre><code>&gt;&gt;&gt; standings = season.standings # Returns the latest standings for that season\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Season:\n    \"\"\"\n    Class instance for scraping schedule and standings data. Helpful for pulling game IDs and\n    scraping programmatically.\n\n    Parameters:\n        year (int or float or str):\n            4-digit year identifier, the first year in the season, e.g., 2023\n\n    Attributes:\n        season (int):\n            8-digit year identifier, the year entered, plus 1, e.g., 20232024\n\n\n    Examples:\n        &gt;&gt;&gt; season = Season(2023)\n\n        Scrape schedule information\n        &gt;&gt;&gt; nsh_schedule = season.schedule('NSH') # Returns the schedule for the Nashville Predators\n\n        Scrape standings information\n        &gt;&gt;&gt; standings = season.standings # Returns the latest standings for that season\n\n    \"\"\"\n\n    def __init__(self, year: str | int | float):\n        if len(str(year)) == 8:\n            self.season = int(year)\n\n        elif len(str(year)) == 4:\n            self.season = int(f\"{year}{int(year) + 1}\")\n\n        first_year = int(str(self.season)[0:4])\n\n        teams_1917 = [\"MTL\", \"MWN\", \"SEN\", \"TAN\"]\n\n        teams_1918 = [\"MTL\", \"SEN\", \"TAN\"]\n\n        teams_1919 = [\"MTL\", \"QBD\", \"SEN\", \"TSP\"]\n\n        teams_1920 = [\"HAM\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1924 = [\"BOS\", \"HAM\", \"MMR\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1925 = [\"BOS\", \"MMR\", \"MTL\", \"NYA\", \"PIR\", \"SEN\", \"TSP\"]\n\n        teams_1926 = [\n            \"BOS\",\n            \"CHI\",\n            \"DCG\",\n            \"MMR\",\n            \"MTL\",\n            \"NYA\",\n            \"NYR\",\n            \"PIR\",\n            \"SEN\",\n            \"TSP\",\n        ]\n\n        teams_1927 = [\n            \"BOS\",\n            \"CHI\",\n            \"DCG\",\n            \"MMR\",\n            \"MTL\",\n            \"NYA\",\n            \"NYR\",\n            \"PIR\",\n            \"SEN\",\n            \"TOR\",\n        ]\n\n        teams_1930 = [\n            \"BOS\",\n            \"CHI\",\n            \"DFL\",\n            \"MMR\",\n            \"MTL\",\n            \"NYA\",\n            \"NYR\",\n            \"QUA\",\n            \"SEN\",\n            \"TOR\",\n        ]\n\n        teams_1931 = [\"BOS\", \"CHI\", \"DFL\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1932 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SEN\", \"TOR\"]\n\n        teams_1934 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SLE\", \"TOR\"]\n\n        teams_1935 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1938 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1941 = [\"BOS\", \"BRK\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1942 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1967 = [\n            \"BOS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYR\",\n            \"OAK\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n        ]\n\n        teams_1970 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n        ]\n\n        teams_1972 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n        ]\n\n        teams_1974 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"KCS\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1976 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLE\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1978 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1979 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1980 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1982 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1991 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1992 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1993 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1995 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1996 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1997 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1998 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1999 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2000 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2011 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2014 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2017 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2021 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SEA\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        self._teams_dict = {\n            1917: teams_1917,\n            1918: teams_1918,\n            1919: teams_1919,\n            1920: teams_1920,\n            1921: teams_1920,\n            1922: teams_1920,\n            1923: teams_1920,\n            1924: teams_1924,\n            1925: teams_1925,\n            1926: teams_1926,\n            1927: teams_1927,\n            1928: teams_1927,\n            1929: teams_1927,\n            1930: teams_1930,\n            1931: teams_1931,\n            1932: teams_1932,\n            1933: teams_1932,\n            1934: teams_1934,\n            1935: teams_1935,\n            1936: teams_1935,\n            1937: teams_1935,\n            1938: teams_1938,\n            1939: teams_1938,\n            1940: teams_1938,\n            1941: teams_1941,\n            1942: teams_1942,\n            1943: teams_1942,\n            1944: teams_1942,\n            1945: teams_1942,\n            1946: teams_1942,\n            1947: teams_1942,\n            1948: teams_1942,\n            1949: teams_1942,\n            1950: teams_1942,\n            1951: teams_1942,\n            1952: teams_1942,\n            1953: teams_1942,\n            1954: teams_1942,\n            1955: teams_1942,\n            1956: teams_1942,\n            1957: teams_1942,\n            1958: teams_1942,\n            1959: teams_1942,\n            1960: teams_1942,\n            1961: teams_1942,\n            1962: teams_1942,\n            1963: teams_1942,\n            1964: teams_1942,\n            1965: teams_1942,\n            1966: teams_1942,\n            1967: teams_1967,\n            1968: teams_1967,\n            1969: teams_1967,\n            1970: teams_1970,\n            1971: teams_1970,\n            1972: teams_1972,\n            1973: teams_1972,\n            1974: teams_1974,\n            1975: teams_1974,\n            1976: teams_1976,\n            1977: teams_1976,\n            1978: teams_1978,\n            1979: teams_1979,\n            1980: teams_1980,\n            1981: teams_1980,\n            1982: teams_1982,\n            1983: teams_1982,\n            1984: teams_1982,\n            1985: teams_1982,\n            1986: teams_1982,\n            1987: teams_1982,\n            1988: teams_1982,\n            1989: teams_1982,\n            1990: teams_1982,\n            1991: teams_1991,\n            1992: teams_1992,\n            1993: teams_1993,\n            1994: teams_1993,\n            1995: teams_1995,\n            1996: teams_1996,\n            1997: teams_1997,\n            1998: teams_1998,\n            1999: teams_1999,\n            2000: teams_2000,\n            2001: teams_2000,\n            2002: teams_2000,\n            2003: teams_2000,\n            2004: teams_2000,\n            2005: teams_2000,\n            2006: teams_2000,\n            2007: teams_2000,\n            2008: teams_2000,\n            2009: teams_2000,\n            2010: teams_2000,\n            2011: teams_2011,\n            2012: teams_2011,\n            2013: teams_2011,\n            2014: teams_2014,\n            2015: teams_2014,\n            2016: teams_2014,\n            2017: teams_2017,\n            2018: teams_2017,\n            2019: teams_2017,\n            2020: teams_2017,\n            2021: teams_2021,\n            2022: teams_2021,\n            2023: teams_2021,\n        }\n\n        self.teams = self._teams_dict.get(first_year)\n\n        if self._teams_dict.get(first_year) is None:\n            raise Exception(f\"{first_year} IS NOT SUPPORTED\")\n\n        self._scraped_schedule_teams = []\n\n        self._scraped_schedule = []\n\n        self._standings = []\n\n        self._requests_session = s_session()\n\n        self._season_str = str(self.season)[:4] + \"-\" + str(self.season)[6:8]\n\n    def _scrape_schedule(\n        self, team_schedule: str = \"all\", sessions: list | None | str | int = None\n    ) -&gt; None:\n        \"\"\"Method to scrape the schedule from NHL API endpoint\"\"\"\n        schedule_list = []\n\n        if team_schedule not in self._scraped_schedule_teams:\n            with self._requests_session as s:\n                with Progress(\n                    TextColumn(\"[progress.description]{task.description}\"),\n                    SpinnerColumn(),\n                    BarColumn(),\n                    TaskProgressColumn(),\n                    TextColumn(\"\u2022\"),\n                    TimeElapsedColumn(),\n                    TextColumn(\"\u2022\"),\n                    TimeRemainingColumn(),\n                    TextColumn(\"\u2022\"),\n                    ScrapeSpeedColumn(),\n                ) as progress:\n                    if team_schedule == \"all\":\n                        teams = self.teams\n\n                        pbar_stub = f\"{self._season_str} schedule information\"\n\n                        pbar_message = f\"Downloading {pbar_stub} for all teams...\"\n\n                        sched_task = progress.add_task(pbar_message, total=len(teams))\n\n                        for team in teams:\n                            if team in self._scraped_schedule_teams:\n                                if team != teams[-1]:\n                                    pbar_message = (\n                                        f\"Downloading {pbar_stub} for {team}...\"\n                                    )\n                                else:\n                                    pbar_message = f\"Finished downloading {pbar_stub}\"\n                                progress.update(\n                                    sched_task,\n                                    description=pbar_message,\n                                    advance=1,\n                                    refresh=True,\n                                )\n\n                                continue\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team}/{self.season}\"\n\n                            response = s.get(url).json()\n\n                            if response[\"games\"]:\n                                games = [\n                                    x\n                                    for x in response[\"games\"]\n                                    if x[\"id\"] not in self._scraped_schedule\n                                ]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule_teams.append(team)\n                                self._scraped_schedule.extend(\n                                    x[\"game_id\"] for x in games\n                                )\n\n                            if team != teams[-1]:\n                                pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                            else:\n                                pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(\n                                sched_task,\n                                description=pbar_message,\n                                advance=1,\n                                refresh=True,\n                            )\n                    else:\n                        if team_schedule not in self._scraped_schedule_teams:\n                            pbar_stub = f\"{self._season_str} schedule information for {team_schedule}\"\n                            pbar_message = f\"Downloading {pbar_stub}...\"\n                            sched_task = progress.add_task(pbar_message, total=1)\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team_schedule}/{self.season}\"\n                            response = s.get(url).json()\n\n                            if response[\"games\"]:\n                                games = [\n                                    x\n                                    for x in response[\"games\"]\n                                    if x[\"id\"] not in self._scraped_schedule\n                                ]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule.extend(\n                                    x[\"game_id\"] for x in games\n                                )\n                                self._scraped_schedule_teams.append(team_schedule)\n\n                            pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(\n                                sched_task,\n                                description=pbar_message,\n                                advance=1,\n                                refresh=True,\n                            )\n\n        schedule_list = sorted(\n            schedule_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"])\n        )\n\n        self._schedule = schedule_list\n\n    @staticmethod\n    def _munge_schedule(\n        games: list[dict], sessions: list | None | str | int\n    ) -&gt; list[dict]:\n        \"\"\"Method to munge the schedule from NHL API endpoint\"\"\"\n        returned_games = []\n\n        for game in games:\n            if sessions is None:\n                if game[\"gameType\"] not in [2, 3]:\n                    continue\n\n            elif isinstance(sessions, list):\n                if game[\"gameType\"] not in sessions:\n                    continue\n\n            else:\n                if int(game[\"gameType\"]) == sessions:\n                    continue\n\n            local_time = pytz.timezone(game[\"venueTimezone\"])\n\n            if \"Z\" in game[\"startTimeUTC\"]:\n                game[\"startTimeUTC\"] = game[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n            start_time_utc_dt: dt = dt.fromisoformat(game[\"startTimeUTC\"])\n            game_date_dt: dt = start_time_utc_dt.astimezone(local_time)\n\n            start_time = game_date_dt.strftime(\"%H:%M\")\n            game_date = game_date_dt.strftime(\"%Y-%m-%d\")\n\n            game_info = {\n                \"season\": game[\"season\"],\n                \"session\": game[\"gameType\"],\n                \"game_id\": game[\"id\"],\n                \"game_date\": game_date,\n                \"start_time\": start_time,\n                \"game_state\": game[\"gameState\"],\n                \"home_team\": game[\"homeTeam\"][\"abbrev\"],\n                \"home_team_id\": game[\"homeTeam\"][\"id\"],\n                \"home_score\": game[\"homeTeam\"].get(\"score\", 0),\n                \"away_team\": game[\"awayTeam\"][\"abbrev\"],\n                \"away_team_id\": game[\"awayTeam\"][\"id\"],\n                \"away_score\": game[\"awayTeam\"].get(\"score\", 0),\n                \"venue\": game[\"venue\"][\"default\"].upper(),\n                \"venue_timezone\": game[\"venueTimezone\"],\n                \"neutral_site\": int(game[\"neutralSite\"]),\n                \"game_date_dt\": game_date_dt,\n                \"tv_broadcasts\": game[\"tvBroadcasts\"],\n                \"home_logo\": game[\"homeTeam\"].get(\"logo\"),\n                \"home_logo_dark\": game[\"homeTeam\"].get(\"darkLogo\"),\n                \"away_logo\": game[\"awayTeam\"].get(\"logo\"),\n                \"away_logo_dark\": game[\"awayTeam\"].get(\"darkLogo\"),\n            }\n\n            returned_games.append(ScheduleGame.model_validate(game_info).model_dump())\n\n        return returned_games\n\n    @staticmethod\n    def _finalize_schedule(games: list[dict]) -&gt; pd.DataFrame:\n        \"\"\"Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame\"\"\"\n        df = pd.DataFrame(games)\n\n        return df\n\n    def schedule(\n        self,\n        team_schedule: str | None = \"all\",\n        sessions: list | None | str | int = None,\n    ) -&gt; pd.DataFrame:\n        \"\"\"Pandas DataFrame of the schedule from the NHL API. Returns either the whole schedule or a subset of teams'\n\n        Parameters:\n            team_schedule (str | None):\n                Three-letter team's schedule to scrape, e.g., NSH\n            sessions: (list | None | str | int, default=None):\n                Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank,\n                scrapes regular season and playoffs\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            session (int):\n                Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020015\n            start_time (str):\n                Start time for the game in the home time zone, in military time, e.g., 19:00\n            game_state (str):\n                Status of the game, whether official or future, e.g., OFF\n            home_team (str):\n                Three-letter code for the home team, e.g., NSH\n            home_team_id (int):\n                Two-digit code assigned to the home franchise by the NHL, e.g., 18\n            home_score (int):\n                Number of goals scored by the home team, e.g., 3\n            away_team (str):\n                Three-letter code for the away team, e.g., SEA\n            away_team_id (int):\n                Two-digit code assigned to the away franchise by the NHL, e.g., 55\n            away_score (int):\n                Number of goals scored by the away team, e.g., 0\n            venue (str):\n                Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA\n            venue_timezone (str):\n                Name of the venue timezone, e.g., US/Central\n            neutral_site (int):\n                Whether game is / was played at a neutral site location, e.g., 0\n            game_date_dt (dt.datetime):\n                Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00\n            tv_broadcasts (list):\n                Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A',\n                'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H',\n                'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]\n            home_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            home_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg\n            away_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg\n            away_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg\n\n        Examples:\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; schedule = season.schedule()\n\n            Get schedule for a single team\n            &gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n\n        \"\"\"\n        if team_schedule not in self._scraped_schedule_teams:\n            self._scrape_schedule(team_schedule=team_schedule, sessions=sessions)\n\n        if team_schedule != \"all\":\n            return_list = [\n                x\n                for x in self._schedule\n                if x[\"home_team\"] == team_schedule or x[\"away_team\"] == team_schedule\n            ]\n\n            return_list = sorted(\n                return_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"])\n            )\n\n            return self._finalize_schedule(return_list)\n\n        else:\n            return self._finalize_schedule(self._schedule)\n\n    def _scrape_standings(self):\n        \"\"\"Scrape standings from NHL API endpoint\"\"\"\n\n        url = \"https://api-web.nhle.com/v1/standings/now\"\n\n        with self._requests_session as s:\n            r = s.get(url).json()\n\n        self._standings = r[\"standings\"]\n\n    def _munge_standings(self):\n        \"\"\"Function to munge standings from NHL API endpoint\"\"\"\n\n        final_standings = []\n\n        for team in self._standings:\n            team_data = {\n                \"conference\": team[\"conferenceName\"],\n                \"date\": team[\"date\"],\n                \"division\": team[\"divisionName\"],\n                \"games_played\": team[\"gamesPlayed\"],\n                \"goal_differential\": team[\"goalDifferential\"],\n                \"goal_differential_pct\": team[\"goalDifferentialPctg\"],\n                \"goals_against\": team[\"goalAgainst\"],\n                \"goals_for\": team[\"goalFor\"],\n                \"goals_for_pct\": team[\"goalsForPctg\"],\n                \"home_games_played\": team[\"homeGamesPlayed\"],\n                \"home_goal_differential\": team[\"homeGoalDifferential\"],\n                \"home_goals_against\": team[\"homeGoalsAgainst\"],\n                \"home_goals_for\": team[\"homeGoalsFor\"],\n                \"home_losses\": team[\"homeLosses\"],\n                \"home_ot_losses\": team[\"homeOtLosses\"],\n                \"home_points\": team[\"homePoints\"],\n                \"home_wins\": team[\"homeWins\"],\n                \"home_regulation_wins\": team[\"homeRegulationWins\"],\n                \"home_ties\": team[\"homeTies\"],\n                \"l10_goal_differential\": team[\"l10GoalDifferential\"],\n                \"l10_goals_against\": team[\"l10GoalsAgainst\"],\n                \"l10_goals_for\": team[\"l10GoalsFor\"],\n                \"l10_losses\": team[\"l10Losses\"],\n                \"l10_ot_losses\": team[\"l10OtLosses\"],\n                \"l10_points\": team[\"l10Points\"],\n                \"l10_regulation_wins\": team[\"l10RegulationWins\"],\n                \"l10_ties\": team[\"l10Ties\"],\n                \"l10_wins\": team[\"l10Wins\"],\n                \"losses\": team[\"losses\"],\n                \"ot_losses\": team[\"otLosses\"],\n                \"points_pct\": team[\"pointPctg\"],\n                \"points\": team[\"points\"],\n                \"regulation_win_pct\": team[\"regulationWinPctg\"],\n                \"regulation_wins\": team[\"regulationWins\"],\n                \"road_games_played\": team[\"roadGamesPlayed\"],\n                \"road_goal_differential\": team[\"roadGoalDifferential\"],\n                \"road_goals_against\": team[\"roadGoalsAgainst\"],\n                \"road_goals_for\": team[\"roadGoalsFor\"],\n                \"road_losses\": team[\"roadLosses\"],\n                \"road_ot_losses\": team[\"roadOtLosses\"],\n                \"road_points\": team[\"roadPoints\"],\n                \"road_regulation_wins\": team[\"roadRegulationWins\"],\n                \"road_ties\": team[\"roadTies\"],\n                \"road_wins\": team[\"roadWins\"],\n                \"season\": team[\"seasonId\"],\n                \"shootoutLosses\": team[\"shootoutLosses\"],\n                \"shootout_wins\": team[\"shootoutWins\"],\n                \"streak_code\": team[\"streakCode\"],\n                \"streak_count\": team[\"streakCount\"],\n                \"team_name\": team[\"teamName\"][\"default\"],\n                \"team\": team[\"teamAbbrev\"][\"default\"],\n                \"team_logo\": team[\"teamLogo\"],\n                \"ties\": team[\"ties\"],\n                \"waivers_sequence\": team[\"waiversSequence\"],\n                \"wildcard_sequence\": team[\"wildcardSequence\"],\n                \"win_pct\": team[\"winPctg\"],\n                \"wins\": team[\"wins\"],\n            }\n\n            final_standings.append(StandingsTeam.model_validate(team_data).model_dump())\n\n        self._standings = final_standings\n\n    def _finalize_standings(self):\n        df = pd.DataFrame(self._standings).fillna(np.nan)\n\n        return df\n\n    @property\n    def standings(self):\n        \"\"\"Pandas DataFrame of the standings from the NHL API\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            date (str):\n                Date standings scraped, e.g., 2024-04-08\n            team (str):\n                Three-letter team code, e.g., NSH\n            team_name (str):\n                Full team name, e.g., Nashville Predators\n            conference (str):\n                Name of the conference in which the team plays, e.g., Western\n            division (str):\n                Name of the division in which the team plays, e.g., Central\n            games_played (int):\n                Number of games played, e.g., 78\n            points (int):\n                Number of points accumulated, e.g., 94\n            points_pct (float):\n                Points percentage, e.g., 0.602564\n            wins (int):\n                Number of wins, e.g., 45\n            regulation_wins (int):\n                Number of wins in regulation time, e.g., 36\n            shootout_wins (int):\n                Number of wins by shootout, e.g., 3\n            losses (int):\n                Number of losses, e.g., 29\n            ot_losses (int):\n                Number of losses in overtime play, e.g., 4\n            shootout_losses (int | np.nan):\n                Number of losses due during shootout, e.g., NaN\n            ties (int):\n                Number of ties, e.g., 0\n            win_pct (float):\n                Win percentage, e.g., 0.576923\n            regulation_win_pct (float):\n                Win percentage in regulation time, e.g., 0.461538\n            streak_code (str):\n                Whether streak is a winning or losing streak, e.g., W\n            streak_count (int):\n                Number of games won or lost, e.g., 1\n            goals_for (int):\n                Number of goals scored, e.g., 253\n            goals_against (int):\n                Number of goals against, e.g., 235\n            goals_for_pct (float):\n                Goals scored per game played, e.g., 3.24359\n            goal_differential (int):\n                Difference in goals scored and goals allowed, e.g., 18\n            goal_differential_pct (float):\n                Difference in goals scored and goals allowed as a percentage of...something, e.g., 0.230769\n            home_games_played (int):\n                Number of home games played, e.g., 39\n            home_points (int):\n                Number of home points accumulated, e.g., 45\n            home_goals_for (int):\n                Number of goals scored in home games, e.g., 126\n            home_goals_against (int):\n                Number of goals allowed in home games, e.g., 118\n            home_goal_differential (int):\n                Difference in home goals scored and home goals allowed, e.g., 8\n            home_wins (int):\n                Number of wins at home, e.g., 22\n            home_losses (int):\n                Number of losses at home, e.g., 16\n            home_ot_losses (int):\n                Number of home losses in overtime, e.g., 1\n            home_ties (int):\n                Number of ties at home, e.g., 0\n            home_regulation_wins (int):\n                Number of wins at home in regulation, e.g., 17\n            road_games_played (int):\n                Number of games played on the road, e.g., 39\n            road_points (int):\n                Number of points accumulated on the road, e.g., 49\n            road_goals_for (int):\n                Number of goals scored on the road, e.g., 127\n            road_goals_against (int):\n                Number of goals allowed on the road, e.g., 117\n            road_goal_differential (int):\n                Difference in goals scored and goals allowed on the road, e.g., 10\n            road_wins (int):\n                Number of wins on the road, e.g., 23\n            road_losses (int):\n                Number of losses on the road, e.g., 13\n            road_ot_losses (int):\n                Number of losses on the road in overtime, e.g., 3\n            road_ties (int):\n                Number of ties on the road, e.g., 0\n            road_regulation_wins (int):\n                Number of wins on the road in regulation, e.g., 19\n            l10_points (int):\n                Number of points accumulated in last ten games, e.g., 12\n            l10_goals_for (int):\n                Number of goals scored in last ten games, e.g., 34\n            l10_goals_against (int):\n                Number of goals allowed in last ten games, e.g., 31\n            l10_goal_differential (int):\n                Difference in goals scored and allowed in last ten games, e.g., 3\n            l10_wins (int):\n                Number of wins in last ten games, e.g., 6\n            l10_losses (int):\n                Number of losses in last ten games, e.g., 4\n            l10_ot_losses (int):\n                Number of losses in overtime in last ten games, e.g., 0\n            l10_ties (int):\n                Number of  ties in last ten games, e.g., 0\n            l10_regulation_wins (int):\n                Number of wins in regulation in last ten games, e.g., 4\n            team_logo (str):\n                URL for the team logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            wildcard_sequence (int):\n                Order for wildcard rankings, e.g., 1\n            waivers_sequence (int):\n                Order for waiver wire, e.g., 19\n\n        Examples:\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; standings = season.standings\n\n        \"\"\"\n\n        if not self._standings:\n            self._scrape_standings()\n            self._munge_standings()\n\n        return self._finalize_standings()\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Season.standings","title":"standings  <code>property</code>","text":"<pre><code>standings\n</code></pre> <p>Pandas DataFrame of the standings from the NHL API</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season identifier, e.g., 20232024</p> <code>date</code> <code>str</code> <p>Date standings scraped, e.g., 2024-04-08</p> <code>team</code> <code>str</code> <p>Three-letter team code, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., Nashville Predators</p> <code>conference</code> <code>str</code> <p>Name of the conference in which the team plays, e.g., Western</p> <code>division</code> <code>str</code> <p>Name of the division in which the team plays, e.g., Central</p> <code>games_played</code> <code>int</code> <p>Number of games played, e.g., 78</p> <code>points</code> <code>int</code> <p>Number of points accumulated, e.g., 94</p> <code>points_pct</code> <code>float</code> <p>Points percentage, e.g., 0.602564</p> <code>wins</code> <code>int</code> <p>Number of wins, e.g., 45</p> <code>regulation_wins</code> <code>int</code> <p>Number of wins in regulation time, e.g., 36</p> <code>shootout_wins</code> <code>int</code> <p>Number of wins by shootout, e.g., 3</p> <code>losses</code> <code>int</code> <p>Number of losses, e.g., 29</p> <code>ot_losses</code> <code>int</code> <p>Number of losses in overtime play, e.g., 4</p> <code>shootout_losses</code> <code>int | nan</code> <p>Number of losses due during shootout, e.g., NaN</p> <code>ties</code> <code>int</code> <p>Number of ties, e.g., 0</p> <code>win_pct</code> <code>float</code> <p>Win percentage, e.g., 0.576923</p> <code>regulation_win_pct</code> <code>float</code> <p>Win percentage in regulation time, e.g., 0.461538</p> <code>streak_code</code> <code>str</code> <p>Whether streak is a winning or losing streak, e.g., W</p> <code>streak_count</code> <code>int</code> <p>Number of games won or lost, e.g., 1</p> <code>goals_for</code> <code>int</code> <p>Number of goals scored, e.g., 253</p> <code>goals_against</code> <code>int</code> <p>Number of goals against, e.g., 235</p> <code>goals_for_pct</code> <code>float</code> <p>Goals scored per game played, e.g., 3.24359</p> <code>goal_differential</code> <code>int</code> <p>Difference in goals scored and goals allowed, e.g., 18</p> <code>goal_differential_pct</code> <code>float</code> <p>Difference in goals scored and goals allowed as a percentage of...something, e.g., 0.230769</p> <code>home_games_played</code> <code>int</code> <p>Number of home games played, e.g., 39</p> <code>home_points</code> <code>int</code> <p>Number of home points accumulated, e.g., 45</p> <code>home_goals_for</code> <code>int</code> <p>Number of goals scored in home games, e.g., 126</p> <code>home_goals_against</code> <code>int</code> <p>Number of goals allowed in home games, e.g., 118</p> <code>home_goal_differential</code> <code>int</code> <p>Difference in home goals scored and home goals allowed, e.g., 8</p> <code>home_wins</code> <code>int</code> <p>Number of wins at home, e.g., 22</p> <code>home_losses</code> <code>int</code> <p>Number of losses at home, e.g., 16</p> <code>home_ot_losses</code> <code>int</code> <p>Number of home losses in overtime, e.g., 1</p> <code>home_ties</code> <code>int</code> <p>Number of ties at home, e.g., 0</p> <code>home_regulation_wins</code> <code>int</code> <p>Number of wins at home in regulation, e.g., 17</p> <code>road_games_played</code> <code>int</code> <p>Number of games played on the road, e.g., 39</p> <code>road_points</code> <code>int</code> <p>Number of points accumulated on the road, e.g., 49</p> <code>road_goals_for</code> <code>int</code> <p>Number of goals scored on the road, e.g., 127</p> <code>road_goals_against</code> <code>int</code> <p>Number of goals allowed on the road, e.g., 117</p> <code>road_goal_differential</code> <code>int</code> <p>Difference in goals scored and goals allowed on the road, e.g., 10</p> <code>road_wins</code> <code>int</code> <p>Number of wins on the road, e.g., 23</p> <code>road_losses</code> <code>int</code> <p>Number of losses on the road, e.g., 13</p> <code>road_ot_losses</code> <code>int</code> <p>Number of losses on the road in overtime, e.g., 3</p> <code>road_ties</code> <code>int</code> <p>Number of ties on the road, e.g., 0</p> <code>road_regulation_wins</code> <code>int</code> <p>Number of wins on the road in regulation, e.g., 19</p> <code>l10_points</code> <code>int</code> <p>Number of points accumulated in last ten games, e.g., 12</p> <code>l10_goals_for</code> <code>int</code> <p>Number of goals scored in last ten games, e.g., 34</p> <code>l10_goals_against</code> <code>int</code> <p>Number of goals allowed in last ten games, e.g., 31</p> <code>l10_goal_differential</code> <code>int</code> <p>Difference in goals scored and allowed in last ten games, e.g., 3</p> <code>l10_wins</code> <code>int</code> <p>Number of wins in last ten games, e.g., 6</p> <code>l10_losses</code> <code>int</code> <p>Number of losses in last ten games, e.g., 4</p> <code>l10_ot_losses</code> <code>int</code> <p>Number of losses in overtime in last ten games, e.g., 0</p> <code>l10_ties</code> <code>int</code> <p>Number of  ties in last ten games, e.g., 0</p> <code>l10_regulation_wins</code> <code>int</code> <p>Number of wins in regulation in last ten games, e.g., 4</p> <code>team_logo</code> <code>str</code> <p>URL for the team logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg</p> <code>wildcard_sequence</code> <code>int</code> <p>Order for wildcard rankings, e.g., 1</p> <code>waivers_sequence</code> <code>int</code> <p>Order for waiver wire, e.g., 19</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n&gt;&gt;&gt; standings = season.standings\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Season.schedule","title":"schedule","text":"<pre><code>schedule(team_schedule='all', sessions=None)\n</code></pre> <p>Pandas DataFrame of the schedule from the NHL API. Returns either the whole schedule or a subset of teams'</p> <p>Parameters:</p> Name Type Description Default <code>team_schedule</code> <code>str | None</code> <p>Three-letter team's schedule to scrape, e.g., NSH</p> <code>'all'</code> <code>sessions</code> <code>list | None | str | int</code> <p>(list | None | str | int, default=None): Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank, scrapes regular season and playoffs</p> <code>None</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season identifier, e.g., 20232024</p> <code>session</code> <code>int</code> <p>Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020015</p> <code>start_time</code> <code>str</code> <p>Start time for the game in the home time zone, in military time, e.g., 19:00</p> <code>game_state</code> <code>str</code> <p>Status of the game, whether official or future, e.g., OFF</p> <code>home_team</code> <code>str</code> <p>Three-letter code for the home team, e.g., NSH</p> <code>home_team_id</code> <code>int</code> <p>Two-digit code assigned to the home franchise by the NHL, e.g., 18</p> <code>home_score</code> <code>int</code> <p>Number of goals scored by the home team, e.g., 3</p> <code>away_team</code> <code>str</code> <p>Three-letter code for the away team, e.g., SEA</p> <code>away_team_id</code> <code>int</code> <p>Two-digit code assigned to the away franchise by the NHL, e.g., 55</p> <code>away_score</code> <code>int</code> <p>Number of goals scored by the away team, e.g., 0</p> <code>venue</code> <code>str</code> <p>Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA</p> <code>venue_timezone</code> <code>str</code> <p>Name of the venue timezone, e.g., US/Central</p> <code>neutral_site</code> <code>int</code> <p>Whether game is / was played at a neutral site location, e.g., 0</p> <code>game_date_dt</code> <code>datetime</code> <p>Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00</p> <code>tv_broadcasts</code> <code>list</code> <p>Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A', 'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H', 'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]</p> <code>home_logo</code> <code>str</code> <p>URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg</p> <code>home_logo_dark</code> <code>str</code> <p>URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg</p> <code>away_logo</code> <code>str</code> <p>URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg</p> <code>away_logo_dark</code> <code>str</code> <p>URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n&gt;&gt;&gt; schedule = season.schedule()\n</code></pre> <p>Get schedule for a single team</p> <pre><code>&gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n</code></pre> Source code in <code>chickenstats/chicken_nhl/scrape.py</code> <pre><code>def schedule(\n    self,\n    team_schedule: str | None = \"all\",\n    sessions: list | None | str | int = None,\n) -&gt; pd.DataFrame:\n    \"\"\"Pandas DataFrame of the schedule from the NHL API. Returns either the whole schedule or a subset of teams'\n\n    Parameters:\n        team_schedule (str | None):\n            Three-letter team's schedule to scrape, e.g., NSH\n        sessions: (list | None | str | int, default=None):\n            Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank,\n            scrapes regular season and playoffs\n\n    Returns:\n        season (int):\n            8-digit season identifier, e.g., 20232024\n        session (int):\n            Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020015\n        start_time (str):\n            Start time for the game in the home time zone, in military time, e.g., 19:00\n        game_state (str):\n            Status of the game, whether official or future, e.g., OFF\n        home_team (str):\n            Three-letter code for the home team, e.g., NSH\n        home_team_id (int):\n            Two-digit code assigned to the home franchise by the NHL, e.g., 18\n        home_score (int):\n            Number of goals scored by the home team, e.g., 3\n        away_team (str):\n            Three-letter code for the away team, e.g., SEA\n        away_team_id (int):\n            Two-digit code assigned to the away franchise by the NHL, e.g., 55\n        away_score (int):\n            Number of goals scored by the away team, e.g., 0\n        venue (str):\n            Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA\n        venue_timezone (str):\n            Name of the venue timezone, e.g., US/Central\n        neutral_site (int):\n            Whether game is / was played at a neutral site location, e.g., 0\n        game_date_dt (dt.datetime):\n            Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00\n        tv_broadcasts (list):\n            Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A',\n            'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H',\n            'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]\n        home_logo (str):\n            URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n        home_logo_dark (str):\n            URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg\n        away_logo (str):\n            URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg\n        away_logo_dark (str):\n            URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg\n\n    Examples:\n        &gt;&gt;&gt; season = Season(2023)\n        &gt;&gt;&gt; schedule = season.schedule()\n\n        Get schedule for a single team\n        &gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n\n    \"\"\"\n    if team_schedule not in self._scraped_schedule_teams:\n        self._scrape_schedule(team_schedule=team_schedule, sessions=sessions)\n\n    if team_schedule != \"all\":\n        return_list = [\n            x\n            for x in self._schedule\n            if x[\"home_team\"] == team_schedule or x[\"away_team\"] == team_schedule\n        ]\n\n        return_list = sorted(\n            return_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"])\n        )\n\n        return self._finalize_schedule(return_list)\n\n    else:\n        return self._finalize_schedule(self._schedule)\n</code></pre>"},{"location":"reference/evolving_hockey/stats/","title":"stats","text":"<p>Reference materials for <code>chickenstats.evolving_hockey.stats</code>.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_pbp","title":"prep_pbp","text":"<pre><code>prep_pbp(pbp, shifts, columns='full')\n</code></pre> <p>Prepares a play-by-play dataframe using EvolvingHockey data, but with additional stats and information. Columns keyword argument determines information returned.</p> <p>Used in later aggregation functions. Returns a DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Pandas DataFrame of CSV file downloaded from play-by-play query tool at evolving-hockey.com</p> required <code>shifts</code> <code>DataFrame</code> <p>Pandas DataFrame of CSV file downloaded from shifts query tool at evolving-hockey.com</p> required <code>columns</code> <code>str</code> <p>Whether to return additional columns or more sparse play-by-play dataframe</p> <code>'full'</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20192020</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2019020684</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2020-01-09</p> <code>event_index</code> <code>int</code> <p>Unique index number of event, in chronological order, e.g.,</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 3</p> <code>game_seconds</code> <code>int</code> <p>Game time elapsed in seconds, e.g., 3578</p> <code>period_seconds</code> <code>int</code> <p>Period time elapsed in seconds, e.g., 1178</p> <code>clock_time</code> <code>str</code> <p>Time shown on clock, e.g., 0:22</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5vE</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 5v2</p> <code>event_type</code> <code>str</code> <p>Name of the event, e.g., GOAL</p> <code>event_description</code> <code>str</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>event_detail</code> <code>str | None</code> <p>Additional information about the event, e.g., Wrist</p> <code>event_zone</code> <code>str | None</code> <p>Zone location of event, e.g., DEF</p> <code>event_team</code> <code>str | None</code> <p>3-letter abbreviation of the team for the event, e.g., NSH</p> <code>opp_team</code> <code>str | None</code> <p>3-letter abbreviation of the opposing team for the event, e.g., CHI</p> <code>is_home</code> <code>int | None</code> <p>Dummy variable to signify whether event team is home team, e.g., 0</p> <code>coords_x</code> <code>int | None</code> <p>X coordinates of event, e.g., -96</p> <code>coords_y</code> <code>int | None</code> <p>Y coordinates of event, e.g., 11</p> <code>event_player_1</code> <code>str</code> <p>Name of the first event player, e.g., PEKKA.RINNE</p> <code>event_player_1_id</code> <code>str</code> <p>Identifier that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE</p> <code>event_player_1_pos</code> <code>str</code> <p>Player's position for the game, may differ from primary position, e.g., G</p> <code>event_player_2</code> <code>str</code> <p>Name of the second event player</p> <code>event_player_2_id</code> <code>str</code> <p>Identifier that can be used to match with Evolving Hockey data</p> <code>event_player_2_pos</code> <code>str</code> <p>Player's position for the game, may differ from primary position</p> <code>event_player_3</code> <code>str</code> <p>Name of the third event player</p> <code>event_player_3_id</code> <code>str</code> <p>Identifier that can be used to match with Evolving Hockey data</p> <code>event_player_3_pos</code> <code>str</code> <p>Player's position for the game, may differ from primary position</p> <code>event_length</code> <code>int</code> <p>Length of time elapsed in seconds since previous event, e.g., 5</p> <code>high_danger</code> <code>int</code> <p>Whether shot event is from high-danger area, e.g., 0</p> <code>danger</code> <code>int</code> <p>Whether shot event is from danger area, exclusive of high-danger area, e.g., 0</p> <code>pbp_distance</code> <code>float</code> <p>Distance from opponent net, in feet, according to play-by-play description, e.g., 185.0</p> <code>event_distance</code> <code>float</code> <p>Distance from opponent net, in feet, e.g., 185.326738</p> <code>event_angle</code> <code>float</code> <p>Angle of opponent's net from puck, in degrees, e.g., 57.528808</p> <code>opp_strength_state</code> <code>str</code> <p>Strength state from the perspective of the opposing team, e.g., Ev5</p> <code>opp_score_state</code> <code>str</code> <p>Score state from the perspective of the opposing team, e.g., 2v5</p> <code>event_on_f</code> <code>str</code> <p>Names of the event team's forwards that are on the ice during the event, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>event_on_f_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>event_on_d</code> <code>str</code> <p>Names of the event team's defensemen that are on the ice during the event, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>event_on_d_id</code> <code>str</code> <p>EH IDs of the event team's defensemen that are on the ice during the event, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>event_on_g</code> <code>str</code> <p>Name of the goalie for the event team, e.g., PEKKA RINNE</p> <code>event_on_g_id</code> <code>str</code> <p>Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE</p> <code>event_on_1</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., CALLE.JARNKROK</p> <code>event_on_1_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., CALLE.JARNKROK</p> <code>event_on_1_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., C</p> <code>event_on_2</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., MATTIAS.EKHOLM</p> <code>event_on_2_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., MATTIAS.EKHOLM</p> <code>event_on_2_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., D</p> <code>event_on_3</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., MIKAEL.GRANLUND</p> <code>event_on_3_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., MIKAEL.GRANLUND</p> <code>event_on_3_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., C</p> <code>event_on_4</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., NICK.BONINO</p> <code>event_on_4_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., NICK.BONINO</p> <code>event_on_4_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., C</p> <code>event_on_5</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., PEKKA.RINNE</p> <code>event_on_5_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., PEKKA.RINNE</p> <code>event_on_5_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., G</p> <code>event_on_6</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., ROMAN.JOSI</p> <code>event_on_6_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., ROMAN.JOSI</p> <code>event_on_6_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., D</p> <code>event_on_7</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., NaN</p> <code>event_on_7_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., NaN</p> <code>event_on_7_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., NaN</p> <code>opp_on_f</code> <code>str</code> <p>Names of the opponent's forwards that are on the ice during the event, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>opp_on_f_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>opp_on_d</code> <code>str</code> <p>Names of the opposing team's defensemen that are on the ice during the event, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_on_d_id</code> <code>str</code> <p>EH IDs of the opposing team's defensemen that are on the ice during the event, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_on_g</code> <code>str</code> <p>Name of the opposing goalie for the event team, e.g., EMPTY NET</p> <code>opp_on_g_id</code> <code>str</code> <p>Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., EMPTY NET</p> <code>opp_on_1</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., ALEX.DEBRINCAT</p> <code>opp_on_1_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., ALEX.DEBRINCAT</p> <code>opp_on_1_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., R</p> <code>opp_on_2</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., DUNCAN.KEITH</p> <code>opp_on_2_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., DUNCAN.KEITH</p> <code>opp_on_2_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., D</p> <code>opp_on_3</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., ERIK.GUSTAFSSON2</p> <code>opp_on_3_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., ERIK.GUSTAFSSON2</p> <code>opp_on_3_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., D</p> <code>opp_on_4</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., JONATHAN.TOEWS</p> <code>opp_on_4_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., JONATHAN.TOEWS</p> <code>opp_on_4_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., C</p> <code>opp_on_5</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., KIRBY.DACH</p> <code>opp_on_5_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., KIRBY.DACH</p> <code>opp_on_5_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., C</p> <code>opp_on_6</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., PATRICK.KANE</p> <code>opp_on_6_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., PATRICK.KANE</p> <code>opp_on_6_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., R</p> <code>opp_on_7</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., NaN</p> <code>opp_on_7_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., NaN</p> <code>opp_on_7_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., NaN</p> <code>change</code> <code>int</code> <p>Dummy variable to indicate whether event is a change, e.g., 0</p> <code>zone_start</code> <code>str</code> <p>Zone where the changed, e.g., OFF or OTF</p> <code>num_on</code> <code>int | None</code> <p>Number of players entering the ice, e.g., 6</p> <code>num_off</code> <code>int | None</code> <p>Number of players exiting the ice, e.g., 0</p> <code>players_on</code> <code>str</code> <p>Names of players on, in jersey order, e.g., FILIP FORSBERG, ALEX CARRIER, ROMAN JOSI, MIKAEL GRANLUND, JUUSE SAROS, MATT DUCHENE</p> <code>players_on_id</code> <code>str</code> <p>Evolving Hockey IDs of players on, in jersey order, e.g., FILIP.FORSBERG, ALEX.CARRIER, ROMAN.JOSI, MIKAEL.GRANLUND, JUUSE.SAROS, MATT.DUCHENE</p> <code>players_on_pos</code> <code>str</code> <p>Positions of players on, in jersey order, e.g., L, D, D, C, G, C</p> <code>players_off</code> <code>str</code> <p>Names of players off, in jersey order</p> <code>players_off_id</code> <code>str</code> <p>Evolving Hockey IDs of players off, in jersey order</p> <code>players_off_pos</code> <code>str</code> <p>Positions of players off, in jersey order</p> <code>shot</code> <code>int</code> <p>Dummy variable to indicate whether event is a shot, e.g., 1</p> <code>shot_adj</code> <code>float</code> <p>Score and venue-adjusted shot value, e.g., 0</p> <code>goal</code> <code>int</code> <p>Dummy variable to indicate whether event is a goal, e.g., 1</p> <code>goal_adj</code> <code>float</code> <p>Score and venue-adjusted shot value, e.g., 0</p> <code>pred_goal</code> <code>float</code> <p>Predicted goal value (xG), e.g., 0.482589</p> <code>pred_goal_adj</code> <code>float</code> <p>Score and venue-adjusted predicted goal (xG) value, e.g., 0</p> <code>miss</code> <code>int</code> <p>Dummy variable to indicate whether event is a missed shot, e.g., 0</p> <code>block</code> <code>int</code> <p>Dummy variable to indicate whether event is a block, e.g., 0</p> <code>corsi</code> <code>int</code> <p>Dummy variable to indicate whether event is a corsi event, e.g., 1</p> <code>corsi_adj</code> <code>float</code> <p>Score and venue-adjusted corsi value, e.g., 0</p> <code>fenwick</code> <code>int</code> <p>Dummy variable to indicate whether event is a fenwick event, e.g., 1</p> <code>fenwick_adj</code> <code>float</code> <p>Score and venue-adjusted fenwick value, e.g., 0</p> <code>hd_shot</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger shot event, e.g., 0</p> <code>hd_goal</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger goal event, e.g., 0</p> <code>hd_miss</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger miss event, e.g., 0</p> <code>hd_fenwick</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger fenwick event, e.g., 0</p> <code>fac</code> <code>int</code> <p>Dummy variable to indicate whether event is a faceoff, e.g., 0</p> <code>hit</code> <code>int</code> <p>Dummy variable to indicate whether event is a hit, e.g., 0</p> <code>give</code> <code>int</code> <p>Dummy variable to indicate whether event is a giveaway, e.g., 0</p> <code>take</code> <code>int</code> <p>Dummy variable to indicate whether event is a takeaway, e.g., 0</p> <code>pen0</code> <code>int</code> <p>Dummy variable to indicate whether event is a penalty with no minutes, e.g., 0</p> <code>pen2</code> <code>int</code> <p>Dummy variable to indicate whether event is a two-minute penalty, e.g., 0</p> <code>pen4</code> <code>int</code> <p>Dummy variable to indicate whether event is a four-minute penalty, e.g., 0</p> <code>pen5</code> <code>int</code> <p>Dummy variable to indicate whether event is a five-minute penalty, e.g., 0</p> <code>pen10</code> <code>int</code> <p>Dummy variable to indicate whether event is a ten-minute penalty, e.g., 0</p> <code>stop</code> <code>int</code> <p>Dummy variable to indicate whether event is a stoppage, e.g., 0</p> <code>ozf</code> <code>int</code> <p>Dummy variable to indicate whether event is an offensive zone faceoff e.g., 0</p> <code>nzf</code> <code>int</code> <p>Dummy variable to indicate whether event is a neutral zone faceoff, e.g., 0</p> <code>dzf</code> <code>int</code> <p>Dummy variable to indicate whether event is a defensive zone faceoff, e.g., 0</p> <code>ozs</code> <code>int</code> <p>Dummy variable to indicate whether an event is an offensive zone change, e.g., 0</p> <code>nzs</code> <code>int</code> <p>Dummy variable to indicate whether an event is a neutral zone change, e.g., 0</p> <code>dzs</code> <code>int</code> <p>Dummy variable to indicate whether an event is an defensive zone change, e.g., 0</p> <code>otf</code> <code>int</code> <p>Dummy variable to indicate whether an event is an on-the-fly change, e.g., 0</p> <p>Examples:</p> <p>Play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n&gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> Source code in <code>chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_pbp(\n    pbp: pd.DataFrame | list[pd.DataFrame],\n    shifts: pd.DataFrame | list[pd.DataFrame],\n    columns: str = \"full\",\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Prepares a play-by-play dataframe using EvolvingHockey data, but with additional stats and information.\n    Columns keyword argument determines information returned.\n\n    Used in later aggregation functions. Returns a DataFrame\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Pandas DataFrame of CSV file downloaded from play-by-play query tool at evolving-hockey.com\n        shifts (pd.DataFrame):\n            Pandas DataFrame of CSV file downloaded from shifts query tool at evolving-hockey.com\n        columns (str):\n            Whether to return additional columns or more sparse play-by-play dataframe\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20192020\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2019020684\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2020-01-09\n        event_index (int):\n            Unique index number of event, in chronological order, e.g.,\n        game_period (int):\n            Game period, e.g., 3\n        game_seconds (int):\n            Game time elapsed in seconds, e.g., 3578\n        period_seconds (int):\n            Period time elapsed in seconds, e.g., 1178\n        clock_time (str):\n            Time shown on clock, e.g., 0:22\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5vE\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 5v2\n        event_type (str):\n            Name of the event, e.g., GOAL\n        event_description (str):\n            Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n        event_detail (str | None):\n            Additional information about the event, e.g., Wrist\n        event_zone (str | None):\n            Zone location of event, e.g., DEF\n        event_team (str | None):\n            3-letter abbreviation of the team for the event, e.g., NSH\n        opp_team (str | None):\n            3-letter abbreviation of the opposing team for the event, e.g., CHI\n        is_home (int | None):\n            Dummy variable to signify whether event team is home team, e.g., 0\n        coords_x (int | None):\n            X coordinates of event, e.g., -96\n        coords_y (int | None):\n            Y coordinates of event, e.g., 11\n        event_player_1 (str):\n            Name of the first event player, e.g., PEKKA.RINNE\n        event_player_1_id (str):\n            Identifier that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE\n        event_player_1_pos (str):\n            Player's position for the game, may differ from primary position, e.g., G\n        event_player_2 (str):\n            Name of the second event player\n        event_player_2_id (str):\n            Identifier that can be used to match with Evolving Hockey data\n        event_player_2_pos (str):\n            Player's position for the game, may differ from primary position\n        event_player_3 (str):\n            Name of the third event player\n        event_player_3_id (str):\n            Identifier that can be used to match with Evolving Hockey data\n        event_player_3_pos (str):\n            Player's position for the game, may differ from primary position\n        event_length (int):\n            Length of time elapsed in seconds since previous event, e.g., 5\n        high_danger (int):\n            Whether shot event is from high-danger area, e.g., 0\n        danger (int):\n            Whether shot event is from danger area,\n            exclusive of high-danger area, e.g., 0\n        pbp_distance (float):\n            Distance from opponent net, in feet, according to play-by-play description, e.g., 185.0\n        event_distance (float):\n            Distance from opponent net, in feet, e.g., 185.326738\n        event_angle (float):\n            Angle of opponent's net from puck, in degrees, e.g., 57.528808\n        opp_strength_state (str):\n            Strength state from the perspective of the opposing team, e.g., Ev5\n        opp_score_state (str):\n            Score state from the perspective of the opposing team, e.g., 2v5\n        event_on_f (str):\n            Names of the event team's forwards that are on the ice during the event,\n            e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n        event_on_f_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n        event_on_d (str):\n            Names of the event team's defensemen that are on the ice during the event,\n            e.g., MATTIAS EKHOLM, ROMAN JOSI\n        event_on_d_id (str):\n            EH IDs of the event team's defensemen that are on the ice during the event,\n            e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n        event_on_g (str):\n            Name of the goalie for the event team, e.g., PEKKA RINNE\n        event_on_g_id (str):\n            Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE\n        event_on_1 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., CALLE.JARNKROK\n        event_on_1_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., CALLE.JARNKROK\n        event_on_1_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., C\n        event_on_2 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., MATTIAS.EKHOLM\n        event_on_2_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., MATTIAS.EKHOLM\n        event_on_2_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., D\n        event_on_3 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., MIKAEL.GRANLUND\n        event_on_3_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., MIKAEL.GRANLUND\n        event_on_3_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., C\n        event_on_4 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., NICK.BONINO\n        event_on_4_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., NICK.BONINO\n        event_on_4_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., C\n        event_on_5 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., PEKKA.RINNE\n        event_on_5_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., PEKKA.RINNE\n        event_on_5_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., G\n        event_on_6 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., ROMAN.JOSI\n        event_on_6_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., ROMAN.JOSI\n        event_on_6_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., D\n        event_on_7 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., NaN\n        event_on_7_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., NaN\n        event_on_7_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., NaN\n        opp_on_f (str):\n            Names of the opponent's forwards that are on the ice during the event,\n            e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n        opp_on_f_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n        opp_on_d (str):\n            Names of the opposing team's defensemen that are on the ice during the event,\n            e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n        opp_on_d_id (str):\n            EH IDs of the opposing team's defensemen that are on the ice during the event,\n            e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n        opp_on_g (str):\n            Name of the opposing goalie for the event team, e.g., EMPTY NET\n        opp_on_g_id (str):\n            Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., EMPTY NET\n        opp_on_1 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., ALEX.DEBRINCAT\n        opp_on_1_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., ALEX.DEBRINCAT\n        opp_on_1_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., R\n        opp_on_2 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., DUNCAN.KEITH\n        opp_on_2_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., DUNCAN.KEITH\n        opp_on_2_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., D\n        opp_on_3 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., ERIK.GUSTAFSSON2\n        opp_on_3_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., ERIK.GUSTAFSSON2\n        opp_on_3_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., D\n        opp_on_4 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., JONATHAN.TOEWS\n        opp_on_4_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., JONATHAN.TOEWS\n        opp_on_4_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., C\n        opp_on_5 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., KIRBY.DACH\n        opp_on_5_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., KIRBY.DACH\n        opp_on_5_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., C\n        opp_on_6 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., PATRICK.KANE\n        opp_on_6_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., PATRICK.KANE\n        opp_on_6_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., R\n        opp_on_7 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., NaN\n        opp_on_7_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., NaN\n        opp_on_7_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., NaN\n        change (int):\n            Dummy variable to indicate whether event is a change, e.g., 0\n        zone_start (str):\n            Zone where the changed, e.g., OFF or OTF\n        num_on (int | None):\n            Number of players entering the ice, e.g., 6\n        num_off (int | None):\n            Number of players exiting the ice, e.g., 0\n        players_on (str):\n            Names of players on, in jersey order,\n            e.g., FILIP FORSBERG, ALEX CARRIER, ROMAN JOSI, MIKAEL GRANLUND, JUUSE SAROS, MATT DUCHENE\n        players_on_id (str):\n            Evolving Hockey IDs of players on, in jersey order,\n            e.g., FILIP.FORSBERG, ALEX.CARRIER, ROMAN.JOSI, MIKAEL.GRANLUND, JUUSE.SAROS, MATT.DUCHENE\n        players_on_pos (str):\n            Positions of players on, in jersey order,\n            e.g., L, D, D, C, G, C\n        players_off (str):\n            Names of players off, in jersey order\n        players_off_id (str):\n            Evolving Hockey IDs of players off, in jersey order\n        players_off_pos (str):\n            Positions of players off, in jersey order\n        shot (int):\n            Dummy variable to indicate whether event is a shot, e.g., 1\n        shot_adj (float):\n            Score and venue-adjusted shot value, e.g., 0\n        goal (int):\n            Dummy variable to indicate whether event is a goal, e.g., 1\n        goal_adj (float):\n            Score and venue-adjusted shot value, e.g., 0\n        pred_goal (float):\n            Predicted goal value (xG), e.g., 0.482589\n        pred_goal_adj (float):\n            Score and venue-adjusted predicted goal (xG) value, e.g., 0\n        miss (int):\n            Dummy variable to indicate whether event is a missed shot, e.g., 0\n        block (int):\n            Dummy variable to indicate whether event is a block, e.g., 0\n        corsi (int):\n            Dummy variable to indicate whether event is a corsi event, e.g., 1\n        corsi_adj (float):\n            Score and venue-adjusted corsi value, e.g., 0\n        fenwick (int):\n            Dummy variable to indicate whether event is a fenwick event, e.g., 1\n        fenwick_adj (float):\n             Score and venue-adjusted fenwick value, e.g., 0\n        hd_shot (int):\n            Dummy variable to indicate whether event is a high-danger shot event, e.g., 0\n        hd_goal (int):\n            Dummy variable to indicate whether event is a high-danger goal event, e.g., 0\n        hd_miss (int):\n            Dummy variable to indicate whether event is a high-danger miss event, e.g., 0\n        hd_fenwick (int):\n            Dummy variable to indicate whether event is a high-danger fenwick event, e.g., 0\n        fac (int):\n            Dummy variable to indicate whether event is a faceoff, e.g., 0\n        hit (int):\n            Dummy variable to indicate whether event is a hit, e.g., 0\n        give (int):\n            Dummy variable to indicate whether event is a giveaway, e.g., 0\n        take (int):\n            Dummy variable to indicate whether event is a takeaway, e.g., 0\n        pen0 (int):\n            Dummy variable to indicate whether event is a penalty with no minutes, e.g., 0\n        pen2 (int):\n            Dummy variable to indicate whether event is a two-minute penalty, e.g., 0\n        pen4 (int):\n            Dummy variable to indicate whether event is a four-minute penalty, e.g., 0\n        pen5 (int):\n            Dummy variable to indicate whether event is a five-minute penalty, e.g., 0\n        pen10 (int):\n            Dummy variable to indicate whether event is a ten-minute penalty, e.g., 0\n        stop (int):\n            Dummy variable to indicate whether event is a stoppage, e.g., 0\n        ozf (int):\n            Dummy variable to indicate whether event is an offensive zone faceoff e.g., 0\n        nzf (int):\n            Dummy variable to indicate whether event is a neutral zone faceoff, e.g., 0\n        dzf (int):\n            Dummy variable to indicate whether event is a defensive zone faceoff, e.g., 0\n        ozs (int):\n            Dummy variable to indicate whether an event is an offensive zone change, e.g., 0\n        nzs (int):\n            Dummy variable to indicate whether an event is a neutral zone change, e.g., 0\n        dzs (int):\n            Dummy variable to indicate whether an event is an defensive zone change, e.g., 0\n        otf (int):\n            Dummy variable to indicate whether an event is an on-the-fly change, e.g., 0\n\n    Examples:\n        Play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n        &gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n    \"\"\"\n\n    with Progress(\n        TextColumn(\"[progress.description]{task.description}\"),\n        SpinnerColumn(),\n        BarColumn(),\n        TaskProgressColumn(),\n        TextColumn(\"\u2022\"),\n        TimeElapsedColumn(),\n        TextColumn(\"\u2022\"),\n        TimeRemainingColumn(),\n        TextColumn(\"\u2022\"),\n        MofNCompleteColumn(),\n        TextColumn(\"\u2022\"),\n        ScrapeSpeedColumn(),\n    ) as progress:\n        if isinstance(pbp, pd.DataFrame):\n            progress_total = 1\n\n            pbp = [pbp]\n\n        elif isinstance(pbp, list):\n            progress_total = len(pbp)\n\n        if isinstance(shifts, pd.DataFrame):\n            shifts = [shifts]\n\n        if len(pbp) != len(shifts):\n            raise Exception(\"Number of play-by-play and shift CSV files does not match\")\n\n        pbar_message = \"Prepping play-by-play data...\"\n\n        csv_task = progress.add_task(pbar_message, total=progress_total)\n\n        pbp_concat = []\n\n        for idx, (pbp_raw, shifts_raw) in enumerate(zip(pbp, shifts)):\n            rosters = munge_rosters(shifts_raw)\n\n            pbp_clean = munge_pbp(pbp_raw)\n\n            pbp_clean = add_positions(pbp_clean, rosters)\n\n            if columns in [\"light\", \"full\", \"all\"]:\n                cols = [\n                    \"season\",\n                    \"session\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"event_index\",\n                    \"game_period\",\n                    \"game_seconds\",\n                    \"period_seconds\",\n                    \"clock_time\",\n                    \"strength_state\",\n                    \"score_state\",\n                    \"event_type\",\n                    \"event_description\",\n                    \"event_detail\",\n                    \"event_zone\",\n                    \"event_team\",\n                    \"opp_team\",\n                    \"is_home\",\n                    \"coords_x\",\n                    \"coords_y\",\n                    \"event_player_1\",\n                    \"event_player_1_id\",\n                    \"event_player_1_pos\",\n                    \"event_player_2\",\n                    \"event_player_2_id\",\n                    \"event_player_2_pos\",\n                    \"event_player_3\",\n                    \"event_player_3_id\",\n                    \"event_player_3_pos\",\n                    \"event_length\",\n                    \"high_danger\",\n                    \"danger\",\n                    \"pbp_distance\",\n                    \"event_distance\",\n                    \"event_angle\",\n                    \"event_on_f\",\n                    \"event_on_f_id\",\n                    \"event_on_d\",\n                    \"event_on_d_id\",\n                    \"event_on_g\",\n                    \"event_on_g_id\",\n                    \"opp_on_f\",\n                    \"opp_on_f_id\",\n                    \"opp_on_d\",\n                    \"opp_on_d_id\",\n                    \"opp_on_g\",\n                    \"opp_on_g_id\",\n                    \"change\",\n                    \"zone_start\",\n                    \"num_on\",\n                    \"num_off\",\n                    \"players_on\",\n                    \"players_on_id\",\n                    \"players_on_pos\",\n                    \"players_off\",\n                    \"players_off_id\",\n                    \"players_off_pos\",\n                    \"shot\",\n                    \"shot_adj\",\n                    \"goal\",\n                    \"goal_adj\",\n                    \"pred_goal\",\n                    \"pred_goal_adj\",\n                    \"miss\",\n                    \"block\",\n                    \"corsi\",\n                    \"corsi_adj\",\n                    \"fenwick\",\n                    \"fenwick_adj\",\n                    \"hd_shot\",\n                    \"hd_goal\",\n                    \"hd_miss\",\n                    \"hd_fenwick\",\n                    \"fac\",\n                    \"hit\",\n                    \"give\",\n                    \"take\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"stop\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                    \"ozs\",\n                    \"nzs\",\n                    \"dzs\",\n                    \"otf\",\n                ]\n\n            if columns in [\"full\", \"all\"]:\n                event_cols = [\n                    \"event_on_1\",\n                    \"event_on_1_id\",\n                    \"event_on_1_pos\",\n                    \"event_on_2\",\n                    \"event_on_2_id\",\n                    \"event_on_2_pos\",\n                    \"event_on_3\",\n                    \"event_on_3_id\",\n                    \"event_on_3_pos\",\n                    \"event_on_4\",\n                    \"event_on_4_id\",\n                    \"event_on_4_pos\",\n                    \"event_on_5\",\n                    \"event_on_5_id\",\n                    \"event_on_5_pos\",\n                    \"event_on_6\",\n                    \"event_on_6_id\",\n                    \"event_on_6_pos\",\n                    \"event_on_7\",\n                    \"event_on_7_id\",\n                    \"event_on_7_pos\",\n                ]\n\n                event_pos = cols.index(\"event_on_g_id\") + 1\n\n                cols[event_pos:event_pos] = event_cols\n\n                opp_cols = [\n                    \"opp_on_1\",\n                    \"opp_on_1_id\",\n                    \"opp_on_1_pos\",\n                    \"opp_on_2\",\n                    \"opp_on_2_id\",\n                    \"opp_on_2_pos\",\n                    \"opp_on_3\",\n                    \"opp_on_3_id\",\n                    \"opp_on_3_pos\",\n                    \"opp_on_4\",\n                    \"opp_on_4_id\",\n                    \"opp_on_4_pos\",\n                    \"opp_on_5\",\n                    \"opp_on_5_id\",\n                    \"opp_on_5_pos\",\n                    \"opp_on_6\",\n                    \"opp_on_6_id\",\n                    \"opp_on_6_pos\",\n                    \"opp_on_7\",\n                    \"opp_on_7_id\",\n                    \"opp_on_7_pos\",\n                ]\n\n                opp_pos = cols.index(\"opp_on_g_id\") + 1\n\n                cols[opp_pos:opp_pos] = opp_cols\n\n                other_cols = [\n                    \"opp_strength_state\",\n                    \"opp_score_state\",\n                ]\n\n                other_pos = cols.index(\"event_angle\") + 1\n\n                cols[other_pos:other_pos] = other_cols\n\n            if columns == \"all\":\n                more_cols = [\n                    \"home_zone\",\n                    \"home_team\",\n                    \"away_team\",\n                    \"home_goalie\",\n                    \"away_goalie\",\n                    \"home_skaters\",\n                    \"away_skaters\",\n                    \"home_score\",\n                    \"away_score\",\n                    \"home_zonestart\",\n                    \"face_index\",\n                    \"pen_index\",\n                    \"shift_index\",\n                    \"game_score_state\",\n                    \"game_strength_state\",\n                ]\n\n                pos = cols.index(\"is_home\") + 1\n\n                cols[pos:pos] = more_cols\n\n            if columns in [\"light\", \"full\", \"all\"]:\n                cols = [x for x in cols if x in pbp_clean]\n\n                pbp_clean = pbp_clean[cols]\n\n            pbp_concat.append(pbp_clean)\n\n            if progress_total == 1 or idx + 1 == progress_total:\n\n                pbp_clean = pd.concat(pbp_concat, ignore_index=True)\n\n                pbar_message = \"Finished loading play-by-play data\"\n\n            progress.update(csv_task, description=pbar_message, advance=1, refresh=True)\n\n    return pbp_clean\n</code></pre>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_stats","title":"prep_stats","text":"<pre><code>prep_stats(df, level='game', score=False, teammates=False, opposition=False)\n</code></pre> <p>Prepares an individual and on-ice stats dataframe using EvolvingHockey data, aggregated to desired level. Capable of returning cuts that account for strength state, period, score state, teammates, and opposition.</p> <p>Returns a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe from the prep_pbp function with the default columns argument</p> required <code>level</code> <code>str</code> <p>Level to aggregate stats, e.g., 'game'</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Whether to aggregate to score state level</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Whether to account for teammates when aggregating</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Whether to account for opposition when aggregating</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20232024</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2023020015</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2023-10-12</p> <code>player</code> <code>str</code> <p>Name of the player, e.g., FILIP.FORSBERG</p> <code>player_id</code> <code>str</code> <p>Player EH ID, e.g., FILIP.FORSBERG</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>3-letter abbreviation of the player's team, e.g., NSH</p> <code>opp_team</code> <code>DataFrame</code> <p>object 3-letter abbreviation of the opposing team, e.g., SEA</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5v5</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 0v0</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 1</p> <code>forwards</code> <code>str</code> <p>Names of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>defense</code> <code>str</code> <p>Names of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>defense_id</code> <code>str</code> <p>EH IDs of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>own_goalie</code> <code>str</code> <p>Name of the goalie for the event team, e.g., JUUSE.SAROS</p> <code>own_goalie_id</code> <code>str</code> <p>Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS</p> <code>opp_forwards</code> <code>str</code> <p>Names of the opponent's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_defense</code> <code>str</code> <p>Names of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_defense_id</code> <code>str</code> <p>EH IDs of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_goalie</code> <code>str</code> <p>Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER</p> <code>opp_goalie_id</code> <code>str</code> <p>Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., PHILIPP.GRUBAUER</p> <code>toi</code> <code>float</code> <p>Time on-ice in minutes, e.g., 1.616667</p> <code>g</code> <code>float</code> <p>Number of individual goals scored, e.g, 0</p> <code>a1</code> <code>float</code> <p>Number of primary assists, e.g, 0</p> <code>a2</code> <code>float</code> <p>Number of secondary assists, e.g, 0</p> <code>isf</code> <code>float</code> <p>Number of indiviudal shots registered, e.g., 0</p> <code>iff</code> <code>float</code> <p>Number of indiviudal fenwick events registered, e.g., 0</p> <code>icf</code> <code>float</code> <p>Number of indiviudal corsi events registered, e.g., 0</p> <code>ixg</code> <code>float</code> <p>Sum value of individual predicted goals (xG), e.g., 0</p> <code>gax</code> <code>float</code> <p>Sum value of goals scored above expected, e.g., 0</p> <code>ihdg</code> <code>float</code> <p>Sum value of individual high-danger goals scored, e.g., 0</p> <code>ihdf</code> <code>float</code> <p>Sum value of individual high-danger fenwick events registered, e.g., 0</p> <code>ihdsf</code> <code>float</code> <p>Sum value of individual high-danger shots taken, e.g., 0</p> <code>ihdm</code> <code>float</code> <p>Sum value of individual high-danger shots missed, e.g., 0</p> <code>imsf</code> <code>float</code> <p>Sum value of individual missed shots, 0</p> <code>isb</code> <code>float</code> <p>Sum value of shots taken that were ultimately blocked, e.g., 0</p> <code>ibs</code> <code>float</code> <p>Sum value of opponent shots taken that the player ultimately blocked, e.g., 0</p> <code>igive</code> <code>float</code> <p>Sum of individual giveaways, e.g., 0</p> <code>itake</code> <code>float</code> <p>Sum of individual takeaways, e.g., 0</p> <code>ihf</code> <code>float</code> <p>Sum of individual hits for, e.g., 0</p> <code>iht</code> <code>float</code> <p>Sum of individual hits taken, e.g., 0</p> <code>ifow</code> <code>float</code> <p>Sum of individual faceoffs won, e.g., 0</p> <code>ifol</code> <code>float</code> <p>Sum of individual faceoffs lost, e.g., 0</p> <code>iozfw</code> <code>float</code> <p>Sum of individual faceoffs won in offensive zone, e.g., 0</p> <code>iozfl</code> <code>float</code> <p>Sum of individual faceoffs lost in offensive zone, e.g., 0</p> <code>inzfw</code> <code>float</code> <p>Sum of individual faceoffs won in neutral zone, e.g., 0</p> <code>inzfl</code> <code>float</code> <p>Sum of individual faceoffs lost in neutral zone, e.g., 0</p> <code>idzfw</code> <code>float</code> <p>Sum of individual faceoffs won in defensive zone, e.g., 0</p> <code>idzfl</code> <code>float</code> <p>Sum of individual faceoffs lost in defensive zone, e.g., 0</p> <code>a1_xg</code> <code>float</code> <p>Sum of xG from primary assists, e.g., 0</p> <code>a2_xg</code> <code>float</code> <p>Sum of xG from secondary assists, e.g., 0</p> <code>ipent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken, e.g., 0</p> <code>ipent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken, e.g., 0</p> <code>ipent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken, e.g., 0</p> <code>ipent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken, e.g., 0</p> <code>ipent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken, e.g., 0</p> <code>ipend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn, e.g., 0</p> <code>ipend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn, e.g., 0</p> <code>ipend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn, e.g., 0</p> <code>ipend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn, e.g., 0</p> <code>ipend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn, e.g., 0</p> <code>ozs</code> <code>float</code> <p>Sum of changes with offensive zone starts, e.g., 0</p> <code>nzs</code> <code>float</code> <p>Sum of changes with neutral zone starts, e.g., 0</p> <code>dzs</code> <code>float</code> <p>Sum of changes with defensive zone starts, e.g., 1</p> <code>otf</code> <code>float</code> <p>Sum of changes on-the-fly, e.g., 0</p> <code>gf</code> <code>float</code> <p>Sum of goals scored while player is on-ice, e.g., 0</p> <code>gf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals scored while player is on-ice, e.g., 0</p> <code>hdgf</code> <code>float</code> <p>Sum of high-danger goals scored while player is on-ice, e.g., 0</p> <code>ga</code> <code>float</code> <p>Sum of goals allowed while player is on-ice, e.g., 0</p> <code>ga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals allowed while player is on-ice, e.g., 0</p> <code>hdga</code> <code>float</code> <p>Sum of high-danger goals allowed while player is on-ice, e.g., 0</p> <code>xgf</code> <code>float</code> <p>Sum of expected goals generated while player is on-ice, e.g., 0.017266</p> <code>xgf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals generated while player is on-ice, e.g., 0.016472</p> <code>xga</code> <code>float</code> <p>Sum of expected goals allowed while player is on-ice, e.g., 0.123475</p> <code>xga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals allowed while player is on-ice, e.g., 0.129772</p> <code>sf</code> <code>float</code> <p>Sum of shots taken while player is on-ice, e.g., 1</p> <code>sf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots taken while player is on-ice, e.g., .972</p> <code>hdsf</code> <code>float</code> <p>Sum of high-danger shots taken while player is on-ice, e.g., 0</p> <code>sa</code> <code>float</code> <p>Sum of shots allowed while player is on-ice, e.g., 0</p> <code>sa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots allowed while player is on-ice, e.g., 0</p> <code>hdsa</code> <code>float</code> <p>Sum of high-danger shots allowed while player is on-ice, e.g., 0</p> <code>ff</code> <code>float</code> <p>Sum of fenwick events generated while player is on-ice, e.g., 1</p> <code>ff_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events generated while player is on-ice, e.g., 0.968</p> <code>hdff</code> <code>float</code> <p>Sum of high-danger fenwick events generated while player is on-ice, e.g., 0</p> <code>fa</code> <code>float</code> <p>Sum of fenwick events allowed while player is on-ice, e.g., 1</p> <code>fa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events allowed while player is on-ice, e.g., 1.034</p> <code>hdfa</code> <code>float</code> <p>Sum of high-danger fenwick events allowed while player is on-ice, e.g., 1</p> <code>cf</code> <code>float</code> <p>Sum of corsi events generated while player is on-ice, e.g., 1</p> <code>cf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events generated while player is on-ice, e.g., 0.970</p> <code>ca</code> <code>float</code> <p>Sum of corsi events allowed while player is on-ice, e.g., 2</p> <code>ca_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events allowed while player is on-ice, e.g., 2.064</p> <code>bsf</code> <code>float</code> <p>Sum of shots taken that were ultimately blocked while player is on-ice, e.g., 0</p> <code>bsa</code> <code>float</code> <p>Sum of shots allowed that were ultimately blocked while player is on-ice, e.g., 1</p> <code>msf</code> <code>float</code> <p>Sum of shots taken that missed net while player is on-ice, e.g., 0</p> <code>hdmsf</code> <code>float</code> <p>Sum of high-danger shots taken that missed net while player is on-ice, e.g., 0</p> <code>msa</code> <code>float</code> <p>Sum of shots allowed that missed net while player is on-ice, e.g., 1</p> <code>hdmsa</code> <code>float</code> <p>Sum of high-danger shots allowed that missed net while player is on-ice, e.g., 1</p> <code>hf</code> <code>float</code> <p>Sum of hits dished out while player is on-ice, e.g., 0</p> <code>ht</code> <code>float</code> <p>Sum of hits taken while player is on-ice, e.g., 0</p> <code>ozf</code> <code>float</code> <p>Sum of offensive zone faceoffs that occur while player is on-ice, e.g., 0</p> <code>nzf</code> <code>float</code> <p>Sum of neutral zone faceoffs that occur while player is on-ice, e.g., 0</p> <code>dzf</code> <code>float</code> <p>Sum of defensive zone faceoffs that occur while player is on-ice, e.g., 1</p> <code>fow</code> <code>float</code> <p>Sum of faceoffs won while player is on-ice, e.g., 1</p> <code>fol</code> <code>float</code> <p>Sum of faceoffs lost while player is on-ice, e.g., 0</p> <code>ozfw</code> <code>float</code> <p>Sum of offensive zone faceoffs won while player is on-ice, e.g., 0</p> <code>ozfl</code> <code>float</code> <p>Sum of offensive zone faceoffs lost while player is on-ice, e.g., 1</p> <code>nzfw</code> <code>float</code> <p>Sum of neutral zone faceoffs won while player is on-ice, e.g., 0</p> <code>nzfl</code> <code>float</code> <p>Sum of neutral zone faceoffs lost while player is on-ice, e.g., 0</p> <code>dzfw</code> <code>float</code> <p>Sum of defensive zone faceoffs won while player is on-ice, e.g., 1</p> <code>dzfl</code> <code>float</code> <p>Sum of defensive zone faceoffs lost while player is on-ice, e.g., 0</p> <code>pent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken while player is on-ice, e.g., 0</p> <code>pend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn while player is on-ice, e.g., 0</p> <p>Examples:</p> <p>Basic play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n&gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats, with no teammates or opposition</p> <pre><code>&gt;&gt;&gt; stats = prep_stats(pbp)\n</code></pre> <p>Period-level stats, grouped by teammates</p> <pre><code>&gt;&gt;&gt; stats = prep_stats(pbp, level = 'period', teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>&gt;&gt;&gt; stats = prep_stats(pbp, level='session', teammates=True, opposition=True)\n</code></pre> Source code in <code>chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_stats(\n    df: pd.DataFrame,\n    level: str = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Prepares an individual and on-ice stats dataframe using EvolvingHockey data,\n    aggregated to desired level. Capable of returning cuts that account for strength state,\n    period, score state, teammates, and opposition.\n\n    Returns a Pandas DataFrame.\n\n    Parameters:\n        df (pd.DataFrame):\n            Dataframe from the prep_pbp function with the default columns argument\n        level (str):\n            Level to aggregate stats, e.g., 'game'\n        score (bool):\n            Whether to aggregate to score state level\n        teammates (bool):\n            Whether to account for teammates when aggregating\n        opposition (bool):\n            Whether to account for opposition when aggregating\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20232024\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2023020015\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2023-10-12\n        player (str):\n            Name of the player, e.g., FILIP.FORSBERG\n        player_id (str):\n            Player EH ID, e.g., FILIP.FORSBERG\n        position (str):\n            Player's position, e.g., L\n        team (str):\n            3-letter abbreviation of the player's team, e.g., NSH\n        opp_team: object\n            3-letter abbreviation of the opposing team, e.g., SEA\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5v5\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 0v0\n        game_period (int):\n            Game period, e.g., 1\n        forwards (str):\n            Names of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        defense (str):\n            Names of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        defense_id (str):\n            EH IDs of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        own_goalie (str):\n            Name of the goalie for the event team, e.g., JUUSE.SAROS\n        own_goalie_id (str):\n            Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS\n        opp_forwards (str):\n            Names of the opponent's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_defense(str):\n            Names of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_defense_id (str):\n            EH IDs of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_goalie (str):\n            Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER\n        opp_goalie_id (str):\n            Identifier for the opposing goalie that can be used to match with Evolving Hockey data,\n            e.g., PHILIPP.GRUBAUER\n        toi (float):\n            Time on-ice in minutes, e.g., 1.616667\n        g (float):\n            Number of individual goals scored, e.g, 0\n        a1 (float):\n            Number of primary assists, e.g, 0\n        a2 (float):\n            Number of secondary assists, e.g, 0\n        isf (float):\n            Number of indiviudal shots registered, e.g., 0\n        iff (float):\n            Number of indiviudal fenwick events registered, e.g., 0\n        icf (float):\n            Number of indiviudal corsi events registered, e.g., 0\n        ixg (float):\n            Sum value of individual predicted goals (xG), e.g., 0\n        gax (float):\n            Sum value of goals scored above expected, e.g., 0\n        ihdg (float):\n            Sum value of individual high-danger goals scored, e.g., 0\n        ihdf (float):\n            Sum value of individual high-danger fenwick events registered, e.g., 0\n        ihdsf (float):\n            Sum value of individual high-danger shots taken, e.g., 0\n        ihdm (float):\n            Sum value of individual high-danger shots missed, e.g., 0\n        imsf (float):\n            Sum value of individual missed shots, 0\n        isb (float):\n            Sum value of shots taken that were ultimately blocked, e.g., 0\n        ibs (float):\n            Sum value of opponent shots taken that the player ultimately blocked, e.g., 0\n        igive (float):\n            Sum of individual giveaways, e.g., 0\n        itake (float):\n            Sum of individual takeaways, e.g., 0\n        ihf (float):\n            Sum of individual hits for, e.g., 0\n        iht (float):\n            Sum of individual hits taken, e.g., 0\n        ifow (float):\n            Sum of individual faceoffs won, e.g., 0\n        ifol (float):\n            Sum of individual faceoffs lost, e.g., 0\n        iozfw (float):\n            Sum of individual faceoffs won in offensive zone, e.g., 0\n        iozfl (float):\n            Sum of individual faceoffs lost in offensive zone, e.g., 0\n        inzfw (float):\n            Sum of individual faceoffs won in neutral zone, e.g., 0\n        inzfl (float):\n            Sum of individual faceoffs lost in neutral zone, e.g., 0\n        idzfw (float):\n            Sum of individual faceoffs won in defensive zone, e.g., 0\n        idzfl (float):\n            Sum of individual faceoffs lost in defensive zone, e.g., 0\n        a1_xg (float):\n            Sum of xG from primary assists, e.g., 0\n        a2_xg (float):\n            Sum of xG from secondary assists, e.g., 0\n        ipent0 (float):\n            Sum of individual 0-minute penalties taken, e.g., 0\n        ipent2 (float):\n            Sum of individual 2-minute penalties taken, e.g., 0\n        ipent4 (float):\n            Sum of individual 4-minute penalties taken, e.g., 0\n        ipent5 (float):\n            Sum of individual 5-minute penalties taken, e.g., 0\n        ipent10 (float):\n            Sum of individual 10-minute penalties taken, e.g., 0\n        ipend0 (float):\n            Sum of individual 0-minute penalties drawn, e.g., 0\n        ipend2 (float):\n            Sum of individual 2-minute penalties drawn, e.g., 0\n        ipend4 (float):\n            Sum of individual 4-minute penalties drawn, e.g., 0\n        ipend5 (float):\n            Sum of individual 5-minute penalties drawn, e.g., 0\n        ipend10 (float):\n            Sum of individual 10-minute penalties drawn, e.g., 0\n        ozs (float):\n            Sum of changes with offensive zone starts, e.g., 0\n        nzs (float):\n            Sum of changes with neutral zone starts, e.g., 0\n        dzs (float):\n            Sum of changes with defensive zone starts, e.g., 1\n        otf (float):\n            Sum of changes on-the-fly, e.g., 0\n        gf (float):\n            Sum of goals scored while player is on-ice, e.g., 0\n        gf_adj (float):\n            Sum of venue- and score-adjusted goals scored while player is on-ice, e.g., 0\n        hdgf (float):\n            Sum of high-danger goals scored while player is on-ice, e.g., 0\n        ga (float):\n            Sum of goals allowed while player is on-ice, e.g., 0\n        ga_adj (float):\n            Sum of venue- and score-adjusted goals allowed while player is on-ice, e.g., 0\n        hdga (float):\n            Sum of high-danger goals allowed while player is on-ice, e.g., 0\n        xgf (float):\n            Sum of expected goals generated while player is on-ice, e.g., 0.017266\n        xgf_adj (float):\n            Sum of venue- and score-adjusted expected goals generated while player is on-ice, e.g., 0.016472\n        xga (float):\n            Sum of expected goals allowed while player is on-ice, e.g., 0.123475\n        xga_adj (float):\n            Sum of venue- and score-adjusted expected goals allowed while player is on-ice, e.g., 0.129772\n        sf (float):\n            Sum of shots taken while player is on-ice, e.g., 1\n        sf_adj (float):\n            Sum of venue- and score-adjusted shots taken while player is on-ice, e.g., .972\n        hdsf (float):\n            Sum of high-danger shots taken while player is on-ice, e.g., 0\n        sa (float):\n            Sum of shots allowed while player is on-ice, e.g., 0\n        sa_adj (float):\n            Sum of venue- and score-adjusted shots allowed while player is on-ice, e.g., 0\n        hdsa (float):\n            Sum of high-danger shots allowed while player is on-ice, e.g., 0\n        ff (float):\n            Sum of fenwick events generated while player is on-ice, e.g., 1\n        ff_adj (float):\n            Sum of venue- and score-adjusted fenwick events generated while player is on-ice, e.g., 0.968\n        hdff (float):\n            Sum of high-danger fenwick events generated while player is on-ice, e.g., 0\n        fa (float):\n            Sum of fenwick events allowed while player is on-ice, e.g., 1\n        fa_adj (float):\n            Sum of venue- and score-adjusted fenwick events allowed while player is on-ice, e.g., 1.034\n        hdfa (float):\n            Sum of high-danger fenwick events allowed while player is on-ice, e.g., 1\n        cf (float):\n            Sum of corsi events generated while player is on-ice, e.g., 1\n        cf_adj (float):\n            Sum of venue- and score-adjusted corsi events generated while player is on-ice, e.g., 0.970\n        ca (float):\n            Sum of corsi events allowed while player is on-ice, e.g., 2\n        ca_adj (float):\n            Sum of venue- and score-adjusted corsi events allowed while player is on-ice, e.g., 2.064\n        bsf (float):\n            Sum of shots taken that were ultimately blocked while player is on-ice, e.g., 0\n        bsa (float):\n            Sum of shots allowed that were ultimately blocked while player is on-ice, e.g., 1\n        msf (float):\n            Sum of shots taken that missed net while player is on-ice, e.g., 0\n        hdmsf (float):\n            Sum of high-danger shots taken that missed net while player is on-ice, e.g., 0\n        msa (float):\n            Sum of shots allowed that missed net while player is on-ice, e.g., 1\n        hdmsa (float):\n            Sum of high-danger shots allowed that missed net while player is on-ice, e.g., 1\n        hf (float):\n            Sum of hits dished out while player is on-ice, e.g., 0\n        ht (float):\n            Sum of hits taken while player is on-ice, e.g., 0\n        ozf (float):\n            Sum of offensive zone faceoffs that occur while player is on-ice, e.g., 0\n        nzf (float):\n            Sum of neutral zone faceoffs that occur while player is on-ice, e.g., 0\n        dzf (float):\n            Sum of defensive zone faceoffs that occur while player is on-ice, e.g., 1\n        fow (float):\n            Sum of faceoffs won while player is on-ice, e.g., 1\n        fol (float):\n            Sum of faceoffs lost while player is on-ice, e.g., 0\n        ozfw (float):\n            Sum of offensive zone faceoffs won while player is on-ice, e.g., 0\n        ozfl (float):\n            Sum of offensive zone faceoffs lost while player is on-ice, e.g., 1\n        nzfw (float):\n            Sum of neutral zone faceoffs won while player is on-ice, e.g., 0\n        nzfl (float):\n            Sum of neutral zone faceoffs lost while player is on-ice, e.g., 0\n        dzfw (float):\n            Sum of defensive zone faceoffs won while player is on-ice, e.g., 1\n        dzfl (float):\n            Sum of defensive zone faceoffs lost while player is on-ice, e.g., 0\n        pent0 (float):\n            Sum of individual 0-minute penalties taken while player is on-ice, e.g., 0\n        pent2 (float):\n            Sum of individual 2-minute penalties taken while player is on-ice, e.g., 0\n        pent4 (float):\n            Sum of individual 4-minute penalties taken while player is on-ice, e.g., 0\n        pent5 (float):\n            Sum of individual 5-minute penalties taken while player is on-ice, e.g., 0\n        pent10 (float):\n            Sum of individual 10-minute penalties taken while player is on-ice, e.g., 0\n        pend0 (float):\n            Sum of individual 0-minute penalties drawn while player is on-ice, e.g., 0\n        pend2 (float):\n            Sum of individual 2-minute penalties drawn while player is on-ice, e.g., 0\n        pend4 (float):\n            Sum of individual 4-minute penalties drawn while player is on-ice, e.g., 0\n        pend5 (float):\n            Sum of individual 5-minute penalties drawn while player is on-ice, e.g., 0\n        pend10 (float):\n            Sum of individual 10-minute penalties drawn while player is on-ice, e.g., 0\n\n    Examples:\n        Basic play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n        &gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n        Basic game-level stats, with no teammates or opposition\n        &gt;&gt;&gt; stats = prep_stats(pbp)\n\n        Period-level stats, grouped by teammates\n        &gt;&gt;&gt; stats = prep_stats(pbp, level = 'period', teammates=True)\n\n        Session-level (e.g., regular seasion) stats, grouped by teammates and opposition\n        &gt;&gt;&gt; stats = prep_stats(pbp, level='session', teammates=True, opposition=True)\n\n    \"\"\"\n\n    with Progress(\n        TextColumn(\"[progress.description]{task.description}\"),\n        SpinnerColumn(),\n        BarColumn(),\n        TaskProgressColumn(),\n        TextColumn(\"\u2022\"),\n        TimeElapsedColumn(),\n    ) as progress:\n        pbar_message = \"Prepping stats data...\"\n\n        stats_task = progress.add_task(pbar_message, total=1)\n\n        ind = prep_ind(df, level, score, teammates, opposition)\n\n        oi = prep_oi(df, level, score, teammates, opposition)\n\n        zones = prep_zones(df, level, score, teammates, opposition)\n\n        merge_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"player\",\n            \"player_id\",\n            \"position\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        merge_cols = [\n            x\n            for x in merge_cols\n            if x in ind.columns and x in oi.columns and x in zones.columns\n        ]\n\n        stats = oi.merge(\n            ind, how=\"left\", left_on=merge_cols, right_on=merge_cols\n        ).fillna(0)\n\n        stats = stats.merge(\n            zones, how=\"left\", left_on=merge_cols, right_on=merge_cols\n        ).fillna(0)\n\n        stats = stats.loc[stats.toi &gt; 0].reset_index(drop=True).copy()\n\n        stats_list = [\n            \"toi\",\n            \"g\",\n            \"a1\",\n            \"a2\",\n            \"isf\",\n            \"iff\",\n            \"icf\",\n            \"ixg\",\n            \"gax\",\n            \"ihdg\",\n            \"ihdsf\",\n            \"ihdm\",\n            \"ihdf\",\n            \"imsf\",\n            \"isb\",\n            \"ibs\",\n            \"igive\",\n            \"itake\",\n            \"ihf\",\n            \"iht\",\n            \"ifow\",\n            \"ifol\",\n            \"iozfw\",\n            \"iozfl\",\n            \"inzfw\",\n            \"inzfl\",\n            \"idzfw\",\n            \"idzfl\",\n            \"a1_xg\",\n            \"a2_xg\",\n            \"ipent0\",\n            \"ipent2\",\n            \"ipent4\",\n            \"ipent5\",\n            \"ipent10\",\n            \"ipend0\",\n            \"ipend2\",\n            \"ipend4\",\n            \"ipend5\",\n            \"ipend10\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"cf\",\n            \"cf_adj\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"bsf\",\n            \"msf\",\n            \"hdmsf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"ca\",\n            \"ca_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"bsa\",\n            \"msa\",\n            \"hdmsa\",\n            \"hf\",\n            \"ht\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n            \"ozs\",\n            \"nzs\",\n            \"dzs\",\n            \"otf\",\n        ]\n\n        for stat in stats_list:\n            if stat not in stats.columns:\n                stats[stat] = 0\n\n            else:\n                stats[stat] = pd.to_numeric(stats[stat].fillna(0))\n\n        columns = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"player\",\n            \"player_id\",\n            \"position\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n            \"toi\",\n            \"g\",\n            \"a1\",\n            \"a2\",\n            \"isf\",\n            \"iff\",\n            \"icf\",\n            \"ixg\",\n            \"gax\",\n            \"ihdg\",\n            \"ihdf\",\n            \"ihdsf\",\n            \"ihdm\",\n            \"imsf\",\n            \"isb\",\n            \"ibs\",\n            \"igive\",\n            \"itake\",\n            \"ihf\",\n            \"iht\",\n            \"ifow\",\n            \"ifol\",\n            \"iozfw\",\n            \"iozfl\",\n            \"inzfw\",\n            \"inzfl\",\n            \"idzfw\",\n            \"idzfl\",\n            \"a1_xg\",\n            \"a2_xg\",\n            \"ipent0\",\n            \"ipent2\",\n            \"ipent4\",\n            \"ipent5\",\n            \"ipent10\",\n            \"ipend0\",\n            \"ipend2\",\n            \"ipend4\",\n            \"ipend5\",\n            \"ipend10\",\n            \"ozs\",\n            \"nzs\",\n            \"dzs\",\n            \"otf\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"bsf\",\n            \"bsa\",\n            \"msf\",\n            \"hdmsf\",\n            \"msa\",\n            \"hdmsa\",\n            \"hf\",\n            \"ht\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        columns = [x for x in columns if x in stats]\n\n        stats = stats[columns]\n\n        pbar_message = \"Finished prepping stats data\"\n\n        progress.update(stats_task, description=pbar_message, advance=1, refresh=True)\n\n    return stats\n</code></pre>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_lines","title":"prep_lines","text":"<pre><code>prep_lines(data, position, level='game', score=False, teammates=False, opposition=False)\n</code></pre> <p>Prepares a line stats dataframe using EvolvingHockey data, aggregated to desired level. Capable of returning cuts that account for strength state, period, score state, teammates, and opposition.</p> <p>Returns a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dataframe from the prep_pbp function with the default columns argument</p> required <code>position</code> <code>str</code> <p>Position to aggregate, forwards or defense, e.g., 'f'</p> required <code>level</code> <code>str</code> <p>Level to aggregate stats, e.g., 'game'</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Whether to aggregate to score state level</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Whether to account for teammates when aggregating</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Whether to account for opposition when aggregating</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20232024</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2023020015</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2023-10-12</p> <code>team</code> <code>str</code> <p>3-letter abbreviation of the line's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>3-letter abbreviation of the opposing team, e.g., SEA</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5v5</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 0v0</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 1</p> <code>forwards</code> <code>str</code> <p>Names of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>defense</code> <code>str</code> <p>Names of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>defense_id</code> <code>str</code> <p>EH IDs of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>own_goalie</code> <code>str</code> <p>Name of the goalie for the event team, e.g., JUUSE.SAROS</p> <code>own_goalie_id</code> <code>str</code> <p>Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS</p> <code>opp_forwards</code> <code>str</code> <p>Names of the opponent's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_defense</code> <code>str</code> <p>Names of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_defense_id</code> <code>str</code> <p>EH IDs of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_goalie</code> <code>str</code> <p>Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER</p> <code>opp_goalie_id</code> <code>str</code> <p>Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., PHILIPP.GRUBAUER</p> <code>toi</code> <code>float</code> <p>Time on-ice in minutes, e.g., 1.616667</p> <code>gf</code> <code>float</code> <p>Sum of goals scored while line is on-ice, e.g., 0</p> <code>gf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals scored while line is on-ice, e.g., 0</p> <code>hdgf</code> <code>float</code> <p>Sum of high-danger goals scored while line is on-ice, e.g., 0</p> <code>ga</code> <code>float</code> <p>Sum of goals allowed while line is on-ice, e.g., 0</p> <code>ga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals allowed while line is on-ice, e.g., 0</p> <code>hdga</code> <code>float</code> <p>Sum of high-danger goals allowed while line is on-ice, e.g., 0</p> <code>xgf</code> <code>float</code> <p>Sum of expected goals generated while line is on-ice, e.g., 0.017266</p> <code>xgf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals generated while line is on-ice, e.g., 0.016472</p> <code>xga</code> <code>float</code> <p>Sum of expected goals allowed while line is on-ice, e.g., 0.123475</p> <code>xga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals allowed while line is on-ice, e.g., 0.129772</p> <code>sf</code> <code>float</code> <p>Sum of shots taken while line is on-ice, e.g., 1</p> <code>sf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots taken while line is on-ice, e.g., .972</p> <code>hdsf</code> <code>float</code> <p>Sum of high-danger shots taken while line is on-ice, e.g., 0</p> <code>sa</code> <code>float</code> <p>Sum of shots allowed while line is on-ice, e.g., 0</p> <code>sa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots allowed while line is on-ice, e.g., 0</p> <code>hdsa</code> <code>float</code> <p>Sum of high-danger shots allowed while line is on-ice, e.g., 0</p> <code>ff</code> <code>float</code> <p>Sum of fenwick events generated while line is on-ice, e.g., 1</p> <code>ff_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events generated while line is on-ice, e.g., 0.968</p> <code>hdff</code> <code>float</code> <p>Sum of high-danger fenwick events generated while line is on-ice, e.g., 0</p> <code>fa</code> <code>float</code> <p>Sum of fenwick events allowed while line is on-ice, e.g., 1</p> <code>fa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events allowed while line is on-ice, e.g., 1.034</p> <code>hdfa</code> <code>float</code> <p>Sum of high-danger fenwick events allowed while line is on-ice, e.g., 1</p> <code>cf</code> <code>float</code> <p>Sum of corsi events generated while line is on-ice, e.g., 1</p> <code>cf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events generated while line is on-ice, e.g., 0.970</p> <code>ca</code> <code>float</code> <p>Sum of corsi events allowed while line is on-ice, e.g., 2</p> <code>ca_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events allowed while line is on-ice, e.g., 2.064</p> <code>bsf</code> <code>float</code> <p>Sum of shots taken that were ultimately blocked while line is on-ice, e.g., 0</p> <code>bsa</code> <code>float</code> <p>Sum of shots allowed that were ultimately blocked while line is on-ice, e.g., 1</p> <code>msf</code> <code>float</code> <p>Sum of shots taken that missed net while line is on-ice, e.g., 0</p> <code>hdmsf</code> <code>float</code> <p>Sum of high-danger shots taken that missed net while line is on-ice, e.g., 0</p> <code>msa</code> <code>float</code> <p>Sum of shots allowed that missed net while line is on-ice, e.g., 1</p> <code>hdmsa</code> <code>float</code> <p>Sum of high-danger shots allowed that missed net while line is on-ice, e.g., 1</p> <code>hf</code> <code>float</code> <p>Sum of hits dished out while line is on-ice, e.g., 0</p> <code>ht</code> <code>float</code> <p>Sum of hits taken while line is on-ice, e.g., 0</p> <code>ozf</code> <code>float</code> <p>Sum of offensive zone faceoffs that occur while line is on-ice, e.g., 0</p> <code>nzf</code> <code>float</code> <p>Sum of neutral zone faceoffs that occur while line is on-ice, e.g., 0</p> <code>dzf</code> <code>float</code> <p>Sum of defensive zone faceoffs that occur while line is on-ice, e.g., 1</p> <code>fow</code> <code>float</code> <p>Sum of faceoffs won while line is on-ice, e.g., 1</p> <code>fol</code> <code>float</code> <p>Sum of faceoffs lost while line is on-ice, e.g., 0</p> <code>ozfw</code> <code>float</code> <p>Sum of offensive zone faceoffs won while line is on-ice, e.g., 0</p> <code>ozfl</code> <code>float</code> <p>Sum of offensive zone faceoffs lost while line is on-ice, e.g., 1</p> <code>nzfw</code> <code>float</code> <p>Sum of neutral zone faceoffs won while line is on-ice, e.g., 0</p> <code>nzfl</code> <code>float</code> <p>Sum of neutral zone faceoffs lost while line is on-ice, e.g., 0</p> <code>dzfw</code> <code>float</code> <p>Sum of defensive zone faceoffs won while line is on-ice, e.g., 1</p> <code>dzfl</code> <code>float</code> <p>Sum of defensive zone faceoffs lost while line is on-ice, e.g., 0</p> <code>pent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken while line is on-ice, e.g., 0</p> <code>pend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn while line is on-ice, e.g., 0</p> <p>Examples:</p> <p>Basic play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n&gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for forwards, with no teammates or opposition</p> <pre><code>&gt;&gt;&gt; lines = prep_lines(pbp, position='f')\n</code></pre> <p>Period-level stats for defense, grouped by teammates</p> <pre><code>&gt;&gt;&gt; lines = prep_lines(pbp, position='d', level='period', teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>&gt;&gt;&gt; lines = prep_lines(pbp, position='f', level='session', teammates=True, opposition=True)\n</code></pre> Source code in <code>chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_lines(\n    data: pd.DataFrame,\n    position: str,\n    level: str = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n):\n    \"\"\"\n    Prepares a line stats dataframe using EvolvingHockey data,\n    aggregated to desired level. Capable of returning cuts that account for strength state,\n    period, score state, teammates, and opposition.\n\n    Returns a Pandas DataFrame.\n\n    Parameters:\n        data (pd.DataFrame):\n            Dataframe from the prep_pbp function with the default columns argument\n        position (str):\n            Position to aggregate, forwards or defense, e.g., 'f'\n        level (str):\n            Level to aggregate stats, e.g., 'game'\n        score (bool):\n            Whether to aggregate to score state level\n        teammates (bool):\n            Whether to account for teammates when aggregating\n        opposition (bool):\n            Whether to account for opposition when aggregating\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20232024\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2023020015\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2023-10-12\n        team (str):\n            3-letter abbreviation of the line's team, e.g., NSH\n        opp_team (str):\n            3-letter abbreviation of the opposing team, e.g., SEA\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5v5\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 0v0\n        game_period (int):\n            Game period, e.g., 1\n        forwards (str):\n            Names of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        defense (str):\n            Names of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        defense_id (str):\n            EH IDs of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        own_goalie (str):\n            Name of the goalie for the event team, e.g., JUUSE.SAROS\n        own_goalie_id (str):\n            Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS\n        opp_forwards (str):\n            Names of the opponent's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_defense (str):\n            Names of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_defense_id (str):\n            EH IDs of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_goalie (str):\n            Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER\n        opp_goalie_id (str):\n            Identifier for the opposing goalie that can be used to match with Evolving Hockey data,\n            e.g., PHILIPP.GRUBAUER\n        toi (float):\n            Time on-ice in minutes, e.g., 1.616667\n        gf (float):\n            Sum of goals scored while line is on-ice, e.g., 0\n        gf_adj (float):\n            Sum of venue- and score-adjusted goals scored while line is on-ice, e.g., 0\n        hdgf (float):\n            Sum of high-danger goals scored while line is on-ice, e.g., 0\n        ga (float):\n            Sum of goals allowed while line is on-ice, e.g., 0\n        ga_adj (float):\n            Sum of venue- and score-adjusted goals allowed while line is on-ice, e.g., 0\n        hdga (float):\n            Sum of high-danger goals allowed while line is on-ice, e.g., 0\n        xgf (float):\n            Sum of expected goals generated while line is on-ice, e.g., 0.017266\n        xgf_adj (float):\n            Sum of venue- and score-adjusted expected goals generated while line is on-ice, e.g., 0.016472\n        xga (float):\n            Sum of expected goals allowed while line is on-ice, e.g., 0.123475\n        xga_adj (float):\n            Sum of venue- and score-adjusted expected goals allowed while line is on-ice, e.g., 0.129772\n        sf (float):\n            Sum of shots taken while line is on-ice, e.g., 1\n        sf_adj (float):\n            Sum of venue- and score-adjusted shots taken while line is on-ice, e.g., .972\n        hdsf (float):\n            Sum of high-danger shots taken while line is on-ice, e.g., 0\n        sa (float):\n            Sum of shots allowed while line is on-ice, e.g., 0\n        sa_adj (float):\n            Sum of venue- and score-adjusted shots allowed while line is on-ice, e.g., 0\n        hdsa (float):\n            Sum of high-danger shots allowed while line is on-ice, e.g., 0\n        ff (float):\n            Sum of fenwick events generated while line is on-ice, e.g., 1\n        ff_adj (float):\n            Sum of venue- and score-adjusted fenwick events generated while line is on-ice, e.g., 0.968\n        hdff (float):\n            Sum of high-danger fenwick events generated while line is on-ice, e.g., 0\n        fa (float):\n            Sum of fenwick events allowed while line is on-ice, e.g., 1\n        fa_adj (float):\n            Sum of venue- and score-adjusted fenwick events allowed while line is on-ice, e.g., 1.034\n        hdfa (float):\n            Sum of high-danger fenwick events allowed while line is on-ice, e.g., 1\n        cf (float):\n            Sum of corsi events generated while line is on-ice, e.g., 1\n        cf_adj (float):\n            Sum of venue- and score-adjusted corsi events generated while line is on-ice, e.g., 0.970\n        ca (float):\n            Sum of corsi events allowed while line is on-ice, e.g., 2\n        ca_adj (float):\n            Sum of venue- and score-adjusted corsi events allowed while line is on-ice, e.g., 2.064\n        bsf (float):\n            Sum of shots taken that were ultimately blocked while line is on-ice, e.g., 0\n        bsa (float):\n            Sum of shots allowed that were ultimately blocked while line is on-ice, e.g., 1\n        msf (float):\n            Sum of shots taken that missed net while line is on-ice, e.g., 0\n        hdmsf (float):\n            Sum of high-danger shots taken that missed net while line is on-ice, e.g., 0\n        msa (float):\n            Sum of shots allowed that missed net while line is on-ice, e.g., 1\n        hdmsa (float):\n            Sum of high-danger shots allowed that missed net while line is on-ice, e.g., 1\n        hf (float):\n            Sum of hits dished out while line is on-ice, e.g., 0\n        ht (float):\n            Sum of hits taken while line is on-ice, e.g., 0\n        ozf (float):\n            Sum of offensive zone faceoffs that occur while line is on-ice, e.g., 0\n        nzf (float):\n            Sum of neutral zone faceoffs that occur while line is on-ice, e.g., 0\n        dzf (float):\n            Sum of defensive zone faceoffs that occur while line is on-ice, e.g., 1\n        fow (float):\n            Sum of faceoffs won while line is on-ice, e.g., 1\n        fol (float):\n            Sum of faceoffs lost while line is on-ice, e.g., 0\n        ozfw (float):\n            Sum of offensive zone faceoffs won while line is on-ice, e.g., 0\n        ozfl (float):\n            Sum of offensive zone faceoffs lost while line is on-ice, e.g., 1\n        nzfw (float):\n            Sum of neutral zone faceoffs won while line is on-ice, e.g., 0\n        nzfl (float):\n            Sum of neutral zone faceoffs lost while line is on-ice, e.g., 0\n        dzfw (float):\n            Sum of defensive zone faceoffs won while line is on-ice, e.g., 1\n        dzfl (float):\n            Sum of defensive zone faceoffs lost while line is on-ice, e.g., 0\n        pent0 (float):\n            Sum of individual 0-minute penalties taken while line is on-ice, e.g., 0\n        pent2 (float):\n            Sum of individual 2-minute penalties taken while line is on-ice, e.g., 0\n        pent4 (float):\n            Sum of individual 4-minute penalties taken while line is on-ice, e.g., 0\n        pent5 (float):\n            Sum of individual 5-minute penalties taken while line is on-ice, e.g., 0\n        pent10 (float):\n            Sum of individual 10-minute penalties taken while line is on-ice, e.g., 0\n        pend0 (float):\n            Sum of individual 0-minute penalties drawn while line is on-ice, e.g., 0\n        pend2 (float):\n            Sum of individual 2-minute penalties drawn while line is on-ice, e.g., 0\n        pend4 (float):\n            Sum of individual 4-minute penalties drawn while line is on-ice, e.g., 0\n        pend5 (float):\n            Sum of individual 5-minute penalties drawn while line is on-ice, e.g., 0\n        pend10 (float):\n            Sum of individual 10-minute penalties drawn while line is on-ice, e.g., 0\n\n    Examples:\n        Basic play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n        &gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n        Basic game-level stats for forwards, with no teammates or opposition\n        &gt;&gt;&gt; lines = prep_lines(pbp, position='f')\n\n        Period-level stats for defense, grouped by teammates\n        &gt;&gt;&gt; lines = prep_lines(pbp, position='d', level='period', teammates=True)\n\n        Session-level (e.g., regular seasion) stats, grouped by teammates and opposition\n        &gt;&gt;&gt; lines = prep_lines(pbp, position='f', level='session', teammates=True, opposition=True)\n\n    \"\"\"\n\n    with Progress(\n        TextColumn(\"[progress.description]{task.description}\"),\n        SpinnerColumn(),\n        BarColumn(),\n        TaskProgressColumn(),\n        TextColumn(\"\u2022\"),\n        TimeElapsedColumn(),\n    ) as progress:\n        pbar_message = \"Prepping lines data...\"\n\n        lines_task = progress.add_task(pbar_message, total=1)\n\n        # Creating the \"for\" dataframe\n\n        # Accounting for desired level of aggregation\n\n        if level == \"session\" or level == \"season\":\n            group_base = [\"season\", \"session\", \"event_team\", \"strength_state\"]\n\n        if level == \"game\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"strength_state\",\n            ]\n\n        if level == \"period\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"game_period\",\n                \"strength_state\",\n            ]\n\n        # Accounting for score state\n\n        if score is True:\n            group_base = group_base + [\"score_state\"]\n\n        # Accounting for desired position\n\n        group_list = group_base + [f\"event_on_{position}\", f\"event_on_{position}_id\"]\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position.lower() in [\"f\", \"for\", \"fwd\", \"fwds\", \"forward\", \"forwards\"]:\n                group_list = group_list + [\n                    \"event_on_d\",\n                    \"event_on_d_id\",\n                    \"event_on_g\",\n                    \"event_on_g_id\",\n                ]\n\n            if position.lower() in [\n                \"d\",\n                \"def\",\n                \"defense\",\n            ]:\n                group_list = group_list + [\n                    \"event_on_f\",\n                    \"event_on_f_id\",\n                    \"event_on_g\",\n                    \"event_on_g_id\",\n                ]\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list = group_list + [\n                \"opp_on_f\",\n                \"opp_on_f_id\",\n                \"opp_on_d\",\n                \"opp_on_d_id\",\n                \"opp_on_g\",\n                \"opp_on_g_id\",\n            ]\n\n            if \"opp_team\" not in group_list:\n                group_list.append(\"opp_team\")\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"block\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"give\",\n            \"take\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n        # Aggregating the \"for\" dataframe\n\n        lines_f = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"cf\",\n            \"cf_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"msf\",\n            \"bsf\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"toi\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"hf\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n        ]\n\n        columns = dict(zip(stats, columns))\n\n        # Accounting for positions\n\n        columns.update(\n            {\n                \"event_on_f\": \"forwards\",\n                \"event_on_f_id\": \"forwards_id\",\n                \"event_team\": \"team\",\n                \"event_on_d\": \"defense\",\n                \"event_on_d_id\": \"defense_id\",\n                \"event_on_g\": \"own_goalie\",\n                \"event_on_g_id\": \"own_goalie_id\",\n                \"opp_on_f\": \"opp_forwards\",\n                \"opp_on_f_id\": \"opp_forwards_id\",\n                \"opp_on_d\": \"opp_defense\",\n                \"opp_on_d_id\": \"opp_defense_id\",\n                \"opp_on_g\": \"opp_goalie\",\n                \"opp_on_g_id\": \"opp_goalie_id\",\n            }\n        )\n\n        # columns = {k: v for k, v in columns.items() if k in lines_f.columns}\n\n        lines_f = lines_f.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_f]\n\n        for col in cols:\n            lines_f[col] = lines_f[col].fillna(\"EMPTY\")\n\n        # Creating the against dataframe\n\n        # Accounting for desired level of aggregation\n\n        if level == \"session\" or level == \"season\":\n            group_base = [\"season\", \"session\", \"opp_team\", \"opp_strength_state\"]\n\n        if level == \"game\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"opp_strength_state\",\n            ]\n\n        if level == \"period\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"game_period\",\n                \"opp_strength_state\",\n            ]\n\n        # Accounting for score state\n\n        if score is True:\n            group_base = group_base + [\"opp_score_state\"]\n\n        # Accounting for desired position\n\n        group_list = group_base + [f\"opp_on_{position}\", f\"opp_on_{position}_id\"]\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position.lower() in [\"f\", \"for\", \"fwd\", \"fwds\", \"forward\", \"forwards\"]:\n                group_list = group_list + [\n                    \"opp_on_d\",\n                    \"opp_on_d_id\",\n                    \"opp_on_g\",\n                    \"opp_on_g_id\",\n                ]\n\n            if position.lower() in [\n                \"d\",\n                \"def\",\n                \"defense\",\n            ]:\n                group_list = group_list + [\n                    \"opp_on_f\",\n                    \"opp_on_f_id\",\n                    \"opp_on_g\",\n                    \"opp_on_g_id\",\n                ]\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list = group_list + [\n                \"event_on_f\",\n                \"event_on_f_id\",\n                \"event_on_d\",\n                \"event_on_d_id\",\n                \"event_on_g\",\n                \"event_on_g_id\",\n            ]\n\n            if \"event_team\" not in group_list:\n                group_list.append(\"event_team\")\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"block\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n        # Aggregating \"against\" dataframe\n\n        lines_a = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xga\",\n            \"xga_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"msa\",\n            \"bsa\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"toi\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        columns = dict(zip(stats, columns))\n\n        # Accounting for positions\n\n        columns.update(\n            {\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_on_f\": \"forwards\",\n                \"opp_on_f_id\": \"forwards_id\",\n                \"opp_strength_state\": \"strength_state\",\n                \"opp_on_d\": \"defense\",\n                \"opp_on_d_id\": \"defense_id\",\n                \"event_on_f\": \"opp_forwards\",\n                \"event_on_f_id\": \"opp_forwards_id\",\n                \"event_on_d\": \"opp_defense\",\n                \"event_on_d_id\": \"opp_defense_id\",\n                \"opp_score_state\": \"score_state\",\n                \"event_on_g\": \"opp_goalie\",\n                \"event_on_g_id\": \"opp_goalie_id\",\n                \"opp_on_g\": \"own_goalie\",\n                \"opp_on_g_id\": \"own_goalie_id\",\n            }\n        )\n\n        # columns = {k: v for k, v in columns.items() if k in lines_a.columns}\n\n        lines_a = lines_a.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_a]\n\n        for col in cols:\n            lines_a[col] = lines_a[col].fillna(\"EMPTY\")\n\n        # Merging the \"for\" and \"against\" dataframes\n\n        if level == \"session\" or level == \"season\":\n            if position.lower() in [\"f\", \"for\", \"fwd\", \"fwds\", \"forward\", \"forwards\"]:\n                merge_list = [\n                    \"season\",\n                    \"session\",\n                    \"team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_id\",\n                ]\n\n            if position.lower() in [\n                \"d\",\n                \"def\",\n                \"defense\",\n            ]:\n                merge_list = [\n                    \"season\",\n                    \"session\",\n                    \"team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_id\",\n                ]\n\n        if level == \"game\":\n            if position.lower() in [\"f\", \"for\", \"fwd\", \"fwds\", \"forward\", \"forwards\"]:\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_id\",\n                ]\n\n            if position.lower() in [\n                \"d\",\n                \"def\",\n                \"defense\",\n            ]:\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_id\",\n                ]\n\n        if level == \"period\":\n            if position.lower() in [\"f\", \"for\", \"fwd\", \"fwds\", \"forward\", \"forwards\"]:\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_id\",\n                    \"game_period\",\n                ]\n\n            if position.lower() in [\n                \"d\",\n                \"def\",\n                \"defense\",\n            ]:\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_id\",\n                    \"game_period\",\n                ]\n\n        if score is True:\n            merge_list.append(\"score_state\")\n\n        if teammates is True:\n            if position == \"f\":\n                merge_list = merge_list + [\n                    \"defense\",\n                    \"defense_id\",\n                    \"own_goalie\",\n                    \"own_goalie_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = merge_list + [\n                    \"forwards\",\n                    \"forwards_id\",\n                    \"own_goalie\",\n                    \"own_goalie_id\",\n                ]\n\n        if opposition is True:\n            merge_list = merge_list + [\n                \"opp_forwards\",\n                \"opp_forwards_id\",\n                \"opp_defense\",\n                \"opp_defense_id\",\n                \"opp_goalie\",\n                \"opp_goalie_id\",\n            ]\n\n            if \"opp_team\" not in merge_list:\n                merge_list.insert(3, \"opp_team\")\n\n        lines = lines_f.merge(\n            lines_a, how=\"outer\", on=merge_list, suffixes=(\"_x\", \"\")\n        ).fillna(0)\n\n        cols = [\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        cols = [x for x in cols if x in lines]\n\n        for col in cols:\n            lines[col] = lines[col].fillna(\"EMPTY\")\n\n        lines.toi = (lines.toi_x + lines.toi) / 60\n\n        lines = lines.drop(columns=\"toi_x\")\n\n        lines[\"ozf\"] = lines.ozfw + lines.ozfl\n\n        lines[\"nzf\"] = lines.nzfw + lines.nzfl\n\n        lines[\"dzf\"] = lines.dzfw + lines.dzfl\n\n        stats = [\n            \"toi\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"bsf\",\n            \"bsa\",\n            \"msf\",\n            \"hdmsf\",\n            \"msa\",\n            \"hdmsa\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"hf\",\n            \"ht\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        for stat in stats:\n            if stat not in lines.columns:\n                lines[stat] = 0\n\n            else:\n                lines[stat] = pd.to_numeric(lines[stat].fillna(0))\n\n        cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n            \"toi\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"bsf\",\n            \"bsa\",\n            \"msf\",\n            \"hdmsf\",\n            \"msa\",\n            \"hdmsa\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"hf\",\n            \"ht\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        cols = [x for x in cols if x in lines.columns]\n\n        lines = lines[cols]\n\n        lines = lines.loc[lines.toi &gt; 0].reset_index(drop=True).copy()\n\n        pbar_message = \"Finished prepping lines data\"\n\n        progress.update(lines_task, description=pbar_message, advance=1, refresh=True)\n\n    return lines\n</code></pre>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_team","title":"prep_team","text":"<pre><code>prep_team(data, level='game', strengths=True, score=False)\n</code></pre> <p>Prepares a team stats dataframe using EvolvingHockey data, aggregated to desired level. Capable of returning cuts that account for strength state, period, and score state.</p> <p>Returns a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dataframe from the prep_pbp function with the default columns argument</p> required <code>level</code> <code>str</code> <p>Level to aggregate stats, e.g., 'game'</p> <code>'game'</code> <code>strengths</code> <code>bool</code> <p>Whether to aggregate to strength state level, e.g., True</p> <code>True</code> <code>score</code> <code>bool</code> <p>Whether to aggregate to score state level</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20232024</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2023020044</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2023-10-17</p> <code>team</code> <code>str</code> <p>3-letter abbreviation of the team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>3-letter abbreviation of the opposing team, e.g., EDM</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5v5</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 1v6</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 3</p> <code>toi</code> <code>float</code> <p>Time on-ice in minutes, e.g., 18</p> <code>gf</code> <code>float</code> <p>Sum of goals scored, e.g., 0</p> <code>gf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals scored, e.g., 0</p> <code>hdgf</code> <code>float</code> <p>Sum of high-danger goals scored, e.g., 0</p> <code>ga</code> <code>float</code> <p>Sum of goals allowed, e.g., 0</p> <code>ga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals allowed, e.g., 0</p> <code>hdga</code> <code>float</code> <p>Sum of high-danger goals allowed, e.g., 0</p> <code>xgf</code> <code>float</code> <p>Sum of expected goals generated, e.g., 0.957070</p> <code>xgf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals generated, e.g., 0.883376</p> <code>xga</code> <code>float</code> <p>Sum of expected goals allowed, e.g., 0.535971</p> <code>xga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals allowed, e.g., 0.584744</p> <code>sf</code> <code>float</code> <p>Sum of shots taken, e.g., 10</p> <code>sf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots taken, e.g., 8.620</p> <code>hdsf</code> <code>float</code> <p>Sum of high-danger shots taken, e.g., 2</p> <code>sa</code> <code>float</code> <p>Sum of shots allowed, e.g., 4</p> <code>sa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots allowed, e.g., 4.764</p> <code>hdsa</code> <code>float</code> <p>Sum of high-danger shots allowed, e.g., 0</p> <code>ff</code> <code>float</code> <p>Sum of fenwick events generated, e.g., 14</p> <code>ff_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events generated, e.g., 12.026</p> <code>hdff</code> <code>float</code> <p>Sum of high-danger fenwick events generated, e.g., 2</p> <code>fa</code> <code>float</code> <p>Sum of fenwick events allowed, e.g., 8</p> <code>fa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events allowed, e.g., 9.576</p> <code>hdfa</code> <code>float</code> <p>Sum of high-danger fenwick events allowed, e.g., 1</p> <code>cf</code> <code>float</code> <p>Sum of corsi events generated, e.g., 16</p> <code>cf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events generated, e.g., 13.488</p> <code>ca</code> <code>float</code> <p>Sum of corsi events allowed, e.g., 12.0</p> <code>ca_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events allowed, e.g., 14.760</p> <code>bsf</code> <code>float</code> <p>Sum of shots taken that were ultimately blocked, e.g., 4</p> <code>bsa</code> <code>float</code> <p>Sum of shots allowed that were ultimately blocked, e.g., 2</p> <code>msf</code> <code>float</code> <p>Sum of shots taken that missed net, e.g., 4</p> <code>hdmsf</code> <code>float</code> <p>Sum of high-danger shots taken that missed net, e.g., 0</p> <code>msa</code> <code>float</code> <p>Sum of shots allowed that missed net, e.g., 4</p> <code>hdmsa</code> <code>float</code> <p>Sum of high-danger shots allowed that missed net, e.g., 1</p> <code>ozf</code> <code>float</code> <p>Sum of offensive zone faceoffs that occur, e.g., 6</p> <code>nzf</code> <code>float</code> <p>Sum of neutral zone faceoffs that occur, e.g., 4</p> <code>dzf</code> <code>float</code> <p>Sum of defensive zone faceoffs that occur, e.g., 6</p> <code>fow</code> <code>float</code> <p>Sum of faceoffs won, e.g., 8</p> <code>fol</code> <code>float</code> <p>Sum of faceoffs lost, e.g., 11</p> <code>ozfw</code> <code>float</code> <p>Sum of offensive zone faceoffs won, e.g., 3</p> <code>ozfl</code> <code>float</code> <p>Sum of offensive zone faceoffs lost, e.g., 1</p> <code>nzfw</code> <code>float</code> <p>Sum of neutral zone faceoffs won, e.g., 2</p> <code>nzfl</code> <code>float</code> <p>Sum of neutral zone faceoffs lost, e.g., 3</p> <code>dzfw</code> <code>float</code> <p>Sum of defensive zone faceoffs won, e.g., 3</p> <code>dzfl</code> <code>float</code> <p>Sum of defensive zone faceoffs lost, e.g., 7</p> <code>hf</code> <code>float</code> <p>Sum of hits dished out, e.g., 7</p> <code>ht</code> <code>float</code> <p>Sum of hits taken, e.g., 5</p> <code>give</code> <code>float</code> <p>Sum of giveaways, e.g., 5</p> <code>take</code> <code>float</code> <p>Sum of takeaways, e.g., 1</p> <code>pent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken, e.g., 0</p> <code>pent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken, e.g., 0</p> <code>pent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken, e.g., 0</p> <code>pent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken, e.g., 0</p> <code>pent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken, e.g., 0</p> <code>pend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn, e.g., 0</p> <code>pend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn, e.g., 0</p> <code>pend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn, e.g., 0</p> <code>pend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn, e.g., 0</p> <code>pend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn, e.g., 0</p> <p>Examples:</p> <p>Basic play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n&gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for teams</p> <pre><code>&gt;&gt;&gt; team = prep_team(pbp)\n</code></pre> <p>Period-level team stats, grouped by score state</p> <pre><code>&gt;&gt;&gt; team = prep_team(pbp, level='period', score=True)\n</code></pre> Source code in <code>chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_team(\n    data: pd.DataFrame, level: str = \"game\", strengths: bool = True, score: bool = False\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Prepares a team stats dataframe using EvolvingHockey data,\n    aggregated to desired level. Capable of returning cuts that account for strength state,\n    period, and score state.\n\n    Returns a Pandas DataFrame.\n\n    Parameters:\n        data (pd.DataFrame):\n            Dataframe from the prep_pbp function with the default columns argument\n        level (str):\n            Level to aggregate stats, e.g., 'game'\n        strengths (bool):\n            Whether to aggregate to strength state level, e.g., True\n        score (bool):\n            Whether to aggregate to score state level\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20232024\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2023020044\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2023-10-17\n        team (str):\n            3-letter abbreviation of the team, e.g., NSH\n        opp_team (str):\n            3-letter abbreviation of the opposing team, e.g., EDM\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5v5\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 1v6\n        game_period (int):\n            Game period, e.g., 3\n        toi (float):\n            Time on-ice in minutes, e.g., 18\n        gf (float):\n            Sum of goals scored, e.g., 0\n        gf_adj (float):\n            Sum of venue- and score-adjusted goals scored, e.g., 0\n        hdgf (float):\n            Sum of high-danger goals scored, e.g., 0\n        ga (float):\n            Sum of goals allowed, e.g., 0\n        ga_adj (float):\n            Sum of venue- and score-adjusted goals allowed, e.g., 0\n        hdga (float):\n            Sum of high-danger goals allowed, e.g., 0\n        xgf (float):\n            Sum of expected goals generated, e.g., 0.957070\n        xgf_adj (float):\n            Sum of venue- and score-adjusted expected goals generated, e.g., 0.883376\n        xga (float):\n            Sum of expected goals allowed, e.g., 0.535971\n        xga_adj (float):\n            Sum of venue- and score-adjusted expected goals allowed, e.g., 0.584744\n        sf (float):\n            Sum of shots taken, e.g., 10\n        sf_adj (float):\n            Sum of venue- and score-adjusted shots taken, e.g., 8.620\n        hdsf (float):\n            Sum of high-danger shots taken, e.g., 2\n        sa (float):\n            Sum of shots allowed, e.g., 4\n        sa_adj (float):\n            Sum of venue- and score-adjusted shots allowed, e.g., 4.764\n        hdsa (float):\n            Sum of high-danger shots allowed, e.g., 0\n        ff (float):\n            Sum of fenwick events generated, e.g., 14\n        ff_adj (float):\n            Sum of venue- and score-adjusted fenwick events generated, e.g., 12.026\n        hdff (float):\n            Sum of high-danger fenwick events generated, e.g., 2\n        fa (float):\n            Sum of fenwick events allowed, e.g., 8\n        fa_adj (float):\n            Sum of venue- and score-adjusted fenwick events allowed, e.g., 9.576\n        hdfa (float):\n            Sum of high-danger fenwick events allowed, e.g., 1\n        cf (float):\n            Sum of corsi events generated, e.g., 16\n        cf_adj (float):\n            Sum of venue- and score-adjusted corsi events generated, e.g., 13.488\n        ca (float):\n            Sum of corsi events allowed, e.g., 12.0\n        ca_adj (float):\n            Sum of venue- and score-adjusted corsi events allowed, e.g., 14.760\n        bsf (float):\n            Sum of shots taken that were ultimately blocked, e.g., 4\n        bsa (float):\n            Sum of shots allowed that were ultimately blocked, e.g., 2\n        msf (float):\n            Sum of shots taken that missed net, e.g., 4\n        hdmsf (float):\n            Sum of high-danger shots taken that missed net, e.g., 0\n        msa (float):\n            Sum of shots allowed that missed net, e.g., 4\n        hdmsa (float):\n            Sum of high-danger shots allowed that missed net, e.g., 1\n        ozf (float):\n            Sum of offensive zone faceoffs that occur, e.g., 6\n        nzf (float):\n            Sum of neutral zone faceoffs that occur, e.g., 4\n        dzf (float):\n            Sum of defensive zone faceoffs that occur, e.g., 6\n        fow (float):\n            Sum of faceoffs won, e.g., 8\n        fol (float):\n            Sum of faceoffs lost, e.g., 11\n        ozfw (float):\n            Sum of offensive zone faceoffs won, e.g., 3\n        ozfl (float):\n            Sum of offensive zone faceoffs lost, e.g., 1\n        nzfw (float):\n            Sum of neutral zone faceoffs won, e.g., 2\n        nzfl (float):\n            Sum of neutral zone faceoffs lost, e.g., 3\n        dzfw (float):\n            Sum of defensive zone faceoffs won, e.g., 3\n        dzfl (float):\n            Sum of defensive zone faceoffs lost, e.g., 7\n        hf (float):\n            Sum of hits dished out, e.g., 7\n        ht (float):\n            Sum of hits taken, e.g., 5\n        give (float):\n            Sum of giveaways, e.g., 5\n        take (float):\n            Sum of takeaways, e.g., 1\n        pent0 (float):\n            Sum of individual 0-minute penalties taken, e.g., 0\n        pent2 (float):\n            Sum of individual 2-minute penalties taken, e.g., 0\n        pent4 (float):\n            Sum of individual 4-minute penalties taken, e.g., 0\n        pent5 (float):\n            Sum of individual 5-minute penalties taken, e.g., 0\n        pent10 (float):\n            Sum of individual 10-minute penalties taken, e.g., 0\n        pend0 (float):\n            Sum of individual 0-minute penalties drawn, e.g., 0\n        pend2 (float):\n            Sum of individual 2-minute penalties drawn, e.g., 0\n        pend4 (float):\n            Sum of individual 4-minute penalties drawn, e.g., 0\n        pend5 (float):\n            Sum of individual 5-minute penalties drawn, e.g., 0\n        pend10 (float):\n            Sum of individual 10-minute penalties drawn, e.g., 0\n\n    Examples:\n        Basic play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv('./raw_shifts.csv')\n        &gt;&gt;&gt; pbp_raw = pd.read_csv('./raw_pbp.csv')\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n        Basic game-level stats for teams\n        &gt;&gt;&gt; team = prep_team(pbp)\n\n        Period-level team stats, grouped by score state\n        &gt;&gt;&gt; team = prep_team(pbp, level='period', score=True)\n    \"\"\"\n\n    with Progress(\n        TextColumn(\"[progress.description]{task.description}\"),\n        SpinnerColumn(),\n        BarColumn(),\n        TaskProgressColumn(),\n        TextColumn(\"\u2022\"),\n        TimeElapsedColumn(),\n    ) as progress:\n        pbar_message = \"Prepping lines data...\"\n\n        team_task = progress.add_task(pbar_message, total=1)\n\n        # Getting the \"for\" stats\n\n        group_list = [\"season\", \"session\", \"event_team\"]\n\n        if strengths is True:\n            group_list.append(\"strength_state\")\n\n        if level == \"game\" or level == \"period\":\n            group_list.insert(3, \"opp_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"game_period\")\n\n        if score is True:\n            group_list.append(\"score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"block\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"give\",\n            \"take\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n        new_cols = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"msf\",\n            \"bsa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"give\",\n            \"take\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"hf\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols))\n\n        new_cols.update({\"event_team\": \"team\"})\n\n        stats_for = (\n            data.groupby(group_list, as_index=False)\n            .agg(agg_dict)\n            .rename(columns=new_cols)\n        )\n\n        # Getting the \"against\" stats\n\n        group_list = [\"season\", \"session\", \"opp_team\"]\n\n        if strengths is True:\n            group_list.append(\"opp_strength_state\")\n\n        if level == \"game\" or level == \"period\":\n            group_list.insert(3, \"event_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"game_period\")\n\n        if score is True:\n            group_list.append(\"opp_score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"block\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n        new_cols = [\n            \"xga\",\n            \"xga_adj\",\n            \"sa\",\n            \"sa_adj\",\n            \"msa\",\n            \"bsf\",\n            \"ca\",\n            \"ca_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols))\n\n        new_cols.update(\n            {\n                \"opp_team\": \"team\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                \"event_team\": \"opp_team\",\n            }\n        )\n\n        stats_against = (\n            data.groupby(group_list, as_index=False)\n            .agg(agg_dict)\n            .rename(columns=new_cols)\n        )\n\n        merge_list = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n        ]\n\n        merge_list = [\n            x\n            for x in merge_list\n            if x in stats_for.columns and x in stats_against.columns\n        ]\n\n        team_stats = stats_for.merge(stats_against, on=merge_list, how=\"outer\")\n\n        team_stats[\"toi\"] = (team_stats.toi_x + team_stats.toi_y) / 60\n\n        team_stats = team_stats.drop([\"toi_x\", \"toi_y\"], axis=1)\n\n        fos = [\"ozf\", \"nzf\", \"dzf\"]\n\n        for fo in fos:\n            team_stats[fo] = team_stats[f\"{fo}w\"] + team_stats[f\"{fo}w\"]\n\n        team_stats = team_stats.dropna(subset=\"toi\").reset_index(drop=True)\n\n        stats = [\n            \"toi\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"bsf\",\n            \"bsa\",\n            \"msf\",\n            \"hdmsf\",\n            \"msa\",\n            \"hdmsa\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"hf\",\n            \"ht\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        for stat in stats:\n            if stat not in team_stats.columns:\n                team_stats[stat] = 0\n\n            else:\n                team_stats[stat] = pd.to_numeric(team_stats[stat].fillna(0))\n\n        cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n            \"toi\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"bsf\",\n            \"bsa\",\n            \"msf\",\n            \"hdmsf\",\n            \"msa\",\n            \"hdmsa\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"hf\",\n            \"ht\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        cols = [x for x in cols if x in team_stats]\n\n        team_stats = team_stats[cols]\n\n        pbar_message = \"Finished prepping team data\"\n\n        progress.update(team_task, description=pbar_message, advance=1, refresh=True)\n\n    return team_stats\n</code></pre>"},{"location":"xg_model/overview/","title":"Coming soon","text":"<p>In production</p>"},{"location":"xg_model/xg_model/","title":"xG Model","text":"<p>xG model landing page</p>"},{"location":"blog/archive/2023/","title":"2023","text":""}]}